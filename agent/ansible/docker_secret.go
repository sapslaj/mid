// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Create and remove Docker secrets in a Swarm environment. Similar to `docker
// secret create` and `docker secret rm`.
// Adds to the metadata of new secrets `ansible_key`, an encrypted hash
// representation of the data, which is then used in future runs to test if a
// secret has changed. If `ansible_key` is not present, then a secret will not
// be updated unless the `force` option is set.
// Updates to secrets are performed by removing the secret and creating it
// again.
const DockerSecretName = "docker_secret"

// Set to `present`, if the secret should exist, and `absent`, if it should not.
type DockerSecretState string

const (
	DockerSecretStateAbsent  DockerSecretState = "absent"
	DockerSecretStatePresent DockerSecretState = "present"
)

// Convert a supported type to an optional (pointer) DockerSecretState
func OptionalDockerSecretState[T interface {
	*DockerSecretState | DockerSecretState | *string | string
}](s T) *DockerSecretState {
	switch v := any(s).(type) {
	case *DockerSecretState:
		return v
	case DockerSecretState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerSecretState(*v)
		return &val
	case string:
		val := DockerSecretState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_secret` Ansible module.
type DockerSecretParameters struct {
	// The value of the secret.
	// Mutually exclusive with `data_src`. One of `data` and `data_src` is required
	// if `state=present`.
	Data *string `json:"data,omitempty"`

	// If set to `true`, the data is assumed to be Base64 encoded and will be
	// decoded before being used.
	// To use binary `data`, it is better to keep it Base64 encoded and let it be
	// decoded by this option.
	// default: false
	DataIsB64 *bool `json:"data_is_b64,omitempty"`

	// The file on the target from which to read the secret.
	// Mutually exclusive with `data`. One of `data` and `data_src` is required if
	// `state=present`.
	DataSrc *string `json:"data_src,omitempty"`

	// A map of key:value meta data, where both key and value are expected to be
	// strings.
	// If new meta data is provided, or existing meta data is modified, the secret
	// will be updated by removing it and creating it again.
	Labels *map[string]any `json:"labels,omitempty"`

	// Use with `state=present` to always remove and recreate an existing secret.
	// If `true`, an existing secret will be replaced, even if it has not changed.
	// default: false
	Force *bool `json:"force,omitempty"`

	// If set to `true`, secrets are created with an increasing version number
	// appended to their name.
	// Adds a label containing the version number to the managed secrets with the
	// name `ansible_version`.
	// default: false
	RollingVersions *bool `json:"rolling_versions,omitempty"`

	// When using `rolling_versions`, the number of old versions of the secret to
	// keep.
	// Extraneous old secrets are deleted after the new one is created.
	// Set to `-1` to keep everything or to `0` or `1` to keep only the current
	// one.
	// default: 5
	VersionsToKeep *int `json:"versions_to_keep,omitempty"`

	// The name of the secret.
	Name string `json:"name"`

	// Set to `present`, if the secret should exist, and `absent`, if it should
	// not.
	// default: DockerSecretStatePresent
	State *DockerSecretState `json:"state,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	// `Note:` this option is no longer supported for Docker SDK for Python 7.0.0+.
	// Specifying it with Docker SDK for Python 7.0.0 or newer will lead to an
	// error.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by Docker SDK for Python
	// and the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// Requires Docker SDK for Python 4.4.0 or newer.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode.
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerSecretParameters into an `rpc.RPCCall`.
func (p DockerSecretParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerSecretName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_secret` Ansible module.
type DockerSecretReturn struct {
	AnsibleCommonReturns

	// The ID assigned by Docker to the secret object.
	SecretId *string `json:"secret_id,omitempty"`

	// The name of the created secret object.
	SecretName *string `json:"secret_name,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerSecretReturn`
func DockerSecretReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerSecretReturn, error) {
	return cast.AnyToJSONT[DockerSecretReturn](r.Result.Result)
}
