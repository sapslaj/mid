// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Locks package versions using the `versionlock` plugin in `dnf` based systems.
// This plugin takes a set of name and versions for packages and excludes all
// other versions of those packages. This allows you to for example protect
// packages from being updated by newer versions. The state of the plugin that
// reflects locking of packages is the `locklist`.
const DnfVersionlockName = "dnf_versionlock"

// Whether to add (`present` or `excluded`) to or remove (`absent` or `clean`)
// from the `locklist`.
// `present` will add a package name spec to the `locklist`. If there is a
// installed package that matches, then only that version will be added.
// Otherwise, all available package versions will be added.
// `excluded` will add a package name spec as excluded to the `locklist`. It
// means that packages represented by the package name spec will be excluded
// from transaction operations. All available package versions will be added.
// `absent` will delete entries in the `locklist` that match the package name
// spec.
// `clean` will delete all entries in the `locklist`. This option is mutually
// exclusive with `name`.
type DnfVersionlockState string

const (
	DnfVersionlockStateAbsent   DnfVersionlockState = "absent"
	DnfVersionlockStateClean    DnfVersionlockState = "clean"
	DnfVersionlockStateExcluded DnfVersionlockState = "excluded"
	DnfVersionlockStatePresent  DnfVersionlockState = "present"
)

// Convert a supported type to an optional (pointer) DnfVersionlockState
func OptionalDnfVersionlockState[T interface {
	*DnfVersionlockState | DnfVersionlockState | *string | string
}](s T) *DnfVersionlockState {
	switch v := any(s).(type) {
	case *DnfVersionlockState:
		return v
	case DnfVersionlockState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DnfVersionlockState(*v)
		return &val
	case string:
		val := DnfVersionlockState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `dnf_versionlock` Ansible module.
type DnfVersionlockParameters struct {
	// Package name spec to add or exclude to or delete from the `locklist` using
	// the format expected by the `dnf repoquery` command.
	// This parameter is mutually exclusive with `state=clean`.
	// default: []
	Name *[]string `json:"name,omitempty"`

	// Do not resolve package name specs to NEVRAs to find specific version to lock
	// to. Instead the package name specs are used as they are. This enables
	// locking to not yet available versions of the package.
	// default: false
	Raw *bool `json:"raw,omitempty"`

	// Whether to add (`present` or `excluded`) to or remove (`absent` or `clean`)
	// from the `locklist`.
	// `present` will add a package name spec to the `locklist`. If there is a
	// installed package that matches, then only that version will be added.
	// Otherwise, all available package versions will be added.
	// `excluded` will add a package name spec as excluded to the `locklist`. It
	// means that packages represented by the package name spec will be excluded
	// from transaction operations. All available package versions will be added.
	// `absent` will delete entries in the `locklist` that match the package name
	// spec.
	// `clean` will delete all entries in the `locklist`. This option is mutually
	// exclusive with `name`.
	// default: DnfVersionlockStatePresent
	State *DnfVersionlockState `json:"state,omitempty"`
}

// Wrap the `DnfVersionlockParameters into an `rpc.RPCCall`.
func (p DnfVersionlockParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DnfVersionlockName,
			Args: args,
		},
	}, nil
}

// Return values for the `dnf_versionlock` Ansible module.
type DnfVersionlockReturn struct {
	AnsibleCommonReturns

	// Locklist before module execution.
	LocklistPre *[]string `json:"locklist_pre,omitempty"`

	// Locklist after module execution.
	LocklistPost *[]string `json:"locklist_post,omitempty"`

	// Package name specs meant to be added by versionlock.
	SpecsToadd *[]string `json:"specs_toadd,omitempty"`

	// Package name specs meant to be deleted by versionlock.
	SpecsTodelete *[]string `json:"specs_todelete,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DnfVersionlockReturn`
func DnfVersionlockReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DnfVersionlockReturn, error) {
	return rpc.AnyToJSONT[DnfVersionlockReturn](r.Result.Result)
}
