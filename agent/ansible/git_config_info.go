// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// The `community.general.git_config_info` module reads the git configuration by
// invoking `git config`.
const GitConfigInfoName = "git_config_info"

// Specify which scope to read values from.
// If set to `global`, the global git config is used. `path` is ignored.
// If set to `system`, the system git config is used. `path` is ignored.
// If set to `local`, `path` must be set to the repo to read from.
// If set to `file`, `path` must be set to the config file to read from.
type GitConfigInfoScope string

const (
	GitConfigInfoScopeGlobal GitConfigInfoScope = "global"
	GitConfigInfoScopeSystem GitConfigInfoScope = "system"
	GitConfigInfoScopeLocal  GitConfigInfoScope = "local"
	GitConfigInfoScopeFile   GitConfigInfoScope = "file"
)

// Convert a supported type to an optional (pointer) GitConfigInfoScope
func OptionalGitConfigInfoScope[T interface {
	*GitConfigInfoScope | GitConfigInfoScope | *string | string
}](s T) *GitConfigInfoScope {
	switch v := any(s).(type) {
	case *GitConfigInfoScope:
		return v
	case GitConfigInfoScope:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := GitConfigInfoScope(*v)
		return &val
	case string:
		val := GitConfigInfoScope(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `git_config_info` Ansible module.
type GitConfigInfoParameters struct {
	// The name of the setting to read.
	// If not provided, all settings will be returned as R`config_values`.
	Name *string `json:"name,omitempty"`

	// Path to a git repository or file for reading values from a specific repo.
	// If `scope` is `local`, this must point to a repository to read from.
	// If `scope` is `file`, this must point to specific git config file to read
	// from.
	// Otherwise `path` is ignored if set.
	Path *string `json:"path,omitempty"`

	// Specify which scope to read values from.
	// If set to `global`, the global git config is used. `path` is ignored.
	// If set to `system`, the system git config is used. `path` is ignored.
	// If set to `local`, `path` must be set to the repo to read from.
	// If set to `file`, `path` must be set to the config file to read from.
	// default: GitConfigInfoScopeSystem
	Scope *GitConfigInfoScope `json:"scope,omitempty"`
}

// Wrap the `GitConfigInfoParameters into an `rpc.RPCCall`.
func (p GitConfigInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: GitConfigInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `git_config_info` Ansible module.
type GitConfigInfoReturn struct {
	AnsibleCommonReturns

	// When `name` is set, a string containing the value of the setting in name. If
	// `name` is not set, empty. If a config key such as `push.pushoption` has more
	// then one entry, just the first one is returned here.
	ConfigValue *string `json:"config_value,omitempty"`

	// This is a dictionary mapping a git configuration setting to a list of its
	// values.
	// When `name` is not set, all configuration settings are returned here.
	// When `name` is set, only the setting specified in `name` is returned here.
	// If that setting is not set, the key will still be present, and its value
	// will be an empty list.
	ConfigValues *map[string]any `json:"config_values,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `GitConfigInfoReturn`
func GitConfigInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (GitConfigInfoReturn, error) {
	return cast.AnyToJSONT[GitConfigInfoReturn](r.Result.Result)
}
