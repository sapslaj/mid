// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AnsibleTaskList extends pulumi.CustomResource {
  /**
   * Get an existing AnsibleTaskList resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AnsibleTaskList {
    return new AnsibleTaskList(name, undefined as any, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "mid:resource:AnsibleTaskList";

  /**
   * Returns true if the given object is an instance of AnsibleTaskList.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is AnsibleTaskList {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === AnsibleTaskList.__pulumiType;
  }

  public readonly config!: pulumi.Output<outputs.ResourceConfig | undefined>;
  public readonly connection!: pulumi.Output<outputs.Connection | undefined>;
  public readonly /*out*/ results!: pulumi.Output<outputs.resource.AnsibleTaskListStateResults>;
  public readonly tasks!: pulumi.Output<outputs.resource.AnsibleTaskListArgsTasks>;
  public readonly triggers!: pulumi.Output<outputs.TriggersOutput>;

  /**
   * Create a AnsibleTaskList resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: AnsibleTaskListArgs, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (!opts.id) {
      if (args?.tasks === undefined && !opts.urn) {
        throw new Error("Missing required property 'tasks'");
      }
      resourceInputs["config"] = args?.config;
      resourceInputs["connection"] = args
        ? (args.connection ? pulumi.output(args.connection).apply(inputs.connectionArgsProvideDefaults) : undefined)
        : undefined;
      resourceInputs["tasks"] = args?.tasks;
      resourceInputs["triggers"] = args?.triggers;
      resourceInputs["results"] = undefined /*out*/;
    } else {
      resourceInputs["config"] = undefined /*out*/;
      resourceInputs["connection"] = undefined /*out*/;
      resourceInputs["results"] = undefined /*out*/;
      resourceInputs["tasks"] = undefined /*out*/;
      resourceInputs["triggers"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(AnsibleTaskList.__pulumiType, name, resourceInputs, opts);
  }
}

/**
 * The set of arguments for constructing a AnsibleTaskList resource.
 */
export interface AnsibleTaskListArgs {
  config?: pulumi.Input<inputs.ResourceConfigArgs>;
  connection?: pulumi.Input<inputs.ConnectionArgs>;
  tasks: pulumi.Input<inputs.resource.AnsibleTaskListArgsTasksArgs>;
  triggers?: pulumi.Input<inputs.TriggersInputArgs>;
}
