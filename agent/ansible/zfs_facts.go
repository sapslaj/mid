// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Gather facts from ZFS dataset properties.
const ZfsFactsName = "zfs_facts"

// Specifies which datasets types to display. Multiple values have to be
// provided as a list or in comma-separated form.
// Value `all` cannot be used together with other values.
type ZfsFactsType string

const (
	ZfsFactsTypeAll        ZfsFactsType = "all"
	ZfsFactsTypeFilesystem ZfsFactsType = "filesystem"
	ZfsFactsTypeVolume     ZfsFactsType = "volume"
	ZfsFactsTypeSnapshot   ZfsFactsType = "snapshot"
	ZfsFactsTypeBookmark   ZfsFactsType = "bookmark"
)

// Convert a supported type to an optional (pointer) ZfsFactsType
func OptionalZfsFactsType[T interface {
	*ZfsFactsType | ZfsFactsType | *string | string
}](s T) *ZfsFactsType {
	switch v := any(s).(type) {
	case *ZfsFactsType:
		return v
	case ZfsFactsType:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := ZfsFactsType(*v)
		return &val
	case string:
		val := ZfsFactsType(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `zfs_facts` Ansible module.
type ZfsFactsParameters struct {
	// ZFS dataset name.
	Name string `json:"name"`

	// Specifies if properties for any children should be recursively displayed.
	// default: false
	Recurse *bool `json:"recurse,omitempty"`

	// Specifies if property values should be displayed in machine friendly format.
	// default: false
	Parsable *bool `json:"parsable,omitempty"`

	// Specifies which dataset properties should be queried in comma-separated
	// format. For more information about dataset properties, check zfs(1M) man
	// page.
	// default: "all"
	Properties *string `json:"properties,omitempty"`

	// Specifies which datasets types to display. Multiple values have to be
	// provided as a list or in comma-separated form.
	// Value `all` cannot be used together with other values.
	// default: []ZfsFactsType{ZfsFactsTypeAll}
	Type *ZfsFactsType `json:"type,omitempty"`

	// Specifies recursion depth.
	// default: 0
	Depth *int `json:"depth,omitempty"`
}

// Wrap the `ZfsFactsParameters into an `rpc.RPCCall`.
func (p ZfsFactsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: ZfsFactsName,
			Args: args,
		},
	}, nil
}

// Return values for the `zfs_facts` Ansible module.
type ZfsFactsReturn struct {
	AnsibleCommonReturns

	// ZFS dataset name.
	Name *string `json:"name,omitempty"`

	// If parsable output should be provided in machine friendly format.
	Parsable *bool `json:"parsable,omitempty"`

	// If we should recurse over ZFS dataset.
	Recurse *bool `json:"recurse,omitempty"`

	// ZFS dataset facts.
	ZfsDatasets *string `json:"zfs_datasets,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `ZfsFactsReturn`
func ZfsFactsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (ZfsFactsReturn, error) {
	return cast.AnyToJSONT[ZfsFactsReturn](r.Result.Result)
}
