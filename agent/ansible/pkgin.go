// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// The standard package manager for SmartOS, but also usable on NetBSD or any OS
// that uses `pkgsrc`. (Home: `http://pkgin.net/`).
const PkginName = "pkgin"

// Intended state of the package.
type PkginState string

const (
	PkginStatePresent PkginState = "present"
	PkginStateAbsent  PkginState = "absent"
)

// Convert a supported type to an optional (pointer) PkginState
func OptionalPkginState[T interface {
	*PkginState | PkginState | *string | string
}](s T) *PkginState {
	switch v := any(s).(type) {
	case *PkginState:
		return v
	case PkginState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := PkginState(*v)
		return &val
	case string:
		val := PkginState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `pkgin` Ansible module.
type PkginParameters struct {
	// Name of package to install/remove;
	// Multiple names may be given, separated by commas.
	Name *[]string `json:"name,omitempty"`

	// Intended state of the package.
	// default: PkginStatePresent
	State *PkginState `json:"state,omitempty"`

	// Update repository database. Can be run with other steps or on its own.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`

	// Upgrade main packages to their newer versions.
	// default: false
	Upgrade *bool `json:"upgrade,omitempty"`

	// Upgrade all packages to their newer versions.
	// default: false
	FullUpgrade *bool `json:"full_upgrade,omitempty"`

	// Clean packages cache.
	// default: false
	Clean *bool `json:"clean,omitempty"`

	// Force package reinstall.
	// default: false
	Force *bool `json:"force,omitempty"`
}

// Wrap the `PkginParameters into an `rpc.RPCCall`.
func (p PkginParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PkginName,
			Args: args,
		},
	}, nil
}

// Return values for the `pkgin` Ansible module.
type PkginReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `PkginReturn`
func PkginReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PkginReturn, error) {
	return rpc.AnyToJSONT[PkginReturn](r.Result.Result)
}
