// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const AssembleName = "assemble"

//go:embed assemble.zip
var AssembleZipfile []byte

type AssembleParameters struct {
	Src          string  `json:"src"`
	Dest         string  `json:"dest"`
	Backup       *bool   `json:"backup,omitempty"`
	Delimiter    *string `json:"delimiter,omitempty"`
	RemoteSrc    *bool   `json:"remote_src,omitempty"`
	Regexp       *string `json:"regexp,omitempty"`
	IgnoreHidden *bool   `json:"ignore_hidden,omitempty"`
	Validate     *string `json:"validate,omitempty"`
}

func (p *AssembleParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  AssembleZipfile,
			Name: AssembleName,
			Args: args,
		},
	}, nil
}

type AssembleReturn struct {
	AnsibleCommonReturns
}

func AssembleReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (AssembleReturn, error) {
	return rpc.AnyToJSONT[AssembleReturn](r.Result.Result)
}
