// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This modules configures the HP iLO interface using `hponcfg`.
const HponcfgName = "hponcfg"

// Parameters for the `hponcfg` Ansible module.
type HponcfgParameters struct {
	// The XML file as accepted by `hponcfg`.
	Path string `json:"path"`

	// The minimum firmware level needed.
	Minfw *string `json:"minfw,omitempty"`

	// Path to the hponcfg executable (`hponcfg` which uses `PATH`).
	// default: "hponcfg"
	Executable *string `json:"executable,omitempty"`

	// Run `hponcfg` in verbose mode (-v).
	// default: false
	Verbose *bool `json:"verbose,omitempty"`
}

// Wrap the `HponcfgParameters into an `rpc.RPCCall`.
func (p *HponcfgParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: HponcfgName,
			Args: args,
		},
	}, nil
}

// Return values for the `hponcfg` Ansible module.
type HponcfgReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `HponcfgReturn`
func HponcfgReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (HponcfgReturn, error) {
	return rpc.AnyToJSONT[HponcfgReturn](r.Result.Result)
}
