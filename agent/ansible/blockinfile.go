// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const BlockinfileName = "blockinfile"

type BlockinfileParameters struct {
	Path           string  `json:"path"`
	State          *string `json:"state,omitempty"`
	Marker         *string `json:"marker,omitempty"`
	Block          *string `json:"block,omitempty"`
	Insertafter    *string `json:"insertafter,omitempty"`
	Insertbefore   *string `json:"insertbefore,omitempty"`
	Create         *bool   `json:"create,omitempty"`
	Backup         *bool   `json:"backup,omitempty"`
	MarkerBegin    *string `json:"marker_begin,omitempty"`
	MarkerEnd      *string `json:"marker_end,omitempty"`
	AppendNewline  *bool   `json:"append_newline,omitempty"`
	PrependNewline *bool   `json:"prepend_newline,omitempty"`
	Mode           *any    `json:"mode,omitempty"`
	Owner          *string `json:"owner,omitempty"`
	Group          *string `json:"group,omitempty"`
	Seuser         *string `json:"seuser,omitempty"`
	Serole         *string `json:"serole,omitempty"`
	Setype         *string `json:"setype,omitempty"`
	Selevel        *string `json:"selevel,omitempty"`
	UnsafeWrites   *bool   `json:"unsafe_writes,omitempty"`
	Attributes     *string `json:"attributes,omitempty"`
	Validate       *string `json:"validate,omitempty"`
}

func (p *BlockinfileParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: BlockinfileName,
			Args: args,
		},
	}, nil
}

type BlockinfileReturn struct {
	AnsibleCommonReturns
}

func BlockinfileReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (BlockinfileReturn, error) {
	return rpc.AnyToJSONT[BlockinfileReturn](r.Result.Result)
}
