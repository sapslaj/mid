// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages a user's home directory managed by systemd-homed.
const HomectlName = "homectl"

// The operation to take on the user.
type HomectlState string

const (
	HomectlStateAbsent  HomectlState = "absent"
	HomectlStatePresent HomectlState = "present"
)

func OptionalHomectlState[T interface {
	*HomectlState | HomectlState | *string | string
}](s T) *HomectlState {
	switch v := any(s).(type) {
	case *HomectlState:
		return v
	case HomectlState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := HomectlState(*v)
		return &val
	case string:
		val := HomectlState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Indicates the storage mechanism for the user's home directory.
// If the storage type is not specified, `homed.conf(5\`) defines which default
// storage to use.
// Only used when a user is first created.
type HomectlStorage string

const (
	HomectlStorageClassic   HomectlStorage = "classic"
	HomectlStorageLuks      HomectlStorage = "luks"
	HomectlStorageDirectory HomectlStorage = "directory"
	HomectlStorageSubvolume HomectlStorage = "subvolume"
	HomectlStorageFscrypt   HomectlStorage = "fscrypt"
	HomectlStorageCifs      HomectlStorage = "cifs"
)

func OptionalHomectlStorage[T interface {
	*HomectlStorage | HomectlStorage | *string | string
}](s T) *HomectlStorage {
	switch v := any(s).(type) {
	case *HomectlStorage:
		return v
	case HomectlStorage:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := HomectlStorage(*v)
		return &val
	case string:
		val := HomectlStorage(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `homectl` Ansible module.
type HomectlParameters struct {
	// The user name to create, remove, or update.
	Name string `json:"name"`

	// Set the user's password to this.
	// Homed requires this value to be in cleartext on user creation and updating a
	// user.
	// The module takes the password and generates a password hash in SHA-512 with
	// 10000 rounds of salt generation using crypt.
	// See `https://systemd.io/USER_RECORD/`.
	// This is required for `state=present`. When an existing user is updated this
	// is checked against the stored hash in homed.
	Password *string `json:"password,omitempty"`

	// The operation to take on the user.
	// default: HomectlStatePresent
	State *HomectlState `json:"state,omitempty"`

	// Indicates the storage mechanism for the user's home directory.
	// If the storage type is not specified, `homed.conf(5\`) defines which default
	// storage to use.
	// Only used when a user is first created.
	Storage *HomectlStorage `json:"storage,omitempty"`

	// The intended home directory disk space.
	// Human readable value such as `10G`, `10M`, or `10B`.
	Disksize *string `json:"disksize,omitempty"`

	// When used with `disksize` this will attempt to resize the home directory
	// immediately.
	// default: false
	Resize *bool `json:"resize,omitempty"`

	// The user's real ('human') name.
	// This can also be used to add a comment to maintain compatibility with
	// `useradd`.
	Realname *string `json:"realname,omitempty"`

	// The 'realm' a user is defined in.
	Realm *string `json:"realm,omitempty"`

	// The email address of the user.
	Email *string `json:"email,omitempty"`

	// A free-form location string describing the location of the user.
	Location *string `json:"location,omitempty"`

	// The name of an icon picked by the user, for example for the purpose of an
	// avatar.
	// Should follow the semantics defined in the Icon Naming Specification.
	// See `https://specifications.freedesktop.org/icon-naming-spec/icon-naming-
	// spec-latest.html` for specifics.
	Iconname *string `json:"iconname,omitempty"`

	// Path to use as home directory for the user.
	// This is the directory the user's home directory is mounted to while the user
	// is logged in.
	// This is not where the user's data is actually stored, see `imagepath` for
	// that.
	// Only used when a user is first created.
	Homedir *string `json:"homedir,omitempty"`

	// Path to place the user's home directory.
	// See `https://www.freedesktop.org/software/systemd/man/homectl.html#--image-
	// path=PATH` for more information.
	// Only used when a user is first created.
	Imagepath *string `json:"imagepath,omitempty"`

	// Sets the UID of the user.
	// If using `gid` homed requires the value to be the same.
	// Only used when a user is first created.
	Uid *int `json:"uid,omitempty"`

	// Sets the gid of the user.
	// If using `uid` homed requires the value to be the same.
	// Only used when a user is first created.
	Gid *int `json:"gid,omitempty"`

	// String separated by comma each indicating mount options for a users home
	// directory.
	// Valid options are `nosuid`, `nodev` or `noexec`.
	// Homed by default uses `nodev` and `nosuid` while `noexec` is off.
	Mountopts *string `json:"mountopts,omitempty"`

	// Sets the umask for the user's login sessions.
	// Value from `0000` to `0777`.
	Umask *int `json:"umask,omitempty"`

	// String separated by comma each indicating a UNIX group this user shall be a
	// member of.
	// Groups the user should be a member of should be supplied as comma separated
	// list.
	Memberof *string `json:"memberof,omitempty"`

	// The absolute path to the skeleton directory to populate a new home directory
	// from.
	// This is only used when a home directory is first created.
	// If not specified homed by default uses `/etc/skel`.
	Skeleton *string `json:"skeleton,omitempty"`

	// Shell binary to use for terminal logins of given user.
	// If not specified homed by default uses `/bin/bash`.
	Shell *string `json:"shell,omitempty"`

	// String separated by comma each containing an environment variable and its
	// value to set for the user's login session, in a format compatible with
	// `putenv(\`).
	// Any environment variable listed here is automatically set by pam_systemd for
	// all login sessions of the user.
	Environment *string `json:"environment,omitempty"`

	// Preferred timezone to use for the user.
	// Should be a tzdata compatible location string such as `America/New_York`.
	Timezone *string `json:"timezone,omitempty"`

	// Whether the user account should be locked or not.
	Locked *bool `json:"locked,omitempty"`

	// The preferred language/locale for the user.
	// This should be in a format compatible with the `LANG` environment variable.
	Language *string `json:"language,omitempty"`

	// Password hint for the given user.
	Passwordhint *string `json:"passwordhint,omitempty"`

	// String separated by comma each listing a SSH public key that is authorized
	// to access the account.
	// The keys should follow the same format as the lines in a traditional
	// `~/.ssh/authorized_key` file.
	Sshkeys *string `json:"sshkeys,omitempty"`

	// A time since the UNIX epoch before which the record should be considered
	// invalid for the purpose of logging in.
	Notbefore *int `json:"notbefore,omitempty"`

	// A time since the UNIX epoch after which the record should be considered
	// invalid for the purpose of logging in.
	Notafter *int `json:"notafter,omitempty"`
}

// Wrap the `HomectlParameters into an `rpc.RPCCall`.
func (p *HomectlParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: HomectlName,
			Args: args,
		},
	}, nil
}

// Return values for the `homectl` Ansible module.
type HomectlReturn struct {
	AnsibleCommonReturns

	// Dictionary returned from `homectl inspect -j`.
	Data *map[string]any `json:"data,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `HomectlReturn`
func HomectlReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (HomectlReturn, error) {
	return rpc.AnyToJSONT[HomectlReturn](r.Result.Result)
}
