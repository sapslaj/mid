// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manage binary packages for FreeBSD using `pkgng` which is available in
// versions after 9.0.
const PkgngName = "pkgng"

// State of the package.
type PkgngState string

const (
	PkgngStatePresent PkgngState = "present"
	PkgngStateLatest  PkgngState = "latest"
	PkgngStateAbsent  PkgngState = "absent"
)

// Convert a supported type to an optional (pointer) PkgngState
func OptionalPkgngState[T interface {
	*PkgngState | PkgngState | *string | string
}](s T) *PkgngState {
	switch v := any(s).(type) {
	case *PkgngState:
		return v
	case PkgngState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := PkgngState(*v)
		return &val
	case string:
		val := PkgngState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `pkgng` Ansible module.
type PkgngParameters struct {
	// Name or list of names of packages to install/remove.
	// With `name=*`, `state=latest` will operate, but `state=present` and
	// `state=absent` will be noops.
	Name []string `json:"name"`

	// State of the package.
	// default: PkgngStatePresent
	State *PkgngState `json:"state,omitempty"`

	// Use local package base instead of fetching an updated one.
	// default: false
	Cached *bool `json:"cached,omitempty"`

	// A list of keyvalue-pairs of the form `<+/-/:><key>[=<value>]`. A `+` denotes
	// adding an annotation, a `-` denotes removing an annotation, and `:` denotes
	// modifying an annotation. If setting or modifying annotations, a value must
	// be provided.
	Annotation *[]string `json:"annotation,omitempty"`

	// For `pkgng` versions before 1.1.4, specify `packagesite` to use for
	// downloading packages. If not specified, use settings from
	// `/usr/local/etc/pkg.conf`.
	// For newer `pkgng` versions, specify a the name of a repository configured in
	// `/usr/local/etc/pkg/repos`.
	Pkgsite *string `json:"pkgsite,omitempty"`

	// For `pkgng` versions 1.5 and later, pkg will install all packages within the
	// specified root directory.
	// Can not be used together with `chroot` or `jail` options.
	Rootdir *string `json:"rootdir,omitempty"`

	// Pkg will chroot in the specified environment.
	// Can not be used together with `rootdir` or `jail` options.
	Chroot *string `json:"chroot,omitempty"`

	// Pkg will execute in the given jail name or ID.
	// Can not be used together with `chroot` or `rootdir` options.
	Jail *string `json:"jail,omitempty"`

	// Remove automatically installed packages which are no longer needed.
	// default: false
	Autoremove *bool `json:"autoremove,omitempty"`

	// Ignore FreeBSD OS version check, useful on `-STABLE` and `-CURRENT`
	// branches.
	// Defines the `IGNORE_OSVERSION` environment variable.
	// default: false
	IgnoreOsver *bool `json:"ignore_osver,omitempty"`

	// Treat the package names as shell glob patterns.
	// default: true
	UseGlobs *bool `json:"use_globs,omitempty"`
}

// Wrap the `PkgngParameters into an `rpc.RPCCall`.
func (p PkgngParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PkgngName,
			Args: args,
		},
	}, nil
}

// Return values for the `pkgng` Ansible module.
type PkgngReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `PkgngReturn`
func PkgngReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PkgngReturn, error) {
	return cast.AnyToJSONT[PkgngReturn](r.Result.Result)
}
