// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Use this module to schedule a command or script file to run once in the
// future.
// All jobs are executed in the 'a' queue.
const AtName = "at"

// The type of units in the future to execute the command or script file.
type AtUnits string

const (
	AtUnitsMinutes AtUnits = "minutes"
	AtUnitsHours   AtUnits = "hours"
	AtUnitsDays    AtUnits = "days"
	AtUnitsWeeks   AtUnits = "weeks"
)

// Convert a supported type to an optional (pointer) AtUnits
func OptionalAtUnits[T interface {
	*AtUnits | AtUnits | *string | string
}](s T) *AtUnits {
	switch v := any(s).(type) {
	case *AtUnits:
		return v
	case AtUnits:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AtUnits(*v)
		return &val
	case string:
		val := AtUnits(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The state dictates if the command or script file should be evaluated as
// `present` (added) or `absent` (deleted).
type AtState string

const (
	AtStateAbsent  AtState = "absent"
	AtStatePresent AtState = "present"
)

// Convert a supported type to an optional (pointer) AtState
func OptionalAtState[T interface {
	*AtState | AtState | *string | string
}](s T) *AtState {
	switch v := any(s).(type) {
	case *AtState:
		return v
	case AtState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AtState(*v)
		return &val
	case string:
		val := AtState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `at` Ansible module.
type AtParameters struct {
	// A command to be executed in the future.
	Command *string `json:"command,omitempty"`

	// An existing script file to be executed in the future.
	ScriptFile *string `json:"script_file,omitempty"`

	// The count of units in the future to execute the command or script file.
	Count *int `json:"count,omitempty"`

	// The type of units in the future to execute the command or script file.
	Units *AtUnits `json:"units,omitempty"`

	// The state dictates if the command or script file should be evaluated as
	// `present` (added) or `absent` (deleted).
	// default: AtStatePresent
	State *AtState `json:"state,omitempty"`

	// If a matching job is present a new job will not be added.
	// default: false
	Unique *bool `json:"unique,omitempty"`
}

// Wrap the `AtParameters into an `rpc.RPCCall`.
func (p AtParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AtName,
			Args: args,
		},
	}, nil
}

// Return values for the `at` Ansible module.
type AtReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `AtReturn`
func AtReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AtReturn, error) {
	return rpc.AnyToJSONT[AtReturn](r.Result.Result)
}
