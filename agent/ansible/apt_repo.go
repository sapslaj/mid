// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages APT repositories using `apt-repo` tool.
// See `https://www.altlinux.org/Apt-repo` for details about `apt-repo`.
const AptRepoName = "apt_repo"

// Indicates the desired repository state.
type AptRepoState string

const (
	AptRepoStateAbsent  AptRepoState = "absent"
	AptRepoStatePresent AptRepoState = "present"
)

func OptionalAptRepoState[T interface {
	*AptRepoState | AptRepoState | *string | string
}](s T) *AptRepoState {
	switch v := any(s).(type) {
	case *AptRepoState:
		return v
	case AptRepoState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AptRepoState(*v)
		return &val
	case string:
		val := AptRepoState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `apt_repo` Ansible module.
type AptRepoParameters struct {
	// Name of the repository to add or remove.
	Repo string `json:"repo"`

	// Indicates the desired repository state.
	// default: AptRepoStatePresent
	State *AptRepoState `json:"state,omitempty"`

	// Remove other then added repositories.
	// Used if `state=present`.
	// default: false
	RemoveOthers *bool `json:"remove_others,omitempty"`

	// Update the package database after changing repositories.
	// default: false
	Update *bool `json:"update,omitempty"`
}

// Wrap the `AptRepoParameters into an `rpc.RPCCall`.
func (p *AptRepoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AptRepoName,
			Args: args,
		},
	}, nil
}

// Return values for the `apt_repo` Ansible module.
type AptRepoReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `AptRepoReturn`
func AptRepoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AptRepoReturn, error) {
	return rpc.AnyToJSONT[AptRepoReturn](r.Result.Result)
}
