// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mid.Resource
{
    [MidResourceType("mid:resource:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        [Output("arguments")]
        public Output<string?> Arguments { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("pattern")]
        public Output<string?> Pattern { get; private set; } = null!;

        [Output("runlevel")]
        public Output<string?> Runlevel { get; private set; } = null!;

        [Output("sleep")]
        public Output<int?> Sleep { get; private set; } = null!;

        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        [Output("triggers")]
        public Output<Pulumi.Mid.Types.Outputs.TriggersOutput> Triggers { get; private set; } = null!;

        [Output("use")]
        public Output<string?> Use { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs? args = null, CustomResourceOptions? options = null)
            : base("mid:resource:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("mid:resource:Service", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Service(name, id, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("arguments")]
        public Input<string>? Arguments { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        [Input("runlevel")]
        public Input<string>? Runlevel { get; set; }

        [Input("sleep")]
        public Input<int>? Sleep { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("triggers")]
        public Input<Pulumi.Mid.Types.Inputs.TriggersInputArgs>? Triggers { get; set; }

        [Input("use")]
        public Input<string>? Use { get; set; }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }
}
