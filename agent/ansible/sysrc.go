// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages `/etc/rc.conf` for FreeBSD.
const SysrcName = "sysrc"

// Use `present` to add the variable.
// Use `absent` to remove the variable.
// Use `value_present` to add the value to the existing variable.
// Use `value_absent` to remove the value from the existing variable.
type SysrcState string

const (
	SysrcStateAbsent       SysrcState = "absent"
	SysrcStatePresent      SysrcState = "present"
	SysrcStateValuePresent SysrcState = "value_present"
	SysrcStateValueAbsent  SysrcState = "value_absent"
)

func OptionalSysrcState[T interface {
	*SysrcState | SysrcState | *string | string
}](s T) *SysrcState {
	switch v := any(s).(type) {
	case *SysrcState:
		return v
	case SysrcState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SysrcState(*v)
		return &val
	case string:
		val := SysrcState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `sysrc` Ansible module.
type SysrcParameters struct {
	// Name of variable in `/etc/rc.conf` to manage.
	Name string `json:"name"`

	// The value to set when `state=present`.
	// The value to add when `state=value_present`.
	// The value to remove when `state=value_absent`.
	Value *string `json:"value,omitempty"`

	// Use `present` to add the variable.
	// Use `absent` to remove the variable.
	// Use `value_present` to add the value to the existing variable.
	// Use `value_absent` to remove the value from the existing variable.
	// default: SysrcStatePresent
	State *SysrcState `json:"state,omitempty"`

	// Path to file to use instead of `/etc/rc.conf`.
	// default: "/etc/rc.conf"
	Path *string `json:"path,omitempty"`

	// Delimiter to be used instead of `" "` (space).
	// Only used when `state=value_present` or `state=value_absent`.
	// default: " "
	Delim *string `json:"delim,omitempty"`

	// Name or ID of the jail to operate on.
	Jail *string `json:"jail,omitempty"`
}

// Wrap the `SysrcParameters into an `rpc.RPCCall`.
func (p *SysrcParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SysrcName,
			Args: args,
		},
	}, nil
}

// Return values for the `sysrc` Ansible module.
type SysrcReturn struct {
	AnsibleCommonReturns

	// Return changed for sysrc actions.
	Changed *bool `json:"changed,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SysrcReturn`
func SysrcReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SysrcReturn, error) {
	return rpc.AnyToJSONT[SysrcReturn](r.Result.Result)
}
