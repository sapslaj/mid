// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Adds or removes SSH authorized keys for particular user accounts.
const AuthorizedKeyName = "authorized_key"

// Whether the given key (with the given key_options) should or should not be in
// the file.
type AuthorizedKeyState string

const (
	AuthorizedKeyStateAbsent  AuthorizedKeyState = "absent"
	AuthorizedKeyStatePresent AuthorizedKeyState = "present"
)

// Convert a supported type to an optional (pointer) AuthorizedKeyState
func OptionalAuthorizedKeyState[T interface {
	*AuthorizedKeyState | AuthorizedKeyState | *string | string
}](s T) *AuthorizedKeyState {
	switch v := any(s).(type) {
	case *AuthorizedKeyState:
		return v
	case AuthorizedKeyState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AuthorizedKeyState(*v)
		return &val
	case string:
		val := AuthorizedKeyState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `authorized_key` Ansible module.
type AuthorizedKeyParameters struct {
	// The username on the remote host whose authorized_keys file will be modified.
	User string `json:"user"`

	// The SSH public key(s), as a string or (since Ansible 1.9) url
	// (https://github.com/username.keys).
	// You can also use `file://` prefix to search remote for a file with SSH
	// key(s).
	Key string `json:"key"`

	// Alternative path to the authorized_keys file.
	// The default value is the `.ssh/authorized_keys` of the home of the user
	// specified in the `user` parameter.
	// Most of the time, it is not necessary to set this key.
	// Use the path to your target authorized_keys if you need to explicitly point
	// on it.
	Path *string `json:"path,omitempty"`

	// Whether this module should manage the directory of the authorized key file.
	// If set to `true`, the module will create the directory, as well as set the
	// owner and permissions of an existing directory.
	// Be sure to set `manage_dir=false` if you are using an alternate directory
	// for authorized_keys, as set with `path`, since you could lock yourself out
	// of SSH access.
	// See the example below.
	// default: true
	ManageDir *bool `json:"manage_dir,omitempty"`

	// Whether the given key (with the given key_options) should or should not be
	// in the file.
	// default: AuthorizedKeyStatePresent
	State *AuthorizedKeyState `json:"state,omitempty"`

	// A string of ssh key options to be prepended to the key in the
	// authorized_keys file.
	KeyOptions *string `json:"key_options,omitempty"`

	// Whether to remove all other non-specified keys from the authorized_keys
	// file.
	// Multiple keys can be specified in a single `key` string value by separating
	// them by newlines.
	// This option is not loop aware, so if you use `with_` , it will be exclusive
	// per iteration of the loop.
	// If you want multiple keys in the file you need to pass them all to `key` in
	// a single batch as mentioned above.
	// default: false
	Exclusive *bool `json:"exclusive,omitempty"`

	// This only applies if using a https url as the source of the keys.
	// If set to `false`, the SSL certificates will not be validated.
	// This should only set to `false` used on personally controlled sites using
	// self-signed certificates as it avoids verifying the source site.
	// Prior to 2.1 the code worked as if this was set to `true`.
	// default: true
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Change the comment on the public key.
	// Rewriting the comment is useful in cases such as fetching it from GitHub or
	// GitLab.
	// If no comment is specified, the existing comment will be kept.
	Comment *string `json:"comment,omitempty"`

	// Follow path symlink instead of replacing it.
	// default: false
	Follow *bool `json:"follow,omitempty"`
}

// Wrap the `AuthorizedKeyParameters into an `rpc.RPCCall`.
func (p AuthorizedKeyParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AuthorizedKeyName,
			Args: args,
		},
	}, nil
}

// Return values for the `authorized_key` Ansible module.
type AuthorizedKeyReturn struct {
	AnsibleCommonReturns

	// If the key has been forced to be exclusive or not.
	Exclusive *bool `json:"exclusive,omitempty"`

	// The key that the module was running against.
	Key *string `json:"key,omitempty"`

	// Key options related to the key.
	KeyOption *string `json:"key_option,omitempty"`

	// Path for authorized key file.
	Keyfile *string `json:"keyfile,omitempty"`

	// Whether this module managed the directory of the authorized key file.
	ManageDir *bool `json:"manage_dir,omitempty"`

	// Alternate path to the authorized_keys file
	Path *string `json:"path,omitempty"`

	// Whether the given key (with the given key_options) should or should not be
	// in the file
	State *string `json:"state,omitempty"`

	// Whether the key is unique
	Unique *bool `json:"unique,omitempty"`

	// The username on the remote host whose authorized_keys file will be modified
	User *string `json:"user,omitempty"`

	// This only applies if using a https url as the source of the keys. If set to
	// `false`, the SSL certificates will not be validated.
	ValidateCerts *bool `json:"validate_certs,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `AuthorizedKeyReturn`
func AuthorizedKeyReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AuthorizedKeyReturn, error) {
	return cast.AnyToJSONT[AuthorizedKeyReturn](r.Result.Result)
}
