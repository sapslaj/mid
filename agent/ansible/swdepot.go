// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Will install, upgrade and remove packages with swdepot package manager (HP-
// UX).
const SwdepotName = "swdepot"

// Whether to install (`present`, `latest`), or remove (`absent`) a package.
type SwdepotState string

const (
	SwdepotStatePresent SwdepotState = "present"
	SwdepotStateLatest  SwdepotState = "latest"
	SwdepotStateAbsent  SwdepotState = "absent"
)

// Parameters for the `swdepot` Ansible module.
type SwdepotParameters struct {
	// Package name.
	Name string `json:"name"`

	// Whether to install (`present`, `latest`), or remove (`absent`) a package.
	State SwdepotState `json:"state"`

	// The source repository from which install or upgrade a package.
	Depot *string `json:"depot,omitempty"`
}

// Wrap the `SwdepotParameters into an `rpc.RPCCall`.
func (p SwdepotParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SwdepotName,
			Args: args,
		},
	}, nil
}

// Return values for the `swdepot` Ansible module.
type SwdepotReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SwdepotReturn`
func SwdepotReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SwdepotReturn, error) {
	return cast.AnyToJSONT[SwdepotReturn](r.Result.Result)
}
