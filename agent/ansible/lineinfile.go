// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const LineinfileName = "lineinfile"

//go:embed lineinfile.zip
var LineinfileZipfile []byte

type LineinfileParameters struct {
	Path         string  `json:"path"`
	Regexp       *string `json:"regexp,omitempty"`
	SearchString *string `json:"search_string,omitempty"`
	State        *string `json:"state,omitempty"`
	Line         *string `json:"line,omitempty"`
	Backrefs     *bool   `json:"backrefs,omitempty"`
	Insertafter  *string `json:"insertafter,omitempty"`
	Insertbefore *string `json:"insertbefore,omitempty"`
	Create       *bool   `json:"create,omitempty"`
	Backup       *bool   `json:"backup,omitempty"`
	Firstmatch   *bool   `json:"firstmatch,omitempty"`
}

func (p *LineinfileParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  LineinfileZipfile,
			Name: LineinfileName,
			Args: args,
		},
	}, nil
}

type LineinfileReturn struct {
	AnsibleCommonReturns
}

func LineinfileReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (LineinfileReturn, error) {
	return rpc.AnyToJSONT[LineinfileReturn](r.Result.Result)
}
