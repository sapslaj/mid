// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module gathers info about systemd units (services, targets, sockets,
// mounts, timers).
// Timer units are supported since community.general 10.5.0.
// It runs `systemctl list-units` (or processes selected units) and collects
// properties for each unit using `systemctl show`.
// In case a unit has multiple properties with the same name, only the value of
// the first one will be collected.
// Even if a unit has a R`units.loadstate` of `not-found` or `masked`, it is
// returned, but only with the minimal properties (R`units.name`,
// R`units.loadstate`, R`units.activestate`, R`units.substate`).
// When `unitname` and `extra_properties` are used, the module first checks if
// the unit exists, then check if properties exist. If not, the module fails.
// When `unitname` is used with wildcard expressions, the module checks for
// units that match the indicated expressions, if units are not present for all
// the indicated expressions, the module fails.
const SystemdInfoName = "systemd_info"

// Parameters for the `systemd_info` Ansible module.
type SystemdInfoParameters struct {
	// List of unit names to process.
	// It supports `.service`, `.target`, `.socket`, `.mount` and `.timer` units
	// type.
	// `.timer` units are supported since community.general 10.5.0.
	// Each name must correspond to the full name of the `systemd` unit or to a
	// wildcard expression like `'ssh*'` and `'*.service'`.
	// Wildcard expressions in `unitname` are supported since community.general
	// 10.5.0.
	// default: []
	Unitname *[]string `json:"unitname,omitempty"`

	// Additional properties to retrieve (appended to the default ones).
	// Note that all property names are converted to lower-case.
	// default: []
	ExtraProperties *[]string `json:"extra_properties,omitempty"`
}

// Wrap the `SystemdInfoParameters into an `rpc.RPCCall`.
func (p SystemdInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SystemdInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `systemd_info` Ansible module.
type SystemdInfoReturn struct {
	AnsibleCommonReturns

	// Dictionary of systemd unit info keyed by unit name.
	// Additional fields will be returned depending on the value of
	// `extra_properties`.
	Units *map[string]any `json:"units,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SystemdInfoReturn`
func SystemdInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SystemdInfoReturn, error) {
	return cast.AnyToJSONT[SystemdInfoReturn](r.Result.Result)
}
