// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module creates, removes or resizes volume groups.
const LvgName = "lvg"

// Control if the volume group exists and its state.
// The states `active` and `inactive` implies `present` state. Added in 7.1.0.
// If `active` or `inactive`, the module manages the VG's logical volumes
// current state. The module also handles the VG's autoactivation state if
// supported unless when creating a volume group and the autoactivation option
// specified in `vg_options`.
type LvgState string

const (
	LvgStateAbsent   LvgState = "absent"
	LvgStatePresent  LvgState = "present"
	LvgStateActive   LvgState = "active"
	LvgStateInactive LvgState = "inactive"
)

// Convert a supported type to an optional (pointer) LvgState
func OptionalLvgState[T interface {
	*LvgState | LvgState | *string | string
}](s T) *LvgState {
	switch v := any(s).(type) {
	case *LvgState:
		return v
	case LvgState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := LvgState(*v)
		return &val
	case string:
		val := LvgState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `lvg` Ansible module.
type LvgParameters struct {
	// The name of the volume group.
	Vg string `json:"vg"`

	// List of comma-separated devices to use as physical devices in this volume
	// group.
	// Required when creating or resizing volume group.
	// The module will take care of running pvcreate if needed.
	// `remove_extra_pvs` controls whether or not unspecified physical devices are
	// removed from the volume group.
	Pvs *[]string `json:"pvs,omitempty"`

	// The size of the physical extent. `pesize` must be a power of 2 of at least 1
	// sector (where the sector size is the largest sector size of the PVs
	// currently used in the VG), or at least 128KiB.
	// `pesize` can be optionally suffixed by a UNIT (k/K/m/M/g/G), default unit is
	// megabyte.
	// default: "4"
	Pesize *string `json:"pesize,omitempty"`

	// Additional options to pass to `pvcreate` when creating the volume group.
	// default: ""
	PvOptions *string `json:"pv_options,omitempty"`

	// If `true`, resize the physical volume to the maximum available size.
	// default: false
	Pvresize *bool `json:"pvresize,omitempty"`

	// Additional options to pass to `vgcreate` when creating the volume group.
	// default: ""
	VgOptions *string `json:"vg_options,omitempty"`

	// Control if the volume group exists and its state.
	// The states `active` and `inactive` implies `present` state. Added in 7.1.0.
	// If `active` or `inactive`, the module manages the VG's logical volumes
	// current state. The module also handles the VG's autoactivation state if
	// supported unless when creating a volume group and the autoactivation option
	// specified in `vg_options`.
	// default: LvgStatePresent
	State *LvgState `json:"state,omitempty"`

	// If `true`, allows to remove volume group with logical volumes.
	// default: false
	Force *bool `json:"force,omitempty"`

	// Whether the volume group's UUID is regenerated.
	// This is `not idempotent`. Specifying this parameter always results in a
	// change.
	// default: false
	ResetVgUuid *bool `json:"reset_vg_uuid,omitempty"`

	// Whether the volume group's physical volumes' UUIDs are regenerated.
	// This is `not idempotent`. Specifying this parameter always results in a
	// change.
	// default: false
	ResetPvUuid *bool `json:"reset_pv_uuid,omitempty"`

	// Remove physical volumes from the volume group which are not in `pvs`.
	// default: true
	RemoveExtraPvs *bool `json:"remove_extra_pvs,omitempty"`
}

// Wrap the `LvgParameters into an `rpc.RPCCall`.
func (p LvgParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: LvgName,
			Args: args,
		},
	}, nil
}

// Return values for the `lvg` Ansible module.
type LvgReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `LvgReturn`
func LvgReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (LvgReturn, error) {
	return cast.AnyToJSONT[LvgReturn](r.Result.Result)
}
