// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manage OpenBSD system patches using syspatch.
const SyspatchName = "syspatch"

// Revert system patches.
type SyspatchRevert string

const (
	SyspatchRevertAll SyspatchRevert = "all"
	SyspatchRevertOne SyspatchRevert = "one"
)

// Convert a supported type to an optional (pointer) SyspatchRevert
func OptionalSyspatchRevert[T interface {
	*SyspatchRevert | SyspatchRevert | *string | string
}](s T) *SyspatchRevert {
	switch v := any(s).(type) {
	case *SyspatchRevert:
		return v
	case SyspatchRevert:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SyspatchRevert(*v)
		return &val
	case string:
		val := SyspatchRevert(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `syspatch` Ansible module.
type SyspatchParameters struct {
	// Revert system patches.
	Revert *SyspatchRevert `json:"revert,omitempty"`
}

// Wrap the `SyspatchParameters into an `rpc.RPCCall`.
func (p SyspatchParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SyspatchName,
			Args: args,
		},
	}, nil
}

// Return values for the `syspatch` Ansible module.
type SyspatchReturn struct {
	AnsibleCommonReturns

	// The command return code (0 means success).
	Rc *int `json:"rc,omitempty"`

	// `syspatch` standard output.
	Stdout *string `json:"stdout,omitempty"`

	// `syspatch` standard error.
	Stderr *string `json:"stderr,omitempty"`

	// Whether or not a reboot is required after an update.
	RebootNeeded *bool `json:"reboot_needed,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SyspatchReturn`
func SyspatchReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SyspatchReturn, error) {
	return cast.AnyToJSONT[SyspatchReturn](r.Result.Result)
}
