// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages updates and bundles with the swupd bundle manager, which is used by
// the Clear Linux Project for Intel Architecture.
const SwupdName = "swupd"

// Indicates the desired (I)bundle state. `present` ensures the bundle is
// installed while `absent` ensures the (I)bundle is not installed.
type SwupdState string

const (
	SwupdStatePresent SwupdState = "present"
	SwupdStateAbsent  SwupdState = "absent"
)

func OptionalSwupdState[T interface {
	*SwupdState | SwupdState | *string | string
}](s T) *SwupdState {
	switch v := any(s).(type) {
	case *SwupdState:
		return v
	case SwupdState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SwupdState(*v)
		return &val
	case string:
		val := SwupdState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `swupd` Ansible module.
type SwupdParameters struct {
	// URL pointing to the contents of available bundles. If not specified, the
	// contents are retrieved from clearlinux.org.
	Contenturl *string `json:"contenturl,omitempty"`

	// The format suffix for version file downloads. For example `1`, `2`, `3`, and
	// so on, or the special value `staging`. If not specified, the default format
	// is used.
	Format *string `json:"format,omitempty"`

	// The manifest contains information about the bundles at certain version of
	// the OS. Specify a Manifest version to verify against that version or leave
	// unspecified to verify against the current version.
	Manifest *int `json:"manifest,omitempty"`

	// Name of the (I)bundle to install or remove.
	Name *string `json:"name,omitempty"`

	// Indicates the desired (I)bundle state. `present` ensures the bundle is
	// installed while `absent` ensures the (I)bundle is not installed.
	// default: SwupdStatePresent
	State *SwupdState `json:"state,omitempty"`

	// Updates the OS to the latest version.
	// default: false
	Update *bool `json:"update,omitempty"`

	// Overrides both `contenturl` and `versionurl`.
	Url *string `json:"url,omitempty"`

	// Verify content for OS version.
	// default: false
	Verify *bool `json:"verify,omitempty"`

	// URL for version string download.
	Versionurl *string `json:"versionurl,omitempty"`
}

// Wrap the `SwupdParameters into an `rpc.RPCCall`.
func (p *SwupdParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SwupdName,
			Args: args,
		},
	}, nil
}

// Return values for the `swupd` Ansible module.
type SwupdReturn struct {
	AnsibleCommonReturns

	// `stdout` of `swupd`.
	Stdout *string `json:"stdout,omitempty"`

	// `stderr` of `swupd`.
	Stderr *string `json:"stderr,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SwupdReturn`
func SwupdReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SwupdReturn, error) {
	return rpc.AnyToJSONT[SwupdReturn](r.Result.Result)
}
