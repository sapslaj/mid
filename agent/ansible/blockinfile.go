// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const BlockinfileName = "blockinfile"

//go:embed blockinfile.zip
var BlockinfileZipfile []byte

type BlockinfileParameters struct {
	Path           string  `json:"path"`
	State          *string `json:"state,omitempty"`
	Marker         *string `json:"marker,omitempty"`
	Block          *string `json:"block,omitempty"`
	Insertafter    *string `json:"insertafter,omitempty"`
	Insertbefore   *string `json:"insertbefore,omitempty"`
	Create         *bool   `json:"create,omitempty"`
	Backup         *bool   `json:"backup,omitempty"`
	MarkerBegin    *string `json:"marker_begin,omitempty"`
	MarkerEnd      *string `json:"marker_end,omitempty"`
	AppendNewline  *bool   `json:"append_newline,omitempty"`
	PrependNewline *bool   `json:"prepend_newline,omitempty"`
}

func (p *BlockinfileParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  BlockinfileZipfile,
			Name: BlockinfileName,
			Args: args,
		},
	}, nil
}

type BlockinfileReturn struct {
	AnsibleCommonReturns
}

func BlockinfileReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (BlockinfileReturn, error) {
	return rpc.AnyToJSONT[BlockinfileReturn](r.Result.Result)
}
