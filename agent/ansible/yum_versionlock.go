// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module adds installed packages to yum versionlock to prevent the
// package(s) from being updated.
const YumVersionlockName = "yum_versionlock"

// If state is `present`, package(s) is/are added to yum versionlock list.
// If state is `absent`, package(s) is/are removed from yum versionlock list.
type YumVersionlockState string

const (
	YumVersionlockStateAbsent  YumVersionlockState = "absent"
	YumVersionlockStatePresent YumVersionlockState = "present"
)

// Convert a supported type to an optional (pointer) YumVersionlockState
func OptionalYumVersionlockState[T interface {
	*YumVersionlockState | YumVersionlockState | *string | string
}](s T) *YumVersionlockState {
	switch v := any(s).(type) {
	case *YumVersionlockState:
		return v
	case YumVersionlockState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := YumVersionlockState(*v)
		return &val
	case string:
		val := YumVersionlockState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `yum_versionlock` Ansible module.
type YumVersionlockParameters struct {
	// Package name or a list of package names with optional version or wildcards.
	// Specifying versions is supported since community.general 7.2.0.
	Name []string `json:"name"`

	// If state is `present`, package(s) is/are added to yum versionlock list.
	// If state is `absent`, package(s) is/are removed from yum versionlock list.
	// default: YumVersionlockStatePresent
	State *YumVersionlockState `json:"state,omitempty"`
}

// Wrap the `YumVersionlockParameters into an `rpc.RPCCall`.
func (p YumVersionlockParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: YumVersionlockName,
			Args: args,
		},
	}, nil
}

// Return values for the `yum_versionlock` Ansible module.
type YumVersionlockReturn struct {
	AnsibleCommonReturns

	// A list of package(s) in versionlock list.
	Packages *[]string `json:"packages,omitempty"`

	// State of package(s).
	State *string `json:"state,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `YumVersionlockReturn`
func YumVersionlockReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (YumVersionlockReturn, error) {
	return cast.AnyToJSONT[YumVersionlockReturn](r.Result.Result)
}
