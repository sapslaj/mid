// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages ZFS file systems, volumes, clones and snapshots.
const ZfsName = "zfs"

// Whether to create (`present`), or remove (`absent`) a file system, snapshot
// or volume. All parents/children are created/destroyed as needed to reach the
// desired state.
type ZfsState string

const (
	ZfsStateAbsent  ZfsState = "absent"
	ZfsStatePresent ZfsState = "present"
)

// Parameters for the `zfs` Ansible module.
type ZfsParameters struct {
	// File system, snapshot or volume name, for example `rpool/myfs`.
	Name string `json:"name"`

	// Whether to create (`present`), or remove (`absent`) a file system, snapshot
	// or volume. All parents/children are created/destroyed as needed to reach the
	// desired state.
	State ZfsState `json:"state"`

	// Snapshot from which to create a clone.
	Origin *string `json:"origin,omitempty"`

	// A dictionary of zfs properties to be set.
	// See the zfs(8) man page for more information.
	// default: {}
	ExtraZfsProperties *map[string]any `json:"extra_zfs_properties,omitempty"`
}

// Wrap the `ZfsParameters into an `rpc.RPCCall`.
func (p *ZfsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: ZfsName,
			Args: args,
		},
	}, nil
}

// Return values for the `zfs` Ansible module.
type ZfsReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `ZfsReturn`
func ZfsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (ZfsReturn, error) {
	return rpc.AnyToJSONT[ZfsReturn](r.Result.Result)
}
