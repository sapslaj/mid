# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    "AnsibleTaskListArgsTask",
    "AnsibleTaskListArgsTasks",
    "AnsibleTaskListStateResults",
    "AnsibleTaskListStateTaskResult",
]


@pulumi.output_type
class AnsibleTaskListArgsTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreErrors":
            suggest = "ignore_errors"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in AnsibleTaskListArgsTask. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        AnsibleTaskListArgsTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        AnsibleTaskListArgsTask.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        args: Mapping[str, Any],
        module: _builtins.str,
        check: Optional[_builtins.bool] = None,
        environment: Optional[Mapping[str, _builtins.str]] = None,
        ignore_errors: Optional[_builtins.bool] = None,
    ):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "module", module)
        if check is not None:
            pulumi.set(__self__, "check", check)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if ignore_errors is not None:
            pulumi.set(__self__, "ignore_errors", ignore_errors)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Mapping[str, Any]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter
    def module(self) -> _builtins.str:
        return pulumi.get(self, "module")

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "check")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter(name="ignoreErrors")
    def ignore_errors(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ignore_errors")


@pulumi.output_type
class AnsibleTaskListArgsTasks(dict):
    def __init__(
        __self__,
        *,
        create: Sequence["outputs.AnsibleTaskListArgsTask"],
        delete: Optional[Sequence["outputs.AnsibleTaskListArgsTask"]] = None,
        update: Optional[Sequence["outputs.AnsibleTaskListArgsTask"]] = None,
    ):
        pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Sequence["outputs.AnsibleTaskListArgsTask"]:
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[Sequence["outputs.AnsibleTaskListArgsTask"]]:
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[Sequence["outputs.AnsibleTaskListArgsTask"]]:
        return pulumi.get(self, "update")


@pulumi.output_type
class AnsibleTaskListStateResults(dict):
    def __init__(
        __self__,
        *,
        lifecycle: _builtins.str,
        tasks: Sequence["outputs.AnsibleTaskListStateTaskResult"],
    ):
        pulumi.set(__self__, "lifecycle", lifecycle)
        pulumi.set(__self__, "tasks", tasks)

    @_builtins.property
    @pulumi.getter
    def lifecycle(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence["outputs.AnsibleTaskListStateTaskResult"]:
        return pulumi.get(self, "tasks")


@pulumi.output_type
class AnsibleTaskListStateTaskResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exitCode":
            suggest = "exit_code"
        elif key == "ignoreErrors":
            suggest = "ignore_errors"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in AnsibleTaskListStateTaskResult. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        AnsibleTaskListStateTaskResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        AnsibleTaskListStateTaskResult.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        args: Mapping[str, Any],
        exit_code: _builtins.int,
        module: _builtins.str,
        result: Mapping[str, Any],
        stderr: _builtins.str,
        stdout: _builtins.str,
        success: _builtins.bool,
        check: Optional[_builtins.bool] = None,
        environment: Optional[Mapping[str, _builtins.str]] = None,
        ignore_errors: Optional[_builtins.bool] = None,
    ):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "exit_code", exit_code)
        pulumi.set(__self__, "module", module)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "stderr", stderr)
        pulumi.set(__self__, "stdout", stdout)
        pulumi.set(__self__, "success", success)
        if check is not None:
            pulumi.set(__self__, "check", check)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if ignore_errors is not None:
            pulumi.set(__self__, "ignore_errors", ignore_errors)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Mapping[str, Any]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> _builtins.int:
        return pulumi.get(self, "exit_code")

    @_builtins.property
    @pulumi.getter
    def module(self) -> _builtins.str:
        return pulumi.get(self, "module")

    @_builtins.property
    @pulumi.getter
    def result(self) -> Mapping[str, Any]:
        return pulumi.get(self, "result")

    @_builtins.property
    @pulumi.getter
    def stderr(self) -> _builtins.str:
        return pulumi.get(self, "stderr")

    @_builtins.property
    @pulumi.getter
    def stdout(self) -> _builtins.str:
        return pulumi.get(self, "stdout")

    @_builtins.property
    @pulumi.getter
    def success(self) -> _builtins.bool:
        return pulumi.get(self, "success")

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "check")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter(name="ignoreErrors")
    def ignore_errors(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ignore_errors")
