// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const SystemdServiceName = "systemd_service"

//go:embed systemd_service.zip
var SystemdServiceZipfile []byte

type SystemdServiceParameters struct {
	Name         *string `json:"name,omitempty"`
	State        *string `json:"state,omitempty"`
	Enabled      *bool   `json:"enabled,omitempty"`
	Force        *bool   `json:"force,omitempty"`
	Masked       *bool   `json:"masked,omitempty"`
	DaemonReload *bool   `json:"daemon_reload,omitempty"`
	DaemonReexec *bool   `json:"daemon_reexec,omitempty"`
	Scope        *string `json:"scope,omitempty"`
	NoBlock      *bool   `json:"no_block,omitempty"`
}

func (p *SystemdServiceParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  SystemdServiceZipfile,
			Name: SystemdServiceName,
			Args: args,
		},
	}, nil
}

type SystemdServiceReturn struct {
	AnsibleCommonReturns
	Status *map[string]any `json:"status,omitempty"`
}

func SystemdServiceReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (SystemdServiceReturn, error) {
	return rpc.AnyToJSONT[SystemdServiceReturn](r.Result.Result)
}
