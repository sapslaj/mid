// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Add and remove a domain from the list of permissive domains.
const SelinuxPermissiveName = "selinux_permissive"

// Parameters for the `selinux_permissive` Ansible module.
type SelinuxPermissiveParameters struct {
	// The domain that will be added or removed from the list of permissive
	// domains.
	Domain string `json:"domain"`

	// Indicate if the domain should or should not be set as permissive.
	Permissive bool `json:"permissive"`

	// Disable reloading of the SELinux policy after making change to a domain's
	// permissive setting.
	// The default is `false`, which causes policy to be reloaded when a domain
	// changes state.
	// Reloading the policy does not work on older versions of the
	// `policycoreutils-python` library, for example in EL 6.".
	// default: false
	NoReload *bool `json:"no_reload,omitempty"`

	// Name of the SELinux policy store to use.
	// default: ""
	Store *string `json:"store,omitempty"`
}

// Wrap the `SelinuxPermissiveParameters into an `rpc.RPCCall`.
func (p *SelinuxPermissiveParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SelinuxPermissiveName,
			Args: args,
		},
	}, nil
}

// Return values for the `selinux_permissive` Ansible module.
type SelinuxPermissiveReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SelinuxPermissiveReturn`
func SelinuxPermissiveReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SelinuxPermissiveReturn, error) {
	return rpc.AnyToJSONT[SelinuxPermissiveReturn](r.Result.Result)
}
