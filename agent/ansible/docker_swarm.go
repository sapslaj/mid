// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Create a new Swarm cluster.
// Add/Remove nodes or managers to an existing cluster.
const DockerSwarmName = "docker_swarm"

// Set to `present`, to create/update a new cluster.
// Set to `join`, to join an existing cluster.
// Set to `absent`, to leave an existing cluster.
// Set to `remove`, to remove an absent node from the cluster. Note that
// removing requires Docker SDK for Python >= 2.4.0.
// `community.docker.docker_node` can be used to demote a manager before
// removal.
type DockerSwarmState string

const (
	DockerSwarmStatePresent DockerSwarmState = "present"
	DockerSwarmStateJoin    DockerSwarmState = "join"
	DockerSwarmStateAbsent  DockerSwarmState = "absent"
	DockerSwarmStateRemove  DockerSwarmState = "remove"
)

// Convert a supported type to an optional (pointer) DockerSwarmState
func OptionalDockerSwarmState[T interface {
	*DockerSwarmState | DockerSwarmState | *string | string
}](s T) *DockerSwarmState {
	switch v := any(s).(type) {
	case *DockerSwarmState:
		return v
	case DockerSwarmState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerSwarmState(*v)
		return &val
	case string:
		val := DockerSwarmState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_swarm` Ansible module.
type DockerSwarmParameters struct {
	// Externally reachable address advertised to other nodes.
	// This can either be an address/port combination in the form
	// `192.168.1.1:4567`, or an interface followed by a port number, like
	// `eth0:4567`.
	// If the port number is omitted, the port number from the listen address is
	// used.
	// If `advertise_addr` is not specified, it will be automatically detected when
	// possible.
	// Only used when swarm is initialised or joined. Because of this it is not
	// considered for idempotency checking.
	AdvertiseAddr *string `json:"advertise_addr,omitempty"`

	// Default address pool in CIDR format.
	// Only used when swarm is initialised. Because of this it is not considered
	// for idempotency checking.
	// Requires API version >= 1.39.
	DefaultAddrPool *[]string `json:"default_addr_pool,omitempty"`

	// Default address pool subnet mask length.
	// Only used when swarm is initialised. Because of this it is not considered
	// for idempotency checking.
	// Requires API version >= 1.39.
	SubnetSize *int `json:"subnet_size,omitempty"`

	// Listen address used for inter-manager communication.
	// This can either be an address/port combination in the form
	// `192.168.1.1:4567`, or an interface followed by a port number, like
	// `eth0:4567`.
	// If the port number is omitted, the default swarm listening port is used.
	// Only used when swarm is initialised or joined. Because of this it is not
	// considered for idempotency checking.
	// default: "0.0.0.0:2377"
	ListenAddr *string `json:"listen_addr,omitempty"`

	// Use with state `present` to force creating a new Swarm, even if already part
	// of one.
	// Use with state `absent` to Leave the swarm even if this node is a manager.
	// default: false
	Force *bool `json:"force,omitempty"`

	// Set to `present`, to create/update a new cluster.
	// Set to `join`, to join an existing cluster.
	// Set to `absent`, to leave an existing cluster.
	// Set to `remove`, to remove an absent node from the cluster. Note that
	// removing requires Docker SDK for Python >= 2.4.0.
	// `community.docker.docker_node` can be used to demote a manager before
	// removal.
	// default: DockerSwarmStatePresent
	State *DockerSwarmState `json:"state,omitempty"`

	// Swarm id of the node to remove.
	// Used with `state=remove`.
	NodeId *string `json:"node_id,omitempty"`

	// Swarm token used to join a swarm cluster.
	// Used with `state=join`.
	// If this value is specified, the corresponding value in the return values
	// will be censored by Ansible. This is a side-effect of this value not being
	// logged.
	JoinToken *string `json:"join_token,omitempty"`

	// Remote address of one or more manager nodes of an existing Swarm to connect
	// to.
	// Used with `state=join`.
	RemoteAddrs *[]string `json:"remote_addrs,omitempty"`

	// Maximum number of tasks history stored.
	// Docker default value is `5`.
	TaskHistoryRetentionLimit *int `json:"task_history_retention_limit,omitempty"`

	// Number of logs entries between snapshot.
	// Docker default value is `10000`.
	SnapshotInterval *int `json:"snapshot_interval,omitempty"`

	// Number of snapshots to keep beyond the current snapshot.
	// Docker default value is `0`.
	KeepOldSnapshots *int `json:"keep_old_snapshots,omitempty"`

	// Number of log entries to keep around to sync up slow followers after a
	// snapshot is created.
	LogEntriesForSlowFollowers *int `json:"log_entries_for_slow_followers,omitempty"`

	// Amount of ticks (in seconds) between each heartbeat.
	// Docker default value is `1` seconds.
	HeartbeatTick *int `json:"heartbeat_tick,omitempty"`

	// Amount of ticks (in seconds) needed without a leader to trigger a new
	// election.
	// Docker default value is `10` seconds.
	ElectionTick *int `json:"election_tick,omitempty"`

	// The delay (in nanoseconds) for an agent to send a heartbeat to the
	// dispatcher.
	// Docker default value is 5 seconds, which corresponds to a value of
	// `5000000000`.
	DispatcherHeartbeatPeriod *int `json:"dispatcher_heartbeat_period,omitempty"`

	// Automatic expiry for nodes certificates, given in nanoseconds.
	// Docker default value is 90 days, which corresponds to a value of
	// `7776000000000000`.
	NodeCertExpiry *int `json:"node_cert_expiry,omitempty"`

	// The name of the swarm.
	Name *string `json:"name,omitempty"`

	// User-defined key/value metadata.
	// Label operations in this module apply to the docker swarm cluster. Use
	// `community.docker.docker_node` module to add/modify/remove swarm node
	// labels.
	// Requires API version >= 1.32.
	Labels *map[string]any `json:"labels,omitempty"`

	// The desired signing CA certificate for all swarm node TLS leaf certificates,
	// in PEM format.
	// This must not be a path to a certificate, but the contents of the
	// certificate.
	// Requires API version >= 1.30.
	SigningCaCert *string `json:"signing_ca_cert,omitempty"`

	// The desired signing CA key for all swarm node TLS leaf certificates, in PEM
	// format.
	// This must not be a path to a key, but the contents of the key.
	// Requires API version >= 1.30.
	SigningCaKey *string `json:"signing_ca_key,omitempty"`

	// An integer whose purpose is to force swarm to generate a new signing CA
	// certificate and key, if none have been specified.
	// Docker default value is `0`.
	// Requires API version >= 1.30.
	CaForceRotate *int `json:"ca_force_rotate,omitempty"`

	// If set, generate a key and use it to lock data stored on the managers.
	// Docker default value is `false`.
	// `community.docker.docker_swarm_info` can be used to retrieve the unlock key.
	AutolockManagers *bool `json:"autolock_managers,omitempty"`

	// Rotate the worker join token.
	// default: false
	RotateWorkerToken *bool `json:"rotate_worker_token,omitempty"`

	// Rotate the manager join token.
	// default: false
	RotateManagerToken *bool `json:"rotate_manager_token,omitempty"`

	// Address or interface to use for data path traffic.
	// This can either be an address in the form `192.168.1.1`, or an interface,
	// like `eth0`.
	// Only used when swarm is initialised or joined. Because of this it is not
	// considered for idempotency checking.
	// Requires API version >= 1.30.
	DataPathAddr *string `json:"data_path_addr,omitempty"`

	// Port to use for data path traffic.
	// This needs to be a port number like `9789`.
	// Only used when swarm is initialised. Because of this it is not considered
	// for idempotency checking.
	// Requires API version >= 1.40.
	DataPathPort *int `json:"data_path_port,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	// `Note:` this option is no longer supported for Docker SDK for Python 7.0.0+.
	// Specifying it with Docker SDK for Python 7.0.0 or newer will lead to an
	// error.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by Docker SDK for Python
	// and the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// Requires Docker SDK for Python 4.4.0 or newer.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode.
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerSwarmParameters into an `rpc.RPCCall`.
func (p DockerSwarmParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerSwarmName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_swarm` Ansible module.
type DockerSwarmReturn struct {
	AnsibleCommonReturns

	// Information about swarm.
	SwarmFacts *map[string]any `json:"swarm_facts,omitempty"`

	// Provides the actions done on the swarm.
	Actions *[]string `json:"actions,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerSwarmReturn`
func DockerSwarmReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerSwarmReturn, error) {
	return cast.AnyToJSONT[DockerSwarmReturn](r.Result.Result)
}
