// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module allows for addition or deletion of services and ports (either TCP
// or UDP) in either running or permanent firewalld rules.
const FirewalldName = "firewalld"

// Enable or disable a setting.
// For ports: Should this port accept (`enabled`) or reject (`disabled`)
// connections.
// The states `present` and `absent` can only be used in zone level operations
// (i.e. when no other parameters but zone and state are set).
type FirewalldState string

const (
	FirewalldStateAbsent   FirewalldState = "absent"
	FirewalldStateDisabled FirewalldState = "disabled"
	FirewalldStateEnabled  FirewalldState = "enabled"
	FirewalldStatePresent  FirewalldState = "present"
)

// firewalld Zone target.
// If `state=absent`, this will reset the target to default.
type FirewalldTarget string

const (
	FirewalldTargetDefault FirewalldTarget = "default"
	FirewalldTargetAccept  FirewalldTarget = "ACCEPT"
	FirewalldTargetDrop    FirewalldTarget = "DROP"
	FirewalldTargetReject  FirewalldTarget = "%%REJECT%%"
)

// Convert a supported type to an optional (pointer) FirewalldTarget
func OptionalFirewalldTarget[T interface {
	*FirewalldTarget | FirewalldTarget | *string | string
}](s T) *FirewalldTarget {
	switch v := any(s).(type) {
	case *FirewalldTarget:
		return v
	case FirewalldTarget:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := FirewalldTarget(*v)
		return &val
	case string:
		val := FirewalldTarget(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `firewalld` Ansible module.
type FirewalldParameters struct {
	// Name of a service to add/remove to/from firewalld.
	// The service must be listed in output of `firewall-cmd --get-services`.
	Service *string `json:"service,omitempty"`

	// Name of a protocol to add/remove to/from firewalld.
	Protocol *string `json:"protocol,omitempty"`

	// Name of a port or port range to add/remove to/from firewalld.
	// Must be in the form PORT/PROTOCOL or PORT-PORT/PROTOCOL for port ranges.
	Port *string `json:"port,omitempty"`

	// Port and protocol to forward using firewalld.
	PortForward *struct {
		Port   string  `json:"port"`
		Proto  string  `json:"proto"`
		Toport string  `json:"toport"`
		Toaddr *string `json:"toaddr,omitempty"`
	} `json:"port_forward,omitempty"`

	// Rich rule to add/remove to/from firewalld.
	// See `Syntax for firewalld rich language
	// rules,https://firewalld.org/documentation/man-
	// pages/firewalld.richlanguage.html`.
	RichRule *string `json:"rich_rule,omitempty"`

	// The source/network you would like to add/remove to/from firewalld.
	Source *string `json:"source,omitempty"`

	// The interface you would like to add/remove to/from a zone in firewalld.
	Interface *string `json:"interface,omitempty"`

	// The ICMP block you would like to add/remove to/from a zone in firewalld.
	IcmpBlock *string `json:"icmp_block,omitempty"`

	// Enable/Disable inversion of ICMP blocks for a zone in firewalld.
	// Note that the option type is changed to bool in ansible.posix version 2.0.0
	// and later.
	IcmpBlockInversion *bool `json:"icmp_block_inversion,omitempty"`

	// The firewalld zone to add/remove to/from.
	// Note that the default zone can be configured per system but `public` is
	// default from upstream.
	// Available choices can be extended based on per-system configs, listed here
	// are "out of the box" defaults.
	// Possible values include `block`, `dmz`, `drop`, `external`, `home`,
	// `internal`, `public`, `trusted`, `work`.
	Zone *string `json:"zone,omitempty"`

	// Whether to apply this change to the permanent firewalld configuration.
	// As of Ansible 2.3, permanent operations can operate on firewalld configs
	// when it is not running (requires firewalld >= 0.3.9).
	// Note that if this is `false`, `immediate=true` by default.
	// default: false
	Permanent *bool `json:"permanent,omitempty"`

	// Whether to apply this change to the runtime firewalld configuration.
	// Defaults to `true` if `permanent=false`.
	// default: false
	Immediate *bool `json:"immediate,omitempty"`

	// Enable or disable a setting.
	// For ports: Should this port accept (`enabled`) or reject (`disabled`)
	// connections.
	// The states `present` and `absent` can only be used in zone level operations
	// (i.e. when no other parameters but zone and state are set).
	State FirewalldState `json:"state"`

	// The amount of time in seconds the rule should be in effect for when non-
	// permanent.
	// default: 0
	Timeout *int `json:"timeout,omitempty"`

	// The forward setting you would like to enable/disable to/from zones within
	// firewalld.
	// This option only is supported by firewalld v0.9.0 or later.
	// Note that the option type is changed to bool in ansible.posix version 2.0.0
	// and later.
	Forward *bool `json:"forward,omitempty"`

	// The masquerade setting you would like to enable/disable to/from zones within
	// firewalld.
	// Note that the option type is changed to bool in ansible.posix version 2.0.0
	// and later.
	Masquerade *bool `json:"masquerade,omitempty"`

	// Ignores `immediate` if `permanent=true` and firewalld is not running.
	// default: false
	Offline *bool `json:"offline,omitempty"`

	// firewalld Zone target.
	// If `state=absent`, this will reset the target to default.
	Target *FirewalldTarget `json:"target,omitempty"`
}

// Wrap the `FirewalldParameters into an `rpc.RPCCall`.
func (p FirewalldParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: FirewalldName,
			Args: args,
		},
	}, nil
}

// Return values for the `firewalld` Ansible module.
type FirewalldReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `FirewalldReturn`
func FirewalldReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (FirewalldReturn, error) {
	return cast.AnyToJSONT[FirewalldReturn](r.Result.Result)
}
