// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module is a wrapper for the execution of `django-admin
// createcachetable`.
const DjangoCreatecachetableName = "django_createcachetable"

// Specifies the amount of notification and debug information in the output of
// `django-admin`.
type DjangoCreatecachetableVerbosity int

const (
	DjangoCreatecachetableVerbosity0 DjangoCreatecachetableVerbosity = 0
	DjangoCreatecachetableVerbosity1 DjangoCreatecachetableVerbosity = 1
	DjangoCreatecachetableVerbosity2 DjangoCreatecachetableVerbosity = 2
	DjangoCreatecachetableVerbosity3 DjangoCreatecachetableVerbosity = 3
)

// Convert a supported type to an optional (pointer) DjangoCreatecachetableVerbosity
func OptionalDjangoCreatecachetableVerbosity[T interface {
	*DjangoCreatecachetableVerbosity | DjangoCreatecachetableVerbosity | *int | int
}](s T) *DjangoCreatecachetableVerbosity {
	switch v := any(s).(type) {
	case *DjangoCreatecachetableVerbosity:
		return v
	case DjangoCreatecachetableVerbosity:
		return &v
	case *int:
		if v == nil {
			return nil
		}
		val := DjangoCreatecachetableVerbosity(*v)
		return &val
	case int:
		val := DjangoCreatecachetableVerbosity(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `django_createcachetable` Ansible module.
type DjangoCreatecachetableParameters struct {
	// Use the the Python interpreter from this virtual environment.
	// Pass the path to the root of the virtualenv, not the `bin/` directory nor
	// the `python` executable.
	Venv *string `json:"venv,omitempty"`

	// Specifies the settings module to use.
	// The value will be passed as is to the `--settings` argument in `django-
	// admin`.
	Settings string `json:"settings"`

	// Adds the given filesystem path to the Python import search path.
	// The value will be passed as is to the `--pythonpath` argument in `django-
	// admin`.
	Pythonpath *string `json:"pythonpath,omitempty"`

	// Provides a full stack trace in the output when a `CommandError` is raised.
	Traceback *bool `json:"traceback,omitempty"`

	// Specifies the amount of notification and debug information in the output of
	// `django-admin`.
	Verbosity *DjangoCreatecachetableVerbosity `json:"verbosity,omitempty"`

	// Skips running system checks prior to running the command.
	SkipChecks *bool `json:"skip_checks,omitempty"`

	// Specify the database to be used.
	// default: "default"
	Database *string `json:"database,omitempty"`
}

// Wrap the `DjangoCreatecachetableParameters into an `rpc.RPCCall`.
func (p DjangoCreatecachetableParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DjangoCreatecachetableName,
			Args: args,
		},
	}, nil
}

// Return values for the `django_createcachetable` Ansible module.
type DjangoCreatecachetableReturn struct {
	AnsibleCommonReturns

	// Command-line execution information.
	RunInfo *map[string]any `json:"run_info,omitempty"`

	// Version of Django.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DjangoCreatecachetableReturn`
func DjangoCreatecachetableReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DjangoCreatecachetableReturn, error) {
	return cast.AnyToJSONT[DjangoCreatecachetableReturn](r.Result.Result)
}
