// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Starts gunicorn with the parameters specified. Common settings for gunicorn
// configuration are supported. For additional configuration use a config file
// See `https://gunicorn-docs.readthedocs.io/en/latest/settings.html` for more
// options. It's recommended to always use the chdir option to avoid problems
// with the location of the app.
const GunicornName = "gunicorn"

// The type of workers to use. The default class (sync) should handle most
// "normal" types of workloads.
type GunicornWorker string

const (
	GunicornWorkerSync     GunicornWorker = "sync"
	GunicornWorkerEventlet GunicornWorker = "eventlet"
	GunicornWorkerGevent   GunicornWorker = "gevent"
	GunicornWorkerTornado  GunicornWorker = "tornado "
	GunicornWorkerGthread  GunicornWorker = "gthread"
	GunicornWorkerGaiohttp GunicornWorker = "gaiohttp"
)

func OptionalGunicornWorker[T interface {
	*GunicornWorker | GunicornWorker | *string | string
}](s T) *GunicornWorker {
	switch v := any(s).(type) {
	case *GunicornWorker:
		return v
	case GunicornWorker:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := GunicornWorker(*v)
		return &val
	case string:
		val := GunicornWorker(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `gunicorn` Ansible module.
type GunicornParameters struct {
	// The app module. A name refers to a WSGI callable that should be found in the
	// specified module.
	App string `json:"app"`

	// Path to the virtualenv directory.
	Venv *string `json:"venv,omitempty"`

	// Path to the gunicorn configuration file.
	Config *string `json:"config,omitempty"`

	// Chdir to specified directory before apps loading.
	Chdir *string `json:"chdir,omitempty"`

	// A filename to use for the PID file. If not set and not found on the
	// configuration file a tmp pid file will be created to check a successful run
	// of gunicorn.
	Pid *string `json:"pid,omitempty"`

	// The type of workers to use. The default class (sync) should handle most
	// "normal" types of workloads.
	Worker *GunicornWorker `json:"worker,omitempty"`

	// Switch worker processes to run as this user.
	User *string `json:"user,omitempty"`
}

// Wrap the `GunicornParameters into an `rpc.RPCCall`.
func (p *GunicornParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: GunicornName,
			Args: args,
		},
	}, nil
}

// Return values for the `gunicorn` Ansible module.
type GunicornReturn struct {
	AnsibleCommonReturns

	// Process ID of gunicorn.
	Gunicorn *string `json:"gunicorn,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `GunicornReturn`
func GunicornReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (GunicornReturn, error) {
	return rpc.AnyToJSONT[GunicornReturn](r.Result.Result)
}
