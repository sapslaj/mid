// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages "spells" on Source Mage GNU/Linux using `sorcery` toolchain.
const SorceryName = "sorcery"

// Whether to cast, dispel or rebuild a package.
// State `cast` is an equivalent of `present`, not `latest`.
// State `rebuild` implies cast of all specified spells, not only those existed
// before.
type SorceryState string

const (
	SorceryStatePresent   SorceryState = "present"
	SorceryStateLatest    SorceryState = "latest"
	SorceryStateAbsent    SorceryState = "absent"
	SorceryStateCast      SorceryState = "cast"
	SorceryStateDispelled SorceryState = "dispelled"
	SorceryStateRebuild   SorceryState = "rebuild"
)

// Convert a supported type to an optional (pointer) SorceryState
func OptionalSorceryState[T interface {
	*SorceryState | SorceryState | *string | string
}](s T) *SorceryState {
	switch v := any(s).(type) {
	case *SorceryState:
		return v
	case SorceryState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SorceryState(*v)
		return &val
	case string:
		val := SorceryState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `sorcery` Ansible module.
type SorceryParameters struct {
	// Name of the spell or grimoire.
	// Multiple names can be given, separated by commas.
	// Special value `*` in conjunction with states `latest` or `rebuild` will
	// update or rebuild the whole system respectively.
	// The alias `grimoire` was added in community.general 7.3.0.
	Name *[]string `json:"name,omitempty"`

	// Repository location.
	// If specified, `name` represents grimoire(s) instead of spell(s).
	// Special value `*` will pull grimoire from the official location.
	// Only single item in `name` in conjunction with `*` can be used.
	// `state=absent` must be used with a special value `*`.
	Repository *string `json:"repository,omitempty"`

	// Whether to cast, dispel or rebuild a package.
	// State `cast` is an equivalent of `present`, not `latest`.
	// State `rebuild` implies cast of all specified spells, not only those existed
	// before.
	// default: SorceryStatePresent
	State *SorceryState `json:"state,omitempty"`

	// Comma-separated list of _optional_ dependencies to build a spell (or make
	// sure it is built) with; use `+`/`-` in front of dependency to turn it on/off
	// (`+` is optional though).
	// This option is ignored if `name` parameter is equal to `*` or contains more
	// than one spell.
	// Providers must be supplied in the form recognized by Sorcery, for example
	// '`openssl(SSL\`)'.
	Depends *string `json:"depends,omitempty"`

	// Whether or not to update sorcery scripts at the very first stage.
	// default: false
	Update *bool `json:"update,omitempty"`

	// Whether or not to update grimoire collection before casting spells.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`

	// Time in seconds to invalidate grimoire collection on update.
	// Especially useful for SCM and rsync grimoires.
	// Makes sense only in pair with `update_cache`.
	// default: 0
	CacheValidTime *int `json:"cache_valid_time,omitempty"`
}

// Wrap the `SorceryParameters into an `rpc.RPCCall`.
func (p SorceryParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SorceryName,
			Args: args,
		},
	}, nil
}

// Return values for the `sorcery` Ansible module.
type SorceryReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SorceryReturn`
func SorceryReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SorceryReturn, error) {
	return cast.AnyToJSONT[SorceryReturn](r.Result.Result)
}
