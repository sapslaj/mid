// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module allows the execution of arbitrary Django admin commands.
const DjangoCommandName = "django_command"

// Specifies the amount of notification and debug information in the output of
// `django-admin`.
type DjangoCommandVerbosity int

const (
	DjangoCommandVerbosity0 DjangoCommandVerbosity = 0
	DjangoCommandVerbosity1 DjangoCommandVerbosity = 1
	DjangoCommandVerbosity2 DjangoCommandVerbosity = 2
	DjangoCommandVerbosity3 DjangoCommandVerbosity = 3
)

// Convert a supported type to an optional (pointer) DjangoCommandVerbosity
func OptionalDjangoCommandVerbosity[T interface {
	*DjangoCommandVerbosity | DjangoCommandVerbosity | *int | int
}](s T) *DjangoCommandVerbosity {
	switch v := any(s).(type) {
	case *DjangoCommandVerbosity:
		return v
	case DjangoCommandVerbosity:
		return &v
	case *int:
		if v == nil {
			return nil
		}
		val := DjangoCommandVerbosity(*v)
		return &val
	case int:
		val := DjangoCommandVerbosity(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `django_command` Ansible module.
type DjangoCommandParameters struct {
	// Django admin command. It must be a valid command accepted by `python -m
	// django` at the target system.
	Command string `json:"command"`

	// List of extra arguments passed to the django admin command.
	ExtraArgs *[]string `json:"extra_args,omitempty"`

	// Use the the Python interpreter from this virtual environment.
	// Pass the path to the root of the virtualenv, not the `bin/` directory nor
	// the `python` executable.
	Venv *string `json:"venv,omitempty"`

	// Specifies the settings module to use.
	// The value will be passed as is to the `--settings` argument in `django-
	// admin`.
	Settings string `json:"settings"`

	// Adds the given filesystem path to the Python import search path.
	// The value will be passed as is to the `--pythonpath` argument in `django-
	// admin`.
	Pythonpath *string `json:"pythonpath,omitempty"`

	// Provides a full stack trace in the output when a `CommandError` is raised.
	Traceback *bool `json:"traceback,omitempty"`

	// Specifies the amount of notification and debug information in the output of
	// `django-admin`.
	Verbosity *DjangoCommandVerbosity `json:"verbosity,omitempty"`

	// Skips running system checks prior to running the command.
	SkipChecks *bool `json:"skip_checks,omitempty"`
}

// Wrap the `DjangoCommandParameters into an `rpc.RPCCall`.
func (p DjangoCommandParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DjangoCommandName,
			Args: args,
		},
	}, nil
}

// Return values for the `django_command` Ansible module.
type DjangoCommandReturn struct {
	AnsibleCommonReturns

	// Command-line execution information.
	RunInfo *map[string]any `json:"run_info,omitempty"`

	// Version of Django.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DjangoCommandReturn`
func DjangoCommandReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DjangoCommandReturn, error) {
	return rpc.AnyToJSONT[DjangoCommandReturn](r.Result.Result)
}
