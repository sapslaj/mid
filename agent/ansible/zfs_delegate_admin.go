// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages ZFS file system delegated administration permissions, which allow
// unprivileged users to perform ZFS operations normally restricted to the
// superuser.
// See the `zfs allow` section of `zfs(1M\`) for detailed explanations of
// options.
// This module attempts to adhere to the behavior of the command line tool as
// much as possible.
const ZfsDelegateAdminName = "zfs_delegate_admin"

// Whether to allow (`present`), or unallow (`absent`) a permission.
// When set to `present`, at least one "entity" param of `users`, `groups`, or
// `everyone` are required.
// When set to `absent`, removes permissions from the specified entities, or
// removes all permissions if no entity params are specified.
type ZfsDelegateAdminState string

const (
	ZfsDelegateAdminStateAbsent  ZfsDelegateAdminState = "absent"
	ZfsDelegateAdminStatePresent ZfsDelegateAdminState = "present"
)

// Convert a supported type to an optional (pointer) ZfsDelegateAdminState
func OptionalZfsDelegateAdminState[T interface {
	*ZfsDelegateAdminState | ZfsDelegateAdminState | *string | string
}](s T) *ZfsDelegateAdminState {
	switch v := any(s).(type) {
	case *ZfsDelegateAdminState:
		return v
	case ZfsDelegateAdminState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := ZfsDelegateAdminState(*v)
		return &val
	case string:
		val := ZfsDelegateAdminState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `zfs_delegate_admin` Ansible module.
type ZfsDelegateAdminParameters struct {
	// File system or volume name, for example `rpool/myfs`.
	Name string `json:"name"`

	// Whether to allow (`present`), or unallow (`absent`) a permission.
	// When set to `present`, at least one "entity" param of `users`, `groups`, or
	// `everyone` are required.
	// When set to `absent`, removes permissions from the specified entities, or
	// removes all permissions if no entity params are specified.
	// default: ZfsDelegateAdminStatePresent
	State *ZfsDelegateAdminState `json:"state,omitempty"`

	// List of users to whom permission(s) should be granted.
	Users *[]string `json:"users,omitempty"`

	// List of groups to whom permission(s) should be granted.
	Groups *[]string `json:"groups,omitempty"`

	// Apply permissions to everyone.
	// default: false
	Everyone *bool `json:"everyone,omitempty"`

	// The list of permission(s) to delegate (required if `state=present`).
	// Supported permissions depend on the ZFS version in use. See for example
	// `https://openzfs.github.io/openzfs-docs/man/8/zfs-allow.8.html` for OpenZFS.
	Permissions *[]string `json:"permissions,omitempty"`

	// Apply permissions to `name` locally (`zfs allow -l`).
	Local *bool `json:"local,omitempty"`

	// Apply permissions to `name`'s descendents (`zfs allow -d`).
	Descendents *bool `json:"descendents,omitempty"`

	// Unallow permissions recursively (ignored when `state=present`).
	// default: false
	Recursive *bool `json:"recursive,omitempty"`
}

// Wrap the `ZfsDelegateAdminParameters into an `rpc.RPCCall`.
func (p ZfsDelegateAdminParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: ZfsDelegateAdminName,
			Args: args,
		},
	}, nil
}

// Return values for the `zfs_delegate_admin` Ansible module.
type ZfsDelegateAdminReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `ZfsDelegateAdminReturn`
func ZfsDelegateAdminReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (ZfsDelegateAdminReturn, error) {
	return cast.AnyToJSONT[ZfsDelegateAdminReturn](r.Result.Result)
}
