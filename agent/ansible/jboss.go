// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Deploy applications to JBoss standalone using the filesystem.
const JbossName = "jboss"

// Whether the application should be deployed or undeployed.
type JbossState string

const (
	JbossStatePresent JbossState = "present"
	JbossStateAbsent  JbossState = "absent"
)

func OptionalJbossState[T interface {
	*JbossState | JbossState | *string | string
}](s T) *JbossState {
	switch v := any(s).(type) {
	case *JbossState:
		return v
	case JbossState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := JbossState(*v)
		return &val
	case string:
		val := JbossState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `jboss` Ansible module.
type JbossParameters struct {
	// The name of the deployment.
	Deployment string `json:"deployment"`

	// The remote path of the application ear or war to deploy.
	// Required when `state=present`.
	// Ignored when `state=absent`.
	Src *string `json:"src,omitempty"`

	// The location in the filesystem where the deployment scanner listens.
	// default: "/var/lib/jbossas/standalone/deployments"
	DeployPath *string `json:"deploy_path,omitempty"`

	// Whether the application should be deployed or undeployed.
	// default: JbossStatePresent
	State *JbossState `json:"state,omitempty"`
}

// Wrap the `JbossParameters into an `rpc.RPCCall`.
func (p *JbossParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: JbossName,
			Args: args,
		},
	}, nil
}

// Return values for the `jboss` Ansible module.
type JbossReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `JbossReturn`
func JbossReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (JbossReturn, error) {
	return rpc.AnyToJSONT[JbossReturn](r.Result.Result)
}
