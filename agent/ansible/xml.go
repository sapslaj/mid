// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// A CRUD-like interface to managing bits of XML files.
const XmlName = "xml"

// Set or remove an xpath selection (node(s), attribute(s)).
type XmlState string

const (
	XmlStateAbsent  XmlState = "absent"
	XmlStatePresent XmlState = "present"
)

// Convert a supported type to an optional (pointer) XmlState
func OptionalXmlState[T interface {
	*XmlState | XmlState | *string | string
}](s T) *XmlState {
	switch v := any(s).(type) {
	case *XmlState:
		return v
	case XmlState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XmlState(*v)
		return &val
	case string:
		val := XmlState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Search for a given `xpath` and get content.
// This parameter requires `xpath` to be set.
type XmlContent string

const (
	XmlContentAttribute XmlContent = "attribute"
	XmlContentText      XmlContent = "text"
)

// Convert a supported type to an optional (pointer) XmlContent
func OptionalXmlContent[T interface {
	*XmlContent | XmlContent | *string | string
}](s T) *XmlContent {
	switch v := any(s).(type) {
	case *XmlContent:
		return v
	case XmlContent:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XmlContent(*v)
		return &val
	case string:
		val := XmlContent(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Type of input for `add_children` and `set_children`.
type XmlInputType string

const (
	XmlInputTypeXml  XmlInputType = "xml"
	XmlInputTypeYaml XmlInputType = "yaml"
)

// Convert a supported type to an optional (pointer) XmlInputType
func OptionalXmlInputType[T interface {
	*XmlInputType | XmlInputType | *string | string
}](s T) *XmlInputType {
	switch v := any(s).(type) {
	case *XmlInputType:
		return v
	case XmlInputType:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XmlInputType(*v)
		return &val
	case string:
		val := XmlInputType(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `xml` Ansible module.
type XmlParameters struct {
	// Path to the file to operate on.
	// This file must exist ahead of time.
	// This parameter is required, unless `xmlstring` is given.
	Path *string `json:"path,omitempty"`

	// A string containing XML on which to operate.
	// This parameter is required, unless `path` is given.
	Xmlstring *string `json:"xmlstring,omitempty"`

	// A valid XPath expression describing the item(s) you want to manipulate.
	// Operates on the document root, `/`, by default.
	Xpath *string `json:"xpath,omitempty"`

	// The namespace `prefix:uri` mapping for the XPath expression.
	// Needs to be a `dict`, not a `list` of items.
	// default: {}
	Namespaces *map[string]any `json:"namespaces,omitempty"`

	// Set or remove an xpath selection (node(s), attribute(s)).
	// default: XmlStatePresent
	State *XmlState `json:"state,omitempty"`

	// The attribute to select when using parameter `value`.
	// This is a string, not prepended with `@`.
	Attribute *any `json:"attribute,omitempty"`

	// Desired state of the selected attribute.
	// Either a string, or to unset a value, the Python `None` keyword (YAML
	// Equivalent, `null`).
	// Elements default to no value (but present).
	// Attributes default to an empty string.
	Value *any `json:"value,omitempty"`

	// Add additional child-element(s) to a selected element for a given `xpath`.
	// Child elements must be given in a list and each item may be either a string
	// (for example `children=ansible` to add an empty `<ansible/>` child element),
	// or a hash where the key is an element name and the value is the element
	// value.
	// This parameter requires `xpath` to be set.
	AddChildren *[]any `json:"add_children,omitempty"`

	// Set the child-element(s) of a selected element for a given `xpath`.
	// Removes any existing children.
	// Child elements must be specified as in `add_children`.
	// This parameter requires `xpath` to be set.
	SetChildren *[]any `json:"set_children,omitempty"`

	// Search for a given `xpath` and provide the count of any matches.
	// This parameter requires `xpath` to be set.
	// default: false
	Count *bool `json:"count,omitempty"`

	// Search for a given `xpath` and print out any matches.
	// This parameter requires `xpath` to be set.
	// default: false
	PrintMatch *bool `json:"print_match,omitempty"`

	// Pretty print XML output.
	// default: false
	PrettyPrint *bool `json:"pretty_print,omitempty"`

	// Search for a given `xpath` and get content.
	// This parameter requires `xpath` to be set.
	Content *XmlContent `json:"content,omitempty"`

	// Type of input for `add_children` and `set_children`.
	// default: XmlInputTypeYaml
	InputType *XmlInputType `json:"input_type,omitempty"`

	// Create a backup file including the timestamp information so you can get the
	// original file back if you somehow clobbered it incorrectly.
	// default: false
	Backup *bool `json:"backup,omitempty"`

	// Remove CDATA tags surrounding text values.
	// Note that this might break your XML file if text values contain characters
	// that could be interpreted as XML.
	// default: false
	StripCdataTags *bool `json:"strip_cdata_tags,omitempty"`

	// Add additional child-element(s) before the first selected element for a
	// given `xpath`.
	// Child elements must be given in a list and each item may be either a string
	// (for example `children=ansible` to add an empty `<ansible/>` child element),
	// or a hash where the key is an element name and the value is the element
	// value.
	// This parameter requires `xpath` to be set.
	// default: false
	Insertbefore *bool `json:"insertbefore,omitempty"`

	// Add additional child-element(s) after the last selected element for a given
	// `xpath`.
	// Child elements must be given in a list and each item may be either a string
	// (for example `children=ansible` to add an empty `<ansible/>` child element),
	// or a hash where the key is an element name and the value is the element
	// value.
	// This parameter requires `xpath` to be set.
	// default: false
	Insertafter *bool `json:"insertafter,omitempty"`
}

// Wrap the `XmlParameters into an `rpc.RPCCall`.
func (p XmlParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: XmlName,
			Args: args,
		},
	}, nil
}

// Return values for the `xml` Ansible module.
type XmlReturn struct {
	AnsibleCommonReturns

	// A dictionary with the original xpath, namespaces and state.
	Actions *map[string]any `json:"actions,omitempty"`

	// The name of the backup file that was created.
	BackupFile *string `json:"backup_file,omitempty"`

	// The count of xpath matches.
	Count *int `json:"count,omitempty"`

	// The xpath matches found.
	Matches *[]any `json:"matches,omitempty"`

	// A message related to the performed action(s).
	Msg *string `json:"msg,omitempty"`

	// An XML string of the resulting output.
	Xmlstring *string `json:"xmlstring,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `XmlReturn`
func XmlReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (XmlReturn, error) {
	return rpc.AnyToJSONT[XmlReturn](r.Result.Result)
}
