// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module enables or disables repositories using the `dnf config-manager`
// sub-command.
const DnfConfigManagerName = "dnf_config_manager"

// Whether the repositories should be `enabled` or `disabled`.
type DnfConfigManagerState string

const (
	DnfConfigManagerStateEnabled  DnfConfigManagerState = "enabled"
	DnfConfigManagerStateDisabled DnfConfigManagerState = "disabled"
)

func OptionalDnfConfigManagerState[T interface {
	*DnfConfigManagerState | DnfConfigManagerState | *string | string
}](s T) *DnfConfigManagerState {
	switch v := any(s).(type) {
	case *DnfConfigManagerState:
		return v
	case DnfConfigManagerState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DnfConfigManagerState(*v)
		return &val
	case string:
		val := DnfConfigManagerState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `dnf_config_manager` Ansible module.
type DnfConfigManagerParameters struct {
	// Repository ID, for example `crb`.
	// default: []
	Name *[]string `json:"name,omitempty"`

	// Whether the repositories should be `enabled` or `disabled`.
	// default: DnfConfigManagerStateEnabled
	State *DnfConfigManagerState `json:"state,omitempty"`
}

// Wrap the `DnfConfigManagerParameters into an `rpc.RPCCall`.
func (p *DnfConfigManagerParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DnfConfigManagerName,
			Args: args,
		},
	}, nil
}

// Return values for the `dnf_config_manager` Ansible module.
type DnfConfigManagerReturn struct {
	AnsibleCommonReturns

	// Repo IDs before action taken.
	RepoStatesPre *map[string]any `json:"repo_states_pre,omitempty"`

	// Repository states after action taken.
	RepoStatesPost *map[string]any `json:"repo_states_post,omitempty"`

	// Repositories changed.
	ChangedRepos *[]string `json:"changed_repos,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DnfConfigManagerReturn`
func DnfConfigManagerReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DnfConfigManagerReturn, error) {
	return rpc.AnyToJSONT[DnfConfigManagerReturn](r.Result.Result)
}
