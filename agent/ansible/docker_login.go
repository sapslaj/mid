// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Provides functionality similar to the `docker login` command.
// Authenticate with a docker registry and add the credentials to your local
// Docker config file respectively the credentials store associated to the
// registry. Adding the credentials to the config files resp. the credential
// store allows future connections to the registry using tools such as Ansible's
// Docker modules, the Docker CLI and Docker SDK for Python without needing to
// provide credentials.
// Running in check mode will perform the authentication without updating the
// config file.
const DockerLoginName = "docker_login"

// This controls the current state of the user. `present` will login in a user,
// `absent` will log them out.
// To logout you only need the registry server, which defaults to DockerHub.
// Before 2.1 you could ONLY log in.
// Docker does not support 'logout' with a custom config file.
type DockerLoginState string

const (
	DockerLoginStatePresent DockerLoginState = "present"
	DockerLoginStateAbsent  DockerLoginState = "absent"
)

// Convert a supported type to an optional (pointer) DockerLoginState
func OptionalDockerLoginState[T interface {
	*DockerLoginState | DockerLoginState | *string | string
}](s T) *DockerLoginState {
	switch v := any(s).(type) {
	case *DockerLoginState:
		return v
	case DockerLoginState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerLoginState(*v)
		return &val
	case string:
		val := DockerLoginState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_login` Ansible module.
type DockerLoginParameters struct {
	// The registry URL.
	// default: "https://index.docker.io/v1/"
	RegistryUrl *string `json:"registry_url,omitempty"`

	// The username for the registry account.
	// Required when `state=present`.
	Username *string `json:"username,omitempty"`

	// The plaintext password for the registry account.
	// Required when `state=present`.
	Password *string `json:"password,omitempty"`

	// Refresh existing authentication found in the configuration file.
	// default: false
	Reauthorize *bool `json:"reauthorize,omitempty"`

	// Custom path to the Docker CLI configuration file.
	// default: "~/.docker/config.json"
	ConfigPath *string `json:"config_path,omitempty"`

	// This controls the current state of the user. `present` will login in a user,
	// `absent` will log them out.
	// To logout you only need the registry server, which defaults to DockerHub.
	// Before 2.1 you could ONLY log in.
	// Docker does not support 'logout' with a custom config file.
	// default: DockerLoginStatePresent
	State *DockerLoginState `json:"state,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerLoginParameters into an `rpc.RPCCall`.
func (p DockerLoginParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerLoginName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_login` Ansible module.
type DockerLoginReturn struct {
	AnsibleCommonReturns

	// Results from the login.
	LoginResults *map[string]any `json:"login_results,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerLoginReturn`
func DockerLoginReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerLoginReturn, error) {
	return cast.AnyToJSONT[DockerLoginReturn](r.Result.Result)
}
