#!/usr/bin/env python3

import multiprocessing
import os
import pathlib
import subprocess


GOOS = [
    # only support linux for now
    "linux",
]

GOARCH = [
    "amd64",
    "arm64",
]

agent_dir = pathlib.Path(__file__).parent / ".." / "agent"


def build_agent(goos: str, goarch: str):
    command = [
        "go",
        "build",
        "-ldflags",
        "-s -w",
        "-o",
        str(agent_dir / f"mid-agent-{goos}-{goarch}"),
        str(agent_dir / "cmd" / "mid-agent"),
    ]
    print(f"GOOS={goos}", f"GOARCH={goarch}", " ".join(command))
    subprocess.run(
        args=command,
        check=True,
        env={
            **os.environ,
            "GOOS": goos,
            "GOARCH": goarch,
        },
    )


def main():
    agent_combinations: list[tuple[str, str]] = []
    for goos in GOOS:
        for goarch in GOARCH:
            agent_combinations.append((goos, goarch))
    with multiprocessing.Pool(
        min(os.process_cpu_count() or 4, len(agent_combinations))
    ) as p:
        p.starmap(build_agent, agent_combinations)
    filepath = agent_dir / "zzz_agent_binaries.go"
    with open(filepath, "w") as f:
        f.writelines(
            [
                "// Code generated by ./hack/generate-agent-binaries.py DO NOT EDIT\n",
                "package agent\n",
                "\n",
                "import (\n",
                '\t_ "embed"\n',
                '\t"fmt"\n',
                ")\n\n",
            ]
        )
        for goos in GOOS:
            for goarch in GOARCH:
                f.writelines(
                    [
                        f"//go:embed mid-agent-{goos}-{goarch}\n",
                        f"var AgentBinary_{goos}_{goarch}_ []byte\n",
                        "\n",
                    ]
                )
        f.writelines(
            [
                "func GetAgentBinary(goos string, goarch string) ([]byte, error) {\n",
                "\tswitch goos {\n",
            ]
        )
        for goos in GOOS:
            f.writelines(
                [
                    f'\tcase "{goos}":\n',
                    "\t\tswitch goarch {\n",
                ]
            )
            for goarch in GOARCH:
                f.writelines(
                    [
                        f'\t\tcase "{goarch}":\n',
                        f"\t\t\treturn AgentBinary_{goos}_{goarch}_, nil\n",
                    ]
                )
            f.writelines(
                [
                    "\t\tdefault:\n",
                    '\t\t\treturn nil, fmt.Errorf("unsupported GOARCH=%s", goarch)\n',
                    "\t\t}\n",
                ]
            )

        f.writelines(
            [
                "\tdefault:\n",
                '\t\treturn nil, fmt.Errorf("unsupported GOOS=%s", goos)\n',
                "\t}\n",
                "}\n",
            ]
        )


if __name__ == "__main__":
    main()
