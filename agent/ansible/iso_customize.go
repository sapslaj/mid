// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module is used to add/remove/change files in ISO file.
// The file inside ISO will be overwritten if it exists by option `add_files`.
const IsoCustomizeName = "iso_customize"

// Parameters for the `iso_customize` Ansible module.
type IsoCustomizeParameters struct {
	// This is the path of source ISO file.
	SrcIso string `json:"src_iso"`

	// The path of the customized ISO file.
	DestIso string `json:"dest_iso"`

	// Absolute paths for files inside the ISO file that should be removed.
	// default: []
	DeleteFiles *[]string `json:"delete_files,omitempty"`

	// Allows to add and replace files in the ISO file.
	// Will create intermediate folders inside the ISO file when they do not exist.
	// default: []
	AddFiles *struct {
		SrcFile  string `json:"src_file"`
		DestFile string `json:"dest_file"`
	} `json:"add_files,omitempty"`
}

// Wrap the `IsoCustomizeParameters into an `rpc.RPCCall`.
func (p *IsoCustomizeParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: IsoCustomizeName,
			Args: args,
		},
	}, nil
}

// Return values for the `iso_customize` Ansible module.
type IsoCustomizeReturn struct {
	AnsibleCommonReturns

	// Path of source ISO file.
	SrcIso *string `json:"src_iso,omitempty"`

	// Path of the customized ISO file.
	DestIso *string `json:"dest_iso,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `IsoCustomizeReturn`
func IsoCustomizeReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (IsoCustomizeReturn, error) {
	return rpc.AnyToJSONT[IsoCustomizeReturn](r.Result.Result)
}
