// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Configures the SELinux mode and policy.
// A reboot may be required after usage.
// Ansible will not issue this reboot but will let you know when it is required.
const SelinuxName = "selinux"

// The SELinux mode.
type SelinuxState string

const (
	SelinuxStateDisabled   SelinuxState = "disabled"
	SelinuxStateEnforcing  SelinuxState = "enforcing"
	SelinuxStatePermissive SelinuxState = "permissive"
)

// Parameters for the `selinux` Ansible module.
type SelinuxParameters struct {
	// The name of the SELinux policy to use (e.g. `targeted`) will be required
	// unless `state=disabled`.
	Policy *string `json:"policy,omitempty"`

	// The SELinux mode.
	State SelinuxState `json:"state"`

	// If set to `true`, will update also the kernel boot parameters when
	// disabling/enabling SELinux.
	// The `grubby` tool must be present on the target system for this to work.
	// default: false
	UpdateKernelParam *bool `json:"update_kernel_param,omitempty"`

	// The path to the SELinux configuration file, if non-standard.
	// default: "/etc/selinux/config"
	Configfile *string `json:"configfile,omitempty"`
}

// Wrap the `SelinuxParameters into an `rpc.RPCCall`.
func (p SelinuxParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SelinuxName,
			Args: args,
		},
	}, nil
}

// Return values for the `selinux` Ansible module.
type SelinuxReturn struct {
	AnsibleCommonReturns

	// Messages that describe changes that were made.
	Msg *string `json:"msg,omitempty"`

	// Path to SELinux configuration file.
	Configfile *string `json:"configfile,omitempty"`

	// Name of the SELinux policy.
	Policy *string `json:"policy,omitempty"`

	// SELinux mode.
	State *string `json:"state,omitempty"`

	// Whether or not an reboot is required for the changes to take effect.
	RebootRequired *bool `json:"reboot_required,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SelinuxReturn`
func SelinuxReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SelinuxReturn, error) {
	return cast.AnyToJSONT[SelinuxReturn](r.Result.Result)
}
