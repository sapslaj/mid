// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Create or delete network namespaces using the `ip` command.
const IpNetnsName = "ip_netns"

// Whether the namespace should exist.
type IpNetnsState string

const (
	IpNetnsStatePresent IpNetnsState = "present"
	IpNetnsStateAbsent  IpNetnsState = "absent"
)

func OptionalIpNetnsState[T interface {
	*IpNetnsState | IpNetnsState | *string | string
}](s T) *IpNetnsState {
	switch v := any(s).(type) {
	case *IpNetnsState:
		return v
	case IpNetnsState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := IpNetnsState(*v)
		return &val
	case string:
		val := IpNetnsState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `ip_netns` Ansible module.
type IpNetnsParameters struct {
	// Name of the namespace.
	Name *string `json:"name,omitempty"`

	// Whether the namespace should exist.
	// default: IpNetnsStatePresent
	State *IpNetnsState `json:"state,omitempty"`
}

// Wrap the `IpNetnsParameters into an `rpc.RPCCall`.
func (p *IpNetnsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: IpNetnsName,
			Args: args,
		},
	}, nil
}

// Return values for the `ip_netns` Ansible module.
type IpNetnsReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `IpNetnsReturn`
func IpNetnsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (IpNetnsReturn, error) {
	return rpc.AnyToJSONT[IpNetnsReturn](r.Result.Result)
}
