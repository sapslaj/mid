// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module encrypts input using `systemd`'s `systemd-creds encrypt`.
const SystemdCredsEncryptName = "systemd_creds_encrypt"

// Parameters for the `systemd_creds_encrypt` Ansible module.
type SystemdCredsEncryptParameters struct {
	// The credential name to embed in the encrypted credential data.
	Name *string `json:"name,omitempty"`

	// The time when the credential shall not be used anymore.
	// Takes a timestamp specification in the format described in
	// `systemd.time(7\`).
	NotAfter *string `json:"not_after,omitempty"`

	// Pretty print the output so that it may be pasted directly into a unit file.
	// default: false
	Pretty *bool `json:"pretty,omitempty"`

	// The secret to encrypt.
	Secret string `json:"secret"`

	// The timestamp to embed into the encrypted credential.
	// Takes a timestamp specification in the format described in
	// `systemd.time(7\`).
	Timestamp *string `json:"timestamp,omitempty"`

	// A user name or numeric UID to encrypt the credential for.
	// If set to the special string `self` it sets the user to the user of the
	// calling process.
	// Requires `systemd` 256 or later.
	User *string `json:"user,omitempty"`
}

// Wrap the `SystemdCredsEncryptParameters into an `rpc.RPCCall`.
func (p SystemdCredsEncryptParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SystemdCredsEncryptName,
			Args: args,
		},
	}, nil
}

// Return values for the `systemd_creds_encrypt` Ansible module.
type SystemdCredsEncryptReturn struct {
	AnsibleCommonReturns

	// The Base64 encoded encrypted secret.
	Value *string `json:"value,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SystemdCredsEncryptReturn`
func SystemdCredsEncryptReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SystemdCredsEncryptReturn, error) {
	return rpc.AnyToJSONT[SystemdCredsEncryptReturn](r.Result.Result)
}
