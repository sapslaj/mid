// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mid:resource:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    public readonly ensure!: pulumi.Output<string | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly gid!: pulumi.Output<number | undefined>;
    public readonly gidMax!: pulumi.Output<number | undefined>;
    public readonly gidMin!: pulumi.Output<number | undefined>;
    public readonly local!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nonUnique!: pulumi.Output<boolean | undefined>;
    public readonly system!: pulumi.Output<boolean | undefined>;
    public readonly triggers!: pulumi.Output<outputs.types.TriggersOutput>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["ensure"] = args ? args.ensure : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["gid"] = args ? args.gid : undefined;
            resourceInputs["gidMax"] = args ? args.gidMax : undefined;
            resourceInputs["gidMin"] = args ? args.gidMin : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonUnique"] = args ? args.nonUnique : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        } else {
            resourceInputs["ensure"] = undefined /*out*/;
            resourceInputs["force"] = undefined /*out*/;
            resourceInputs["gid"] = undefined /*out*/;
            resourceInputs["gidMax"] = undefined /*out*/;
            resourceInputs["gidMin"] = undefined /*out*/;
            resourceInputs["local"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nonUnique"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    ensure?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    gid?: pulumi.Input<number>;
    gidMax?: pulumi.Input<number>;
    gidMin?: pulumi.Input<number>;
    local?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nonUnique?: pulumi.Input<boolean>;
    system?: pulumi.Input<boolean>;
    triggers?: pulumi.Input<inputs.types.TriggersInputArgs>;
}
