// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Tap external Homebrew repositories.
const HomebrewTapName = "homebrew_tap"

// State of the repository.
type HomebrewTapState string

const (
	HomebrewTapStatePresent HomebrewTapState = "present"
	HomebrewTapStateAbsent  HomebrewTapState = "absent"
)

func OptionalHomebrewTapState[T interface {
	*HomebrewTapState | HomebrewTapState | *string | string
}](s T) *HomebrewTapState {
	switch v := any(s).(type) {
	case *HomebrewTapState:
		return v
	case HomebrewTapState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := HomebrewTapState(*v)
		return &val
	case string:
		val := HomebrewTapState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `homebrew_tap` Ansible module.
type HomebrewTapParameters struct {
	// The GitHub user/organization repository to tap.
	Name []string `json:"name"`

	// The optional git URL of the repository to tap. The URL is not assumed to be
	// on GitHub, and the protocol does not have to be HTTP. Any location and
	// protocol that git can handle is fine.
	// `name` option may not be a list of multiple taps (but a single tap instead)
	// when this option is provided.
	Url *string `json:"url,omitempty"`

	// State of the repository.
	// default: HomebrewTapStatePresent
	State *HomebrewTapState `json:"state,omitempty"`

	// A `:` separated list of paths to search for `brew` executable.
	// default: "/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin"
	Path *string `json:"path,omitempty"`
}

// Wrap the `HomebrewTapParameters into an `rpc.RPCCall`.
func (p *HomebrewTapParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: HomebrewTapName,
			Args: args,
		},
	}, nil
}

// Return values for the `homebrew_tap` Ansible module.
type HomebrewTapReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `HomebrewTapReturn`
func HomebrewTapReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (HomebrewTapReturn, error) {
	return rpc.AnyToJSONT[HomebrewTapReturn](r.Result.Result)
}
