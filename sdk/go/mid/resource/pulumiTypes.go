// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/mid/sdk/go/mid/internal"
)

var _ = internal.GetEnvOrDefault

type AnsibleTaskListArgsTask struct {
	Args         map[string]interface{} `pulumi:"args"`
	Check        *bool                  `pulumi:"check"`
	Environment  map[string]string      `pulumi:"environment"`
	IgnoreErrors *bool                  `pulumi:"ignoreErrors"`
	Module       string                 `pulumi:"module"`
}

// AnsibleTaskListArgsTaskInput is an input type that accepts AnsibleTaskListArgsTaskArgs and AnsibleTaskListArgsTaskOutput values.
// You can construct a concrete instance of `AnsibleTaskListArgsTaskInput` via:
//
//	AnsibleTaskListArgsTaskArgs{...}
type AnsibleTaskListArgsTaskInput interface {
	pulumi.Input

	ToAnsibleTaskListArgsTaskOutput() AnsibleTaskListArgsTaskOutput
	ToAnsibleTaskListArgsTaskOutputWithContext(context.Context) AnsibleTaskListArgsTaskOutput
}

type AnsibleTaskListArgsTaskArgs struct {
	Args         pulumi.MapInput       `pulumi:"args"`
	Check        pulumi.BoolPtrInput   `pulumi:"check"`
	Environment  pulumi.StringMapInput `pulumi:"environment"`
	IgnoreErrors pulumi.BoolPtrInput   `pulumi:"ignoreErrors"`
	Module       pulumi.StringInput    `pulumi:"module"`
}

func (AnsibleTaskListArgsTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnsibleTaskListArgsTask)(nil)).Elem()
}

func (i AnsibleTaskListArgsTaskArgs) ToAnsibleTaskListArgsTaskOutput() AnsibleTaskListArgsTaskOutput {
	return i.ToAnsibleTaskListArgsTaskOutputWithContext(context.Background())
}

func (i AnsibleTaskListArgsTaskArgs) ToAnsibleTaskListArgsTaskOutputWithContext(ctx context.Context) AnsibleTaskListArgsTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnsibleTaskListArgsTaskOutput)
}

// AnsibleTaskListArgsTaskArrayInput is an input type that accepts AnsibleTaskListArgsTaskArray and AnsibleTaskListArgsTaskArrayOutput values.
// You can construct a concrete instance of `AnsibleTaskListArgsTaskArrayInput` via:
//
//	AnsibleTaskListArgsTaskArray{ AnsibleTaskListArgsTaskArgs{...} }
type AnsibleTaskListArgsTaskArrayInput interface {
	pulumi.Input

	ToAnsibleTaskListArgsTaskArrayOutput() AnsibleTaskListArgsTaskArrayOutput
	ToAnsibleTaskListArgsTaskArrayOutputWithContext(context.Context) AnsibleTaskListArgsTaskArrayOutput
}

type AnsibleTaskListArgsTaskArray []AnsibleTaskListArgsTaskInput

func (AnsibleTaskListArgsTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnsibleTaskListArgsTask)(nil)).Elem()
}

func (i AnsibleTaskListArgsTaskArray) ToAnsibleTaskListArgsTaskArrayOutput() AnsibleTaskListArgsTaskArrayOutput {
	return i.ToAnsibleTaskListArgsTaskArrayOutputWithContext(context.Background())
}

func (i AnsibleTaskListArgsTaskArray) ToAnsibleTaskListArgsTaskArrayOutputWithContext(ctx context.Context) AnsibleTaskListArgsTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnsibleTaskListArgsTaskArrayOutput)
}

type AnsibleTaskListArgsTaskOutput struct{ *pulumi.OutputState }

func (AnsibleTaskListArgsTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnsibleTaskListArgsTask)(nil)).Elem()
}

func (o AnsibleTaskListArgsTaskOutput) ToAnsibleTaskListArgsTaskOutput() AnsibleTaskListArgsTaskOutput {
	return o
}

func (o AnsibleTaskListArgsTaskOutput) ToAnsibleTaskListArgsTaskOutputWithContext(ctx context.Context) AnsibleTaskListArgsTaskOutput {
	return o
}

func (o AnsibleTaskListArgsTaskOutput) Args() pulumi.MapOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTask) map[string]interface{} { return v.Args }).(pulumi.MapOutput)
}

func (o AnsibleTaskListArgsTaskOutput) Check() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTask) *bool { return v.Check }).(pulumi.BoolPtrOutput)
}

func (o AnsibleTaskListArgsTaskOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTask) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

func (o AnsibleTaskListArgsTaskOutput) IgnoreErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTask) *bool { return v.IgnoreErrors }).(pulumi.BoolPtrOutput)
}

func (o AnsibleTaskListArgsTaskOutput) Module() pulumi.StringOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTask) string { return v.Module }).(pulumi.StringOutput)
}

type AnsibleTaskListArgsTaskArrayOutput struct{ *pulumi.OutputState }

func (AnsibleTaskListArgsTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnsibleTaskListArgsTask)(nil)).Elem()
}

func (o AnsibleTaskListArgsTaskArrayOutput) ToAnsibleTaskListArgsTaskArrayOutput() AnsibleTaskListArgsTaskArrayOutput {
	return o
}

func (o AnsibleTaskListArgsTaskArrayOutput) ToAnsibleTaskListArgsTaskArrayOutputWithContext(ctx context.Context) AnsibleTaskListArgsTaskArrayOutput {
	return o
}

func (o AnsibleTaskListArgsTaskArrayOutput) Index(i pulumi.IntInput) AnsibleTaskListArgsTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnsibleTaskListArgsTask {
		return vs[0].([]AnsibleTaskListArgsTask)[vs[1].(int)]
	}).(AnsibleTaskListArgsTaskOutput)
}

type AnsibleTaskListArgsTasks struct {
	Create []AnsibleTaskListArgsTask `pulumi:"create"`
	Delete []AnsibleTaskListArgsTask `pulumi:"delete"`
	Update []AnsibleTaskListArgsTask `pulumi:"update"`
}

// AnsibleTaskListArgsTasksInput is an input type that accepts AnsibleTaskListArgsTasksArgs and AnsibleTaskListArgsTasksOutput values.
// You can construct a concrete instance of `AnsibleTaskListArgsTasksInput` via:
//
//	AnsibleTaskListArgsTasksArgs{...}
type AnsibleTaskListArgsTasksInput interface {
	pulumi.Input

	ToAnsibleTaskListArgsTasksOutput() AnsibleTaskListArgsTasksOutput
	ToAnsibleTaskListArgsTasksOutputWithContext(context.Context) AnsibleTaskListArgsTasksOutput
}

type AnsibleTaskListArgsTasksArgs struct {
	Create AnsibleTaskListArgsTaskArrayInput `pulumi:"create"`
	Delete AnsibleTaskListArgsTaskArrayInput `pulumi:"delete"`
	Update AnsibleTaskListArgsTaskArrayInput `pulumi:"update"`
}

func (AnsibleTaskListArgsTasksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnsibleTaskListArgsTasks)(nil)).Elem()
}

func (i AnsibleTaskListArgsTasksArgs) ToAnsibleTaskListArgsTasksOutput() AnsibleTaskListArgsTasksOutput {
	return i.ToAnsibleTaskListArgsTasksOutputWithContext(context.Background())
}

func (i AnsibleTaskListArgsTasksArgs) ToAnsibleTaskListArgsTasksOutputWithContext(ctx context.Context) AnsibleTaskListArgsTasksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnsibleTaskListArgsTasksOutput)
}

type AnsibleTaskListArgsTasksOutput struct{ *pulumi.OutputState }

func (AnsibleTaskListArgsTasksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnsibleTaskListArgsTasks)(nil)).Elem()
}

func (o AnsibleTaskListArgsTasksOutput) ToAnsibleTaskListArgsTasksOutput() AnsibleTaskListArgsTasksOutput {
	return o
}

func (o AnsibleTaskListArgsTasksOutput) ToAnsibleTaskListArgsTasksOutputWithContext(ctx context.Context) AnsibleTaskListArgsTasksOutput {
	return o
}

func (o AnsibleTaskListArgsTasksOutput) Create() AnsibleTaskListArgsTaskArrayOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTasks) []AnsibleTaskListArgsTask { return v.Create }).(AnsibleTaskListArgsTaskArrayOutput)
}

func (o AnsibleTaskListArgsTasksOutput) Delete() AnsibleTaskListArgsTaskArrayOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTasks) []AnsibleTaskListArgsTask { return v.Delete }).(AnsibleTaskListArgsTaskArrayOutput)
}

func (o AnsibleTaskListArgsTasksOutput) Update() AnsibleTaskListArgsTaskArrayOutput {
	return o.ApplyT(func(v AnsibleTaskListArgsTasks) []AnsibleTaskListArgsTask { return v.Update }).(AnsibleTaskListArgsTaskArrayOutput)
}

type AnsibleTaskListStateResults struct {
	Lifecycle string                           `pulumi:"lifecycle"`
	Tasks     []AnsibleTaskListStateTaskResult `pulumi:"tasks"`
}

type AnsibleTaskListStateResultsOutput struct{ *pulumi.OutputState }

func (AnsibleTaskListStateResultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnsibleTaskListStateResults)(nil)).Elem()
}

func (o AnsibleTaskListStateResultsOutput) ToAnsibleTaskListStateResultsOutput() AnsibleTaskListStateResultsOutput {
	return o
}

func (o AnsibleTaskListStateResultsOutput) ToAnsibleTaskListStateResultsOutputWithContext(ctx context.Context) AnsibleTaskListStateResultsOutput {
	return o
}

func (o AnsibleTaskListStateResultsOutput) Lifecycle() pulumi.StringOutput {
	return o.ApplyT(func(v AnsibleTaskListStateResults) string { return v.Lifecycle }).(pulumi.StringOutput)
}

func (o AnsibleTaskListStateResultsOutput) Tasks() AnsibleTaskListStateTaskResultArrayOutput {
	return o.ApplyT(func(v AnsibleTaskListStateResults) []AnsibleTaskListStateTaskResult { return v.Tasks }).(AnsibleTaskListStateTaskResultArrayOutput)
}

type AnsibleTaskListStateTaskResult struct {
	Args         map[string]interface{} `pulumi:"args"`
	Check        *bool                  `pulumi:"check"`
	Environment  map[string]string      `pulumi:"environment"`
	ExitCode     int                    `pulumi:"exitCode"`
	IgnoreErrors *bool                  `pulumi:"ignoreErrors"`
	Module       string                 `pulumi:"module"`
	Result       map[string]interface{} `pulumi:"result"`
	Stderr       string                 `pulumi:"stderr"`
	Stdout       string                 `pulumi:"stdout"`
	Success      bool                   `pulumi:"success"`
}

type AnsibleTaskListStateTaskResultOutput struct{ *pulumi.OutputState }

func (AnsibleTaskListStateTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnsibleTaskListStateTaskResult)(nil)).Elem()
}

func (o AnsibleTaskListStateTaskResultOutput) ToAnsibleTaskListStateTaskResultOutput() AnsibleTaskListStateTaskResultOutput {
	return o
}

func (o AnsibleTaskListStateTaskResultOutput) ToAnsibleTaskListStateTaskResultOutputWithContext(ctx context.Context) AnsibleTaskListStateTaskResultOutput {
	return o
}

func (o AnsibleTaskListStateTaskResultOutput) Args() pulumi.MapOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) map[string]interface{} { return v.Args }).(pulumi.MapOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Check() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) *bool { return v.Check }).(pulumi.BoolPtrOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) int { return v.ExitCode }).(pulumi.IntOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) IgnoreErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) *bool { return v.IgnoreErrors }).(pulumi.BoolPtrOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Module() pulumi.StringOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) string { return v.Module }).(pulumi.StringOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) string { return v.Stderr }).(pulumi.StringOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) string { return v.Stdout }).(pulumi.StringOutput)
}

func (o AnsibleTaskListStateTaskResultOutput) Success() pulumi.BoolOutput {
	return o.ApplyT(func(v AnsibleTaskListStateTaskResult) bool { return v.Success }).(pulumi.BoolOutput)
}

type AnsibleTaskListStateTaskResultArrayOutput struct{ *pulumi.OutputState }

func (AnsibleTaskListStateTaskResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnsibleTaskListStateTaskResult)(nil)).Elem()
}

func (o AnsibleTaskListStateTaskResultArrayOutput) ToAnsibleTaskListStateTaskResultArrayOutput() AnsibleTaskListStateTaskResultArrayOutput {
	return o
}

func (o AnsibleTaskListStateTaskResultArrayOutput) ToAnsibleTaskListStateTaskResultArrayOutputWithContext(ctx context.Context) AnsibleTaskListStateTaskResultArrayOutput {
	return o
}

func (o AnsibleTaskListStateTaskResultArrayOutput) Index(i pulumi.IntInput) AnsibleTaskListStateTaskResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnsibleTaskListStateTaskResult {
		return vs[0].([]AnsibleTaskListStateTaskResult)[vs[1].(int)]
	}).(AnsibleTaskListStateTaskResultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnsibleTaskListArgsTaskInput)(nil)).Elem(), AnsibleTaskListArgsTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnsibleTaskListArgsTaskArrayInput)(nil)).Elem(), AnsibleTaskListArgsTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnsibleTaskListArgsTasksInput)(nil)).Elem(), AnsibleTaskListArgsTasksArgs{})
	pulumi.RegisterOutputType(AnsibleTaskListArgsTaskOutput{})
	pulumi.RegisterOutputType(AnsibleTaskListArgsTaskArrayOutput{})
	pulumi.RegisterOutputType(AnsibleTaskListArgsTasksOutput{})
	pulumi.RegisterOutputType(AnsibleTaskListStateResultsOutput{})
	pulumi.RegisterOutputType(AnsibleTaskListStateTaskResultOutput{})
	pulumi.RegisterOutputType(AnsibleTaskListStateTaskResultArrayOutput{})
}
