// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module manages the switching and upgrading of `bootc`.
const BootcManageName = "bootc_manage"

// Control whether to apply the latest image or switch the image.
// `Note:` This will not reboot the system.
// Please use `ansible.builtin.reboot` to reboot the system.
type BootcManageState string

const (
	BootcManageStateSwitch BootcManageState = "switch"
	BootcManageStateLatest BootcManageState = "latest"
)

// Parameters for the `bootc_manage` Ansible module.
type BootcManageParameters struct {
	// Control whether to apply the latest image or switch the image.
	// `Note:` This will not reboot the system.
	// Please use `ansible.builtin.reboot` to reboot the system.
	State BootcManageState `json:"state"`

	// The image to switch to.
	// This is required when `state=switch`.
	Image *string `json:"image,omitempty"`
}

// Wrap the `BootcManageParameters into an `rpc.RPCCall`.
func (p BootcManageParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: BootcManageName,
			Args: args,
		},
	}, nil
}

// Return values for the `bootc_manage` Ansible module.
type BootcManageReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `BootcManageReturn`
func BootcManageReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (BootcManageReturn, error) {
	return cast.AnyToJSONT[BootcManageReturn](r.Result.Result)
}
