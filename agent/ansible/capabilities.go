// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module manipulates files privileges using the Linux capabilities(7)
// system.
const CapabilitiesName = "capabilities"

// Whether the entry should be present or absent in the file's capabilities.
type CapabilitiesState string

const (
	CapabilitiesStateAbsent  CapabilitiesState = "absent"
	CapabilitiesStatePresent CapabilitiesState = "present"
)

func OptionalCapabilitiesState[T interface {
	*CapabilitiesState | CapabilitiesState | *string | string
}](s T) *CapabilitiesState {
	switch v := any(s).(type) {
	case *CapabilitiesState:
		return v
	case CapabilitiesState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := CapabilitiesState(*v)
		return &val
	case string:
		val := CapabilitiesState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `capabilities` Ansible module.
type CapabilitiesParameters struct {
	// Specifies the path to the file to be managed.
	Path string `json:"path"`

	// Desired capability to set (with operator and flags, if `state=present`) or
	// remove (if `state=absent`).
	Capability string `json:"capability"`

	// Whether the entry should be present or absent in the file's capabilities.
	// default: CapabilitiesStatePresent
	State *CapabilitiesState `json:"state,omitempty"`
}

// Wrap the `CapabilitiesParameters into an `rpc.RPCCall`.
func (p *CapabilitiesParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: CapabilitiesName,
			Args: args,
		},
	}, nil
}

// Return values for the `capabilities` Ansible module.
type CapabilitiesReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `CapabilitiesReturn`
func CapabilitiesReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (CapabilitiesReturn, error) {
	return rpc.AnyToJSONT[CapabilitiesReturn](r.Result.Result)
}
