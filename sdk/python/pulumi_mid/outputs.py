# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    "Connection",
    "ExecCommand",
    "FileStatFileMode",
    "FileStatState",
    "ResourceConfig",
    "TriggersOutput",
]


@pulumi.output_type
class Connection(dict):
    """
    Instructions for how to connect to a remote endpoint.
    """

    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostKey":
            suggest = "host_key"
        elif key == "perDialTimeout":
            suggest = "per_dial_timeout"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyPassword":
            suggest = "private_key_password"
        elif key == "sshAgent":
            suggest = "ssh_agent"
        elif key == "sshAgentSocketPath":
            suggest = "ssh_agent_socket_path"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in Connection. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        Connection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        Connection.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        host: Optional[builtins.str] = None,
        host_key: Optional[builtins.str] = None,
        password: Optional[builtins.str] = None,
        per_dial_timeout: Optional[builtins.int] = None,
        port: Optional[builtins.float] = None,
        private_key: Optional[builtins.str] = None,
        private_key_password: Optional[builtins.str] = None,
        ssh_agent: Optional[builtins.bool] = None,
        ssh_agent_socket_path: Optional[builtins.str] = None,
        user: Optional[builtins.str] = None,
    ):
        """
        Instructions for how to connect to a remote endpoint.
        :param builtins.str host: The address of the resource to connect to.
        :param builtins.str password: The password we should use for the connection.
        :param builtins.float port: The port to connect to. Defaults to 22.
        :param builtins.str private_key: The contents of an SSH key to use for the
               connection. This takes preference over the password if provided.
        :param builtins.str user: The user that we should use for the connection.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if host_key is not None:
            pulumi.set(__self__, "host_key", host_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if per_dial_timeout is not None:
            pulumi.set(__self__, "per_dial_timeout", per_dial_timeout)
        if port is None:
            port = 22
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)
        if ssh_agent is not None:
            pulumi.set(__self__, "ssh_agent", ssh_agent)
        if ssh_agent_socket_path is not None:
            pulumi.set(__self__, "ssh_agent_socket_path", ssh_agent_socket_path)
        if user is None:
            user = "root"
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        The address of the resource to connect to.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hostKey")
    def host_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "host_key")

    @property
    @pulumi.getter
    def password(self) -> Optional[builtins.str]:
        """
        The password we should use for the connection.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="perDialTimeout")
    def per_dial_timeout(self) -> Optional[builtins.int]:
        return pulumi.get(self, "per_dial_timeout")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.float]:
        """
        The port to connect to. Defaults to 22.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[builtins.str]:
        """
        The contents of an SSH key to use for the
        connection. This takes preference over the password if provided.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[builtins.str]:
        return pulumi.get(self, "private_key_password")

    @property
    @pulumi.getter(name="sshAgent")
    def ssh_agent(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ssh_agent")

    @property
    @pulumi.getter(name="sshAgentSocketPath")
    def ssh_agent_socket_path(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ssh_agent_socket_path")

    @property
    @pulumi.getter
    def user(self) -> Optional[builtins.str]:
        """
        The user that we should use for the connection.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ExecCommand(dict):
    def __init__(
        __self__,
        *,
        command: Sequence[builtins.str],
        dir: Optional[builtins.str] = None,
        environment: Optional[Mapping[str, builtins.str]] = None,
        stdin: Optional[builtins.str] = None,
    ):
        """
        :param Sequence[builtins.str] command: List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        :param builtins.str dir: Directory path to chdir to before executing the command. Defaults to the
               default working directory for the SSH user and session, usually the user's
               home.
        :param Mapping[str, builtins.str] environment: Key-value pairs of environment variables to pass to the process. These are
               merged with any system-wide environment variables.
        :param builtins.str stdin: Pass a string to the command's process as standard in.
        """
        pulumi.set(__self__, "command", command)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)

    @property
    @pulumi.getter
    def command(self) -> Sequence[builtins.str]:
        """
        List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def dir(self) -> Optional[builtins.str]:
        """
        Directory path to chdir to before executing the command. Defaults to the
        default working directory for the SSH user and session, usually the user's
        home.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Key-value pairs of environment variables to pass to the process. These are
        merged with any system-wide environment variables.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[builtins.str]:
        """
        Pass a string to the command's process as standard in.
        """
        return pulumi.get(self, "stdin")


@pulumi.output_type
class FileStatFileMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDir":
            suggest = "is_dir"
        elif key == "isRegular":
            suggest = "is_regular"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in FileStatFileMode. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        FileStatFileMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        FileStatFileMode.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        int: builtins.int,
        is_dir: builtins.bool,
        is_regular: builtins.bool,
        octal: builtins.str,
        string: builtins.str,
    ):
        pulumi.set(__self__, "int", int)
        pulumi.set(__self__, "is_dir", is_dir)
        pulumi.set(__self__, "is_regular", is_regular)
        pulumi.set(__self__, "octal", octal)
        pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def int(self) -> builtins.int:
        return pulumi.get(self, "int")

    @property
    @pulumi.getter(name="isDir")
    def is_dir(self) -> builtins.bool:
        return pulumi.get(self, "is_dir")

    @property
    @pulumi.getter(name="isRegular")
    def is_regular(self) -> builtins.bool:
        return pulumi.get(self, "is_regular")

    @property
    @pulumi.getter
    def octal(self) -> builtins.str:
        return pulumi.get(self, "octal")

    @property
    @pulumi.getter
    def string(self) -> builtins.str:
        return pulumi.get(self, "string")


@pulumi.output_type
class FileStatState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTime":
            suggest = "access_time"
        elif key == "baseName":
            suggest = "base_name"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "fileMode":
            suggest = "file_mode"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "modifiedTime":
            suggest = "modified_time"
        elif key == "sha256Checksum":
            suggest = "sha256_checksum"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in FileStatState. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        FileStatState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        FileStatState.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        exists: builtins.bool,
        access_time: Optional[builtins.str] = None,
        base_name: Optional[builtins.str] = None,
        create_time: Optional[builtins.str] = None,
        dev: Optional[builtins.int] = None,
        file_mode: Optional["outputs.FileStatFileMode"] = None,
        gid: Optional[builtins.int] = None,
        group_name: Optional[builtins.str] = None,
        inode: Optional[builtins.int] = None,
        modified_time: Optional[builtins.str] = None,
        nlink: Optional[builtins.int] = None,
        sha256_checksum: Optional[builtins.str] = None,
        size: Optional[builtins.int] = None,
        uid: Optional[builtins.int] = None,
        user_name: Optional[builtins.str] = None,
    ):
        pulumi.set(__self__, "exists", exists)
        if access_time is not None:
            pulumi.set(__self__, "access_time", access_time)
        if base_name is not None:
            pulumi.set(__self__, "base_name", base_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if dev is not None:
            pulumi.set(__self__, "dev", dev)
        if file_mode is not None:
            pulumi.set(__self__, "file_mode", file_mode)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if inode is not None:
            pulumi.set(__self__, "inode", inode)
        if modified_time is not None:
            pulumi.set(__self__, "modified_time", modified_time)
        if nlink is not None:
            pulumi.set(__self__, "nlink", nlink)
        if sha256_checksum is not None:
            pulumi.set(__self__, "sha256_checksum", sha256_checksum)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def exists(self) -> builtins.bool:
        return pulumi.get(self, "exists")

    @property
    @pulumi.getter(name="accessTime")
    def access_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "access_time")

    @property
    @pulumi.getter(name="baseName")
    def base_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "base_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def dev(self) -> Optional[builtins.int]:
        return pulumi.get(self, "dev")

    @property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional["outputs.FileStatFileMode"]:
        return pulumi.get(self, "file_mode")

    @property
    @pulumi.getter
    def gid(self) -> Optional[builtins.int]:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def inode(self) -> Optional[builtins.int]:
        return pulumi.get(self, "inode")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> Optional[builtins.str]:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def nlink(self) -> Optional[builtins.int]:
        return pulumi.get(self, "nlink")

    @property
    @pulumi.getter(name="sha256Checksum")
    def sha256_checksum(self) -> Optional[builtins.str]:
        return pulumi.get(self, "sha256_checksum")

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def uid(self) -> Optional[builtins.int]:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ResourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteUnreachable":
            suggest = "delete_unreachable"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in ResourceConfig. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        ResourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        ResourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        delete_unreachable: Optional[builtins.bool] = None,
        parallel: Optional[builtins.int] = None,
    ):
        if delete_unreachable is not None:
            pulumi.set(__self__, "delete_unreachable", delete_unreachable)
        if parallel is not None:
            pulumi.set(__self__, "parallel", parallel)

    @property
    @pulumi.getter(name="deleteUnreachable")
    def delete_unreachable(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "delete_unreachable")

    @property
    @pulumi.getter
    def parallel(self) -> Optional[builtins.int]:
        return pulumi.get(self, "parallel")


@pulumi.output_type
class TriggersOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastChanged":
            suggest = "last_changed"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in TriggersOutput. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        TriggersOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        TriggersOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        last_changed: builtins.str,
        refresh: Optional[Sequence[Any]] = None,
        replace: Optional[Sequence[Any]] = None,
    ):
        """
        :param builtins.str last_changed: RFC 3339 timestamp of when this resource last changed. Use this property
               to chain into other resources' `refresh` and `replace` triggers.
        :param Sequence[Any] refresh: Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
               any value in this list changes.
        :param Sequence[Any] replace: Completely delete and replace the resource if any value in this list
               changes.
        """
        pulumi.set(__self__, "last_changed", last_changed)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="lastChanged")
    def last_changed(self) -> builtins.str:
        """
        RFC 3339 timestamp of when this resource last changed. Use this property
        to chain into other resources' `refresh` and `replace` triggers.
        """
        return pulumi.get(self, "last_changed")

    @property
    @pulumi.getter
    def refresh(self) -> Optional[Sequence[Any]]:
        """
        Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
        any value in this list changes.
        """
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def replace(self) -> Optional[Sequence[Any]]:
        """
        Completely delete and replace the resource if any value in this list
        changes.
        """
        return pulumi.get(self, "replace")
