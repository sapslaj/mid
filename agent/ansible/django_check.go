// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module is a wrapper for the execution of `django-admin check`.
const DjangoCheckName = "django_check"

// Message level that will trigger failure.
// Default is the Django default value. Check the documentation for the version
// being used.
type DjangoCheckFailLevel string

const (
	DjangoCheckFailLevelCritical DjangoCheckFailLevel = "CRITICAL"
	DjangoCheckFailLevelError    DjangoCheckFailLevel = "ERROR"
	DjangoCheckFailLevelWarning  DjangoCheckFailLevel = "WARNING"
	DjangoCheckFailLevelInfo     DjangoCheckFailLevel = "INFO"
	DjangoCheckFailLevelDebug    DjangoCheckFailLevel = "DEBUG"
)

func OptionalDjangoCheckFailLevel[T interface {
	*DjangoCheckFailLevel | DjangoCheckFailLevel | *string | string
}](s T) *DjangoCheckFailLevel {
	switch v := any(s).(type) {
	case *DjangoCheckFailLevel:
		return v
	case DjangoCheckFailLevel:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DjangoCheckFailLevel(*v)
		return &val
	case string:
		val := DjangoCheckFailLevel(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Specifies the amount of notification and debug information in the output of
// `django-admin`.
type DjangoCheckVerbosity int

const (
	DjangoCheckVerbosity0 DjangoCheckVerbosity = 0
	DjangoCheckVerbosity1 DjangoCheckVerbosity = 1
	DjangoCheckVerbosity2 DjangoCheckVerbosity = 2
	DjangoCheckVerbosity3 DjangoCheckVerbosity = 3
)

func OptionalDjangoCheckVerbosity[T interface {
	*DjangoCheckVerbosity | DjangoCheckVerbosity | *int | int
}](s T) *DjangoCheckVerbosity {
	switch v := any(s).(type) {
	case *DjangoCheckVerbosity:
		return v
	case DjangoCheckVerbosity:
		return &v
	case *int:
		if v == nil {
			return nil
		}
		val := DjangoCheckVerbosity(*v)
		return &val
	case int:
		val := DjangoCheckVerbosity(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `django_check` Ansible module.
type DjangoCheckParameters struct {
	// Specify databases to run checks against.
	// If not specified, Django will not run database tests.
	Database *[]string `json:"database,omitempty"`

	// Include additional checks relevant in a deployment setting.
	// default: false
	Deploy *bool `json:"deploy,omitempty"`

	// Message level that will trigger failure.
	// Default is the Django default value. Check the documentation for the version
	// being used.
	FailLevel *DjangoCheckFailLevel `json:"fail_level,omitempty"`

	// Restrict checks to specific tags.
	Tags *[]string `json:"tags,omitempty"`

	// Restrict checks to specific applications.
	// Default is to check all applications.
	Apps *[]string `json:"apps,omitempty"`

	// Use the the Python interpreter from this virtual environment.
	// Pass the path to the root of the virtualenv, not the `bin/` directory nor
	// the `python` executable.
	Venv *string `json:"venv,omitempty"`

	// Specifies the settings module to use.
	// The value will be passed as is to the `--settings` argument in `django-
	// admin`.
	Settings string `json:"settings"`

	// Adds the given filesystem path to the Python import search path.
	// The value will be passed as is to the `--pythonpath` argument in `django-
	// admin`.
	Pythonpath *string `json:"pythonpath,omitempty"`

	// Provides a full stack trace in the output when a `CommandError` is raised.
	Traceback *bool `json:"traceback,omitempty"`

	// Specifies the amount of notification and debug information in the output of
	// `django-admin`.
	Verbosity *DjangoCheckVerbosity `json:"verbosity,omitempty"`

	// Skips running system checks prior to running the command.
	SkipChecks *bool `json:"skip_checks,omitempty"`
}

// Wrap the `DjangoCheckParameters into an `rpc.RPCCall`.
func (p *DjangoCheckParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DjangoCheckName,
			Args: args,
		},
	}, nil
}

// Return values for the `django_check` Ansible module.
type DjangoCheckReturn struct {
	AnsibleCommonReturns

	// Command-line execution information.
	RunInfo *map[string]any `json:"run_info,omitempty"`

	// Version of Django.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DjangoCheckReturn`
func DjangoCheckReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DjangoCheckReturn, error) {
	return rpc.AnyToJSONT[DjangoCheckReturn](r.Result.Result)
}
