// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Gather facts on processes listening on TCP and UDP ports using the `netstat`
// or `ss` commands.
// This module currently supports Linux only.
const ListenPortsFactsName = "listen_ports_facts"

// Override which command to use for fetching listen ports.
// By default module will use first found supported command on the system (in
// alphanumerical order).
type ListenPortsFactsCommand string

const (
	ListenPortsFactsCommandNetstat ListenPortsFactsCommand = "netstat"
	ListenPortsFactsCommandSs      ListenPortsFactsCommand = "ss"
)

func OptionalListenPortsFactsCommand[T interface {
	*ListenPortsFactsCommand | ListenPortsFactsCommand | *string | string
}](s T) *ListenPortsFactsCommand {
	switch v := any(s).(type) {
	case *ListenPortsFactsCommand:
		return v
	case ListenPortsFactsCommand:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := ListenPortsFactsCommand(*v)
		return &val
	case string:
		val := ListenPortsFactsCommand(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `listen_ports_facts` Ansible module.
type ListenPortsFactsParameters struct {
	// Override which command to use for fetching listen ports.
	// By default module will use first found supported command on the system (in
	// alphanumerical order).
	Command *ListenPortsFactsCommand `json:"command,omitempty"`

	// Show both listening and non-listening sockets (for TCP this means
	// established connections).
	// Adds the return values R`ansible_facts.tcp_listen[].state`,
	// R`ansible_facts.udp_listen[].state`,
	// R`ansible_facts.tcp_listen[].foreign_address`, and
	// R`ansible_facts.udp_listen[].foreign_address` to the returned facts.
	// default: false
	IncludeNonListening *bool `json:"include_non_listening,omitempty"`
}

// Wrap the `ListenPortsFactsParameters into an `rpc.RPCCall`.
func (p *ListenPortsFactsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: ListenPortsFactsName,
			Args: args,
		},
	}, nil
}

// Return values for the `listen_ports_facts` Ansible module.
type ListenPortsFactsReturn struct {
	AnsibleCommonReturns

	// Dictionary containing details of TCP and UDP ports with listening servers.
	AnsibleFacts *any `json:"ansible_facts,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `ListenPortsFactsReturn`
func ListenPortsFactsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (ListenPortsFactsReturn, error) {
	return rpc.AnyToJSONT[ListenPortsFactsReturn](r.Result.Result)
}
