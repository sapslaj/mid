// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages a Django application using the `manage.py` application frontend to
// `django-admin`. With the `virtualenv` parameter, all management commands will
// be executed by the given `virtualenv` installation.
const DjangoManageName = "django_manage"

// Parameters for the `django_manage` Ansible module.
type DjangoManageParameters struct {
	// The name of the Django management command to run. The commands listed below
	// are built in this module and have some basic parameter validation.
	// `collectstatic` - Collects the static files into `STATIC_ROOT`.
	// `createcachetable` - Creates the cache tables for use with the database
	// cache backend.
	// `flush` - Removes all data from the database.
	// `loaddata` - Searches for and loads the contents of the named `fixtures`
	// into the database.
	// `migrate` - Synchronizes the database state with models and migrations.
	// `test` - Runs tests for all installed apps.
	// Other commands can be entered, but will fail if they are unknown to Django.
	// Other commands that may prompt for user input should be run with the
	// `--noinput` flag.
	// Support for the values `cleanup`, `syncdb`, `validate` was removed in
	// community.general 9.0.0. See note about supported versions of Django.
	Command string `json:"command"`

	// The path to the root of the Django application where `manage.py` lives.
	ProjectPath string `json:"project_path"`

	// The Python path to the application's settings module, such as
	// `myapp.settings`.
	Settings *string `json:"settings,omitempty"`

	// A directory to add to the Python path. Typically used to include the
	// settings module if it is located external to the application directory.
	// This would be equivalent to adding `pythonpath`'s value to the `PYTHONPATH`
	// environment variable.
	Pythonpath *string `json:"pythonpath,omitempty"`

	// An optional path to a `virtualenv` installation to use while running the
	// manage application.
	// The virtual environment must exist, otherwise the module will fail.
	Virtualenv *string `json:"virtualenv,omitempty"`

	// A list of space-delimited apps to target. Used by the `test` command.
	Apps *string `json:"apps,omitempty"`

	// The name of the table used for database-backed caching. Used by the
	// `createcachetable` command.
	CacheTable *string `json:"cache_table,omitempty"`

	// Clear the existing files before trying to copy or link the original file.
	// Used only with the `collectstatic` command. The `--noinput` argument will be
	// added automatically.
	// default: false
	Clear *bool `json:"clear,omitempty"`

	// The database to target. Used by the `createcachetable`, `flush`, `loaddata`,
	// `syncdb`, and `migrate` commands.
	Database *string `json:"database,omitempty"`

	// Fail the command immediately if a test fails. Used by the `test` command.
	// default: false
	Failfast *bool `json:"failfast,omitempty"`

	// A space-delimited list of fixture file names to load in the database.
	// `Required` by the `loaddata` command.
	Fixtures *string `json:"fixtures,omitempty"`

	// Will skip over out-of-order missing migrations, you can only use this
	// parameter with `migrate` command.
	Skip *bool `json:"skip,omitempty"`

	// Will run out-of-order or missing migrations as they are not rollback
	// migrations, you can only use this parameter with `migrate` command.
	Merge *bool `json:"merge,omitempty"`

	// Will create links to the files instead of copying them, you can only use
	// this parameter with `collectstatic` command.
	Link *bool `json:"link,omitempty"`

	// Controls the test runner class that is used to execute tests.
	// This parameter is passed as-is to `manage.py`.
	Testrunner *string `json:"testrunner,omitempty"`
}

// Wrap the `DjangoManageParameters into an `rpc.RPCCall`.
func (p DjangoManageParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DjangoManageName,
			Args: args,
		},
	}, nil
}

// Return values for the `django_manage` Ansible module.
type DjangoManageReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `DjangoManageReturn`
func DjangoManageReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DjangoManageReturn, error) {
	return rpc.AnyToJSONT[DjangoManageReturn](r.Result.Result)
}
