// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module has two possible ways of operation.
// If 7zip is installed on the system, this module extracts files from an ISO
// into a temporary directory and copies files to a given destination, if
// needed.
// If the user has mount-capabilities (CAP_SYS_ADMIN on Linux) this module
// mounts the ISO image to a temporary location, and copies files to a given
// destination, if needed.
const IsoExtractName = "iso_extract"

// Parameters for the `iso_extract` Ansible module.
type IsoExtractParameters struct {
	// The ISO image to extract files from.
	Image string `json:"image"`

	// The destination directory to extract files to.
	Dest string `json:"dest"`

	// A list of files to extract from the image.
	// Extracting directories does not work.
	Files []string `json:"files"`

	// If `true`, which will replace the remote file when contents are different
	// than the source.
	// If `false`, the file will only be extracted and copied if the destination
	// does not already exist.
	// default: true
	Force *bool `json:"force,omitempty"`

	// The path to the `7z` executable to use for extracting files from the ISO.
	// If not provided, it will assume the value `7z`.
	Executable *string `json:"executable,omitempty"`

	// Password used to decrypt files from the ISO.
	// Will only be used if 7z is used.
	// The password is used as a command line argument to 7z. This is a `potential
	// security risk` that allows passwords to be revealed if someone else can list
	// running processes on the same machine in the right moment.
	Password *string `json:"password,omitempty"`
}

// Wrap the `IsoExtractParameters into an `rpc.RPCCall`.
func (p IsoExtractParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: IsoExtractName,
			Args: args,
		},
	}, nil
}

// Return values for the `iso_extract` Ansible module.
type IsoExtractReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `IsoExtractReturn`
func IsoExtractReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (IsoExtractReturn, error) {
	return rpc.AnyToJSONT[IsoExtractReturn](r.Result.Result)
}
