// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manage Rust packages with cargo.
const CargoName = "cargo"

// The state of the Rust package.
type CargoState string

const (
	CargoStatePresent CargoState = "present"
	CargoStateAbsent  CargoState = "absent"
	CargoStateLatest  CargoState = "latest"
)

// Convert a supported type to an optional (pointer) CargoState
func OptionalCargoState[T interface {
	*CargoState | CargoState | *string | string
}](s T) *CargoState {
	switch v := any(s).(type) {
	case *CargoState:
		return v
	case CargoState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := CargoState(*v)
		return &val
	case string:
		val := CargoState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `cargo` Ansible module.
type CargoParameters struct {
	// Path to the `cargo` installed in the system.
	// If not specified, the module will look `cargo` in `PATH`.
	Executable *string `json:"executable,omitempty"`

	// The name of a Rust package to install.
	Name []string `json:"name"`

	// The base path where to install the Rust packages. Cargo automatically
	// appends `/bin`. In other words, `/usr/local` will become `/usr/local/bin`.
	Path *string `json:"path,omitempty"`

	// The version to install. If `name` contains multiple values, the module will
	// try to install all of them in this version.
	Version *string `json:"version,omitempty"`

	// Install with locked dependencies.
	// This is only used when installing packages.
	// default: false
	Locked *bool `json:"locked,omitempty"`

	// The state of the Rust package.
	// default: CargoStatePresent
	State *CargoState `json:"state,omitempty"`

	// Path to the source directory to install the Rust package from.
	// This is only used when installing packages.
	Directory *string `json:"directory,omitempty"`
}

// Wrap the `CargoParameters into an `rpc.RPCCall`.
func (p CargoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: CargoName,
			Args: args,
		},
	}, nil
}

// Return values for the `cargo` Ansible module.
type CargoReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `CargoReturn`
func CargoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (CargoReturn, error) {
	return rpc.AnyToJSONT[CargoReturn](r.Result.Result)
}
