// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Sends logs to LogEntries in realtime.
const LogentriesName = "logentries"

// Following state of the log.
type LogentriesState string

const (
	LogentriesStatePresent    LogentriesState = "present"
	LogentriesStateAbsent     LogentriesState = "absent"
	LogentriesStateFollowed   LogentriesState = "followed"
	LogentriesStateUnfollowed LogentriesState = "unfollowed"
)

// Convert a supported type to an optional (pointer) LogentriesState
func OptionalLogentriesState[T interface {
	*LogentriesState | LogentriesState | *string | string
}](s T) *LogentriesState {
	switch v := any(s).(type) {
	case *LogentriesState:
		return v
	case LogentriesState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := LogentriesState(*v)
		return &val
	case string:
		val := LogentriesState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `logentries` Ansible module.
type LogentriesParameters struct {
	// Path to a log file.
	Path string `json:"path"`

	// Following state of the log.
	// default: LogentriesStatePresent
	State *LogentriesState `json:"state,omitempty"`

	// Name of the log.
	Name *string `json:"name,omitempty"`

	// Type of the log.
	Logtype *string `json:"logtype,omitempty"`
}

// Wrap the `LogentriesParameters into an `rpc.RPCCall`.
func (p LogentriesParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: LogentriesName,
			Args: args,
		},
	}, nil
}

// Return values for the `logentries` Ansible module.
type LogentriesReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `LogentriesReturn`
func LogentriesReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (LogentriesReturn, error) {
	return cast.AnyToJSONT[LogentriesReturn](r.Result.Result)
}
