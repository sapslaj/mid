#!/usr/bin/env python3
from io import StringIO
import multiprocessing
import os
from typing import Any
from importlib import import_module

import yaml


def pascalcased(s: str) -> str:
    return "".join([word.capitalize() for word in s.split("_")])


def yaml_loads(data: Any) -> Any:
    yaml.safe_load(StringIO(data))
    return


def scalar_type_ansible_to_go(t: str) -> str:
    match t:
        case "str":
            return "string"
        case "path":
            return "string"
        case "bool":
            return "bool"
        case "int":
            return "int"
        case "raw":
            # TODO: should this be a string instead or something?
            return "any"
        case "float":
            return "float64"
        case _:
            raise Exception(f"unknown type '{t}'")


def composite_type_ansible_to_go(obj: Any) -> str:
    typ = obj.get("type", "str")
    match typ:
        case "complex":
            # TODO: handle this better
            return "any"
        case "list":
            elements = obj.get("elements", None)
            if not elements:
                return "[]any"
            return "[]" + scalar_type_ansible_to_go(elements)
        case "dict":
            if obj.get("elements", None) is not None:
                raise Exception("dict has subelements???")
            suboptions = obj.get("suboptions", None)
            if not suboptions:
                return "map[string]any"
            result = "struct {"
            for key, value in suboptions.items():
                required = value.get("required", False)
                result += "\t\t"
                result += pascalcased(key)
                result += " "
                if not required:
                    result += "*"
                result += composite_type_ansible_to_go(value)
                result += ' `json:"'
                result += key
                if not required:
                    result += ",omitempty"
                result += '"`\n'

            result += "\t}"
            return result
        case _:
            return scalar_type_ansible_to_go(typ)


def process_module_file(module_file: str):
    if module_file.startswith("_"):
        return
    name = os.path.splitext(module_file)[0]
    print(name)

    module_fqn = f"ansible.modules.{name}"

    module = import_module(module_fqn)
    documentation = yaml.safe_load(StringIO(getattr(module, "DOCUMENTATION")))
    returns = yaml.safe_load(StringIO(getattr(module, "RETURN", "{}")))
    if returns is None:
        returns = dict()

    pascalcase_name = pascalcased(name)

    with open(
        os.path.join(os.path.dirname(__file__), "..", "agent", "ansible", f"{name}.go"),
        "w",
    ) as f:
        f.write("// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT\n")
        f.write("package ansible\n\n")
        f.write("import (\n")
        f.write('\t"github.com/sapslaj/mid/agent/rpc"\n')
        f.write(")\n\n")
        f.write(f'const {pascalcase_name}Name = "{name}"\n\n')
        f.write(f"type {pascalcase_name}Parameters struct {'{'}\n")
        for key, value in documentation["options"].items():
            required = value.get("required", False)
            f.write("\t")
            f.write(pascalcased(key))
            f.write(" ")
            if not required:
                f.write("*")
            f.write(composite_type_ansible_to_go(value))
            f.write(' `json:"')
            f.write(key)
            if not required:
                f.write(",omitempty")
            f.write('"`\n')
        f.write("}\n\n")
        f.write(
            f"func (p *{pascalcase_name}Parameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {'{'}\n"
        )
        f.write("\targs, err := rpc.AnyToJSONT[map[string]any](p)\n")
        f.write("\tif err != nil {\n")
        f.write("\t\treturn rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err\n")
        f.write("\t}\n")
        f.write("\treturn rpc.RPCCall[rpc.AnsibleExecuteArgs]{\n")
        f.write("\t\tRPCFunction: rpc.RPCAnsibleExecute,\n")
        f.write("\t\tArgs: rpc.AnsibleExecuteArgs{\n")
        f.write(f"\t\t\tName: {pascalcase_name}Name,\n")
        f.write("\t\t\tArgs: args,\n")
        f.write("\t\t},\n")
        f.write("\t}, nil\n")
        f.write("}\n\n")
        f.write(f"type {pascalcase_name}Return struct {'{'}\n")
        f.write("\tAnsibleCommonReturns\n")
        for key, value in returns.items():
            f.write("\t")
            f.write(pascalcased(key))
            f.write(" *")
            f.write(composite_type_ansible_to_go(value))
            f.write(' `json:"')
            f.write(key)
            f.write(",omitempty")
            f.write('"`\n')
        f.write("}\n\n")
        f.write(
            f"func {pascalcase_name}ReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) ({pascalcase_name}Return, error) {'{'}\n"
        )
        f.write(f"\treturn rpc.AnyToJSONT[{pascalcase_name}Return](r.Result.Result)\n")
        f.write("}\n")


def main():
    module_files = os.listdir(
        os.path.join(os.path.dirname(__file__), "..", "ansible", "modules")
    )
    with multiprocessing.Pool(os.process_cpu_count()) as p:
        p.map(process_module_file, module_files)


if __name__ == "__main__":
    main()
