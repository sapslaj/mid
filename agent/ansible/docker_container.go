// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manage the life cycle of Docker containers.
// Supports check mode. Run with `--check` and `--diff` to view config
// difference and list of actions to be taken.
const DockerContainerName = "docker_container"

// Specify the cgroup namespace mode for the container.
// The Docker CLI calls this simply `cgroupns`.
type DockerContainerCgroupnsMode string

const (
	DockerContainerCgroupnsModeHost    DockerContainerCgroupnsMode = "host"
	DockerContainerCgroupnsModePrivate DockerContainerCgroupnsMode = "private"
)

// Convert a supported type to an optional (pointer) DockerContainerCgroupnsMode
func OptionalDockerContainerCgroupnsMode[T interface {
	*DockerContainerCgroupnsMode | DockerContainerCgroupnsMode | *string | string
}](s T) *DockerContainerCgroupnsMode {
	switch v := any(s).(type) {
	case *DockerContainerCgroupnsMode:
		return v
	case DockerContainerCgroupnsMode:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerCgroupnsMode(*v)
		return &val
	case string:
		val := DockerContainerCgroupnsMode(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// In older versions of this module, various module options used to have default
// values. This caused problems with containers which use different values for
// these options.
// The default value is now `no_defaults`. To restore the old behavior, set it
// to `compatibility`, which will ensure that the default values are used when
// the values are not explicitly specified by the user.
// This affects the `auto_remove`, `detach`, `init`, `interactive`, `memory`,
// `paused`, `privileged`, `read_only`, and `tty` options.
type DockerContainerContainerDefaultBehavior string

const (
	DockerContainerContainerDefaultBehaviorCompatibility DockerContainerContainerDefaultBehavior = "compatibility"
	DockerContainerContainerDefaultBehaviorNoDefaults    DockerContainerContainerDefaultBehavior = "no_defaults"
)

// Convert a supported type to an optional (pointer) DockerContainerContainerDefaultBehavior
func OptionalDockerContainerContainerDefaultBehavior[T interface {
	*DockerContainerContainerDefaultBehavior | DockerContainerContainerDefaultBehavior | *string | string
}](s T) *DockerContainerContainerDefaultBehavior {
	switch v := any(s).(type) {
	case *DockerContainerContainerDefaultBehavior:
		return v
	case DockerContainerContainerDefaultBehavior:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerContainerDefaultBehavior(*v)
		return &val
	case string:
		val := DockerContainerContainerDefaultBehavior(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The default behavior for `command` (when provided as a list) and `entrypoint`
// is to convert them to strings without considering shell quoting rules. (For
// comparing idempotency, the resulting string is split considering shell
// quoting rules).
// Also, setting `command` to an empty list of string, and setting `entrypoint`
// to an empty list will be handled as if these options are not specified. This
// is different from idempotency handling for other container-config related
// options.
// When this is set to `compatibility`, which was the default until
// community.docker 3.0.0, the current behavior will be kept.
// When this is set to `correct`, these options are kept as lists, and an empty
// value or empty list will be handled correctly for idempotency checks. This
// has been the default since community.docker 3.0.0.
type DockerContainerCommandHandling string

const (
	DockerContainerCommandHandlingCompatibility DockerContainerCommandHandling = "compatibility"
	DockerContainerCommandHandlingCorrect       DockerContainerCommandHandling = "correct"
)

// Convert a supported type to an optional (pointer) DockerContainerCommandHandling
func OptionalDockerContainerCommandHandling[T interface {
	*DockerContainerCommandHandling | DockerContainerCommandHandling | *string | string
}](s T) *DockerContainerCommandHandling {
	switch v := any(s).(type) {
	case *DockerContainerCommandHandling:
		return v
	case DockerContainerCommandHandling:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerCommandHandling(*v)
		return &val
	case string:
		val := DockerContainerCommandHandling(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Determines which image to use for idempotency checks that depend on image
// parameters.
// The default, `desired-image`, will use the image that is provided to the
// module with the `image` parameter.
// `current-image` will use the image that the container is currently using, if
// the container exists. It falls back to the image that is provided in case the
// container does not yet exist.
// This affects the `env`, `env_file`, `exposed_ports`, `labels`, and `volumes`
// options.
type DockerContainerImageComparison string

const (
	DockerContainerImageComparisonDesiredImage DockerContainerImageComparison = "desired-image"
	DockerContainerImageComparisonCurrentImage DockerContainerImageComparison = "current-image"
)

// Convert a supported type to an optional (pointer) DockerContainerImageComparison
func OptionalDockerContainerImageComparison[T interface {
	*DockerContainerImageComparison | DockerContainerImageComparison | *string | string
}](s T) *DockerContainerImageComparison {
	switch v := any(s).(type) {
	case *DockerContainerImageComparison:
		return v
	case DockerContainerImageComparison:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerImageComparison(*v)
		return &val
	case string:
		val := DockerContainerImageComparison(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// How to handle labels inherited from the image that are not set explicitly.
// When `ignore`, labels that are present in the image but not specified in
// `labels` will be ignored. This is useful to avoid having to specify the image
// labels in `labels` while keeping labels `comparisons` `strict`.
// When `fail`, if there are labels present in the image which are not set from
// `labels`, the module will fail. This prevents introducing unexpected labels
// from the base image.
// `Warning:` This option is ignored unless `labels: strict` or `*: strict` is
// specified in the `comparisons` option.
type DockerContainerImageLabelMismatch string

const (
	DockerContainerImageLabelMismatchIgnore DockerContainerImageLabelMismatch = "ignore"
	DockerContainerImageLabelMismatchFail   DockerContainerImageLabelMismatch = "fail"
)

// Convert a supported type to an optional (pointer) DockerContainerImageLabelMismatch
func OptionalDockerContainerImageLabelMismatch[T interface {
	*DockerContainerImageLabelMismatch | DockerContainerImageLabelMismatch | *string | string
}](s T) *DockerContainerImageLabelMismatch {
	switch v := any(s).(type) {
	case *DockerContainerImageLabelMismatch:
		return v
	case DockerContainerImageLabelMismatch:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerImageLabelMismatch(*v)
		return &val
	case string:
		val := DockerContainerImageLabelMismatch(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Determines what the module does if the image matches, but the image name in
// the container's configuration does not match the image name provided to the
// module.
// This is ignored if `image: ignore` is set in `comparisons`.
// If set to `recreate` (default) the container will be recreated.
// If set to `ignore` the container will not be recreated because of this. It
// might still get recreated for other reasons. This has been the default
// behavior of the module for a long time, but might not be what users expect.
// The default changed from `ignore` to `recreate` in community.docker 4.0.0.
type DockerContainerImageNameMismatch string

const (
	DockerContainerImageNameMismatchRecreate DockerContainerImageNameMismatch = "recreate"
	DockerContainerImageNameMismatchIgnore   DockerContainerImageNameMismatch = "ignore"
)

// Convert a supported type to an optional (pointer) DockerContainerImageNameMismatch
func OptionalDockerContainerImageNameMismatch[T interface {
	*DockerContainerImageNameMismatch | DockerContainerImageNameMismatch | *string | string
}](s T) *DockerContainerImageNameMismatch {
	switch v := any(s).(type) {
	case *DockerContainerImageNameMismatch:
		return v
	case DockerContainerImageNameMismatch:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerImageNameMismatch(*v)
		return &val
	case string:
		val := DockerContainerImageNameMismatch(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Allows to adjust the behavior when `pull=always` or `pull=true` in check
// mode.
// Since the Docker daemon does not expose any functionality to test whether a
// pull will result in a changed image, the module by default acts like
// `pull=always` only results in a change when the image is not present.
// If set to `image_not_present` (default), only report changes in check mode
// when the image is not present.
// If set to `always`, always report changes in check mode.
type DockerContainerPullCheckModeBehavior string

const (
	DockerContainerPullCheckModeBehaviorImageNotPresent DockerContainerPullCheckModeBehavior = "image_not_present"
	DockerContainerPullCheckModeBehaviorAlways          DockerContainerPullCheckModeBehavior = "always"
)

// Convert a supported type to an optional (pointer) DockerContainerPullCheckModeBehavior
func OptionalDockerContainerPullCheckModeBehavior[T interface {
	*DockerContainerPullCheckModeBehavior | DockerContainerPullCheckModeBehavior | *string | string
}](s T) *DockerContainerPullCheckModeBehavior {
	switch v := any(s).(type) {
	case *DockerContainerPullCheckModeBehavior:
		return v
	case DockerContainerPullCheckModeBehavior:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerPullCheckModeBehavior(*v)
		return &val
	case string:
		val := DockerContainerPullCheckModeBehavior(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Container restart policy.
// Place quotes around `no` option.
type DockerContainerRestartPolicy string

const (
	DockerContainerRestartPolicyNo            DockerContainerRestartPolicy = "no"
	DockerContainerRestartPolicyOnFailure     DockerContainerRestartPolicy = "on-failure"
	DockerContainerRestartPolicyAlways        DockerContainerRestartPolicy = "always"
	DockerContainerRestartPolicyUnlessStopped DockerContainerRestartPolicy = "unless-stopped"
)

// Convert a supported type to an optional (pointer) DockerContainerRestartPolicy
func OptionalDockerContainerRestartPolicy[T interface {
	*DockerContainerRestartPolicy | DockerContainerRestartPolicy | *string | string
}](s T) *DockerContainerRestartPolicy {
	switch v := any(s).(type) {
	case *DockerContainerRestartPolicy:
		return v
	case DockerContainerRestartPolicy:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerRestartPolicy(*v)
		return &val
	case string:
		val := DockerContainerRestartPolicy(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// `absent` - A container matching the specified name will be stopped and
// removed. Use `force_kill` to kill the container rather than stopping it. Use
// `keep_volumes` to retain anonymous volumes associated with the removed
// container.
// `present` - Asserts the existence of a container matching the name and any
// provided configuration parameters. If no container matches the name, a
// container will be created. If a container matches the name but the provided
// configuration does not match, the container will be updated, if it can be. If
// it cannot be updated, it will be removed and re-created with the requested
// config.
// `started` - Asserts that the container is first `present`, and then if the
// container is not running moves it to a running state. Use `restart` to force
// a matching container to be stopped and restarted.
// `healthy` - Asserts that the container is `present` and `started`, and is
// actually healthy as well. This means that the conditions defined in
// `healthcheck` respectively in the image's `HEALTHCHECK` (`Docker reference
// for HEALTHCHECK, https://docs.docker.com/reference/dockerfile/#healthcheck`)
// are satisfied. The time waited can be controlled with `healthy_wait_timeout`.
// This state has been added in community.docker 3.11.0.
// `stopped` - Asserts that the container is first `present`, and then if the
// container is running moves it to a stopped state.
// To control what will be taken into account when comparing configuration, see
// the `comparisons` option. To avoid that the image version will be taken into
// account, you can also use the `image: ignore` in the `comparisons` option.
// Use the `recreate` option to always force re-creation of a matching
// container, even if it is running.
// If the container should be killed instead of stopped in case it needs to be
// stopped for recreation, or because `state` is `stopped`, please use the
// `force_kill` option. Use `keep_volumes` to retain anonymous volumes
// associated with a removed container.
// Use `keep_volumes` to retain anonymous volumes associated with a removed
// container.
type DockerContainerState string

const (
	DockerContainerStateAbsent  DockerContainerState = "absent"
	DockerContainerStatePresent DockerContainerState = "present"
	DockerContainerStateHealthy DockerContainerState = "healthy"
	DockerContainerStateStopped DockerContainerState = "stopped"
	DockerContainerStateStarted DockerContainerState = "started"
)

// Convert a supported type to an optional (pointer) DockerContainerState
func OptionalDockerContainerState[T interface {
	*DockerContainerState | DockerContainerState | *string | string
}](s T) *DockerContainerState {
	switch v := any(s).(type) {
	case *DockerContainerState:
		return v
	case DockerContainerState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerContainerState(*v)
		return &val
	case string:
		val := DockerContainerState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_container` Ansible module.
type DockerContainerParameters struct {
	// Enable auto-removal of the container on daemon side when the container's
	// process exits.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	AutoRemove *bool `json:"auto_remove,omitempty"`

	// Block IO (relative weight), between 10 and 1000.
	BlkioWeight *int `json:"blkio_weight,omitempty"`

	// List of capabilities to add to the container.
	// This is equivalent to `docker run --cap-add`, or the docker-compose option
	// `cap_add`.
	Capabilities *[]string `json:"capabilities,omitempty"`

	// List of capabilities to drop from the container.
	CapDrop *[]string `json:"cap_drop,omitempty"`

	// Specify the cgroup namespace mode for the container.
	// The Docker CLI calls this simply `cgroupns`.
	CgroupnsMode *DockerContainerCgroupnsMode `json:"cgroupns_mode,omitempty"`

	// Specify the parent cgroup for the container.
	CgroupParent *string `json:"cgroup_parent,omitempty"`

	// Use with `detach=false` to remove the container after successful execution.
	// default: false
	Cleanup *bool `json:"cleanup,omitempty"`

	// Command to execute when the container starts. A command may be either a
	// string or a list.
	// Prior to version 2.4, strings were split on commas.
	// See `command_handling` for differences in how strings and lists are handled.
	Command *any `json:"command,omitempty"`

	// Allows to specify how properties of existing containers are compared with
	// module options to decide whether the container should be recreated / updated
	// or not.
	// Only options which correspond to the state of a container as handled by the
	// Docker daemon can be specified, as well as `networks`.
	// Must be a dictionary specifying for an option one of the keys `strict`,
	// `ignore` and `allow_more_present`.
	// If `strict` is specified, values are tested for equality, and changes always
	// result in updating or restarting. If `ignore` is specified, changes are
	// ignored.
	// `allow_more_present` is allowed only for lists, sets and dicts. If it is
	// specified for lists or sets, the container will only be updated or restarted
	// if the module option contains a value which is not present in the
	// container's options. If the option is specified for a dict, the container
	// will only be updated or restarted if the module option contains a key which
	// is not present in the container's option, or if the value of a key present
	// differs.
	// The wildcard option `*` can be used to set one of the default values
	// `strict` or `ignore` to `all` comparisons which are not explicitly set to
	// other values.
	// See the examples for details.
	Comparisons *map[string]any `json:"comparisons,omitempty"`

	// In older versions of this module, various module options used to have
	// default values. This caused problems with containers which use different
	// values for these options.
	// The default value is now `no_defaults`. To restore the old behavior, set it
	// to `compatibility`, which will ensure that the default values are used when
	// the values are not explicitly specified by the user.
	// This affects the `auto_remove`, `detach`, `init`, `interactive`, `memory`,
	// `paused`, `privileged`, `read_only`, and `tty` options.
	// default: DockerContainerContainerDefaultBehaviorNoDefaults
	ContainerDefaultBehavior *DockerContainerContainerDefaultBehavior `json:"container_default_behavior,omitempty"`

	// The default behavior for `command` (when provided as a list) and
	// `entrypoint` is to convert them to strings without considering shell quoting
	// rules. (For comparing idempotency, the resulting string is split considering
	// shell quoting rules).
	// Also, setting `command` to an empty list of string, and setting `entrypoint`
	// to an empty list will be handled as if these options are not specified. This
	// is different from idempotency handling for other container-config related
	// options.
	// When this is set to `compatibility`, which was the default until
	// community.docker 3.0.0, the current behavior will be kept.
	// When this is set to `correct`, these options are kept as lists, and an empty
	// value or empty list will be handled correctly for idempotency checks. This
	// has been the default since community.docker 3.0.0.
	// default: DockerContainerCommandHandlingCorrect
	CommandHandling *DockerContainerCommandHandling `json:"command_handling,omitempty"`

	// Limit CPU CFS (Completely Fair Scheduler) period.
	// See `cpus` for an easier to use alternative.
	CpuPeriod *int `json:"cpu_period,omitempty"`

	// Limit CPU CFS (Completely Fair Scheduler) quota.
	// See `cpus` for an easier to use alternative.
	CpuQuota *int `json:"cpu_quota,omitempty"`

	// Specify how much of the available CPU resources a container can use.
	// A value of `1.5` means that at most one and a half CPU (core) will be used.
	Cpus *float64 `json:"cpus,omitempty"`

	// CPUs in which to allow execution.
	// For example `1,3` or `1-3`.
	CpusetCpus *string `json:"cpuset_cpus,omitempty"`

	// Memory nodes (MEMs) in which to allow execution `0-3` or `0,1`.
	CpusetMems *string `json:"cpuset_mems,omitempty"`

	// CPU shares (relative weight).
	CpuShares *int `json:"cpu_shares,omitempty"`

	// Define the default host IP to use.
	// Must be an empty string, an IPv4 address, or an IPv6 address.
	// With Docker 20.10.2 or newer, this should be set to an empty string (`""`)
	// to avoid the port bindings without an explicit IP address to only bind to
	// IPv4. See `https://github.com/ansible-
	// collections/community.docker/issues/70` for details.
	// By default, the module will try to auto-detect this value from the `bridge`
	// network's `com.docker.network.bridge.host_binding_ipv4` option. If it cannot
	// auto-detect it, it will fall back to `0.0.0.0`.
	DefaultHostIp *string `json:"default_host_ip,omitempty"`

	// Enable detached mode to leave the container running in background.
	// If disabled, the task will reflect the status of the container run (failed
	// if the command failed).
	// If `container_default_behavior=compatibility`, this option has a default of
	// `true`.
	Detach *bool `json:"detach,omitempty"`

	// List of host device bindings to add to the container.
	// Each binding is a mapping expressed in the format
	// `<path_on_host>:<path_in_container>:<cgroup_permissions>`.
	Devices *[]string `json:"devices,omitempty"`

	// List of device path and read rate (bytes per second) from device.
	DeviceReadBps *struct {
		Path string `json:"path"`
		Rate string `json:"rate"`
	} `json:"device_read_bps,omitempty"`

	// List of device and write rate (bytes per second) to device.
	DeviceWriteBps *struct {
		Path string `json:"path"`
		Rate string `json:"rate"`
	} `json:"device_write_bps,omitempty"`

	// List of device and read rate (IO per second) from device.
	DeviceReadIops *struct {
		Path string `json:"path"`
		Rate int    `json:"rate"`
	} `json:"device_read_iops,omitempty"`

	// List of device and write rate (IO per second) to device.
	DeviceWriteIops *struct {
		Path string `json:"path"`
		Rate int    `json:"rate"`
	} `json:"device_write_iops,omitempty"`

	// Allows to request additional resources, such as GPUs.
	DeviceRequests *struct {
		Capabilities *[][]any        `json:"capabilities,omitempty"`
		Count        *int            `json:"count,omitempty"`
		DeviceIds    *[]string       `json:"device_ids,omitempty"`
		Driver       *string         `json:"driver,omitempty"`
		Options      *map[string]any `json:"options,omitempty"`
	} `json:"device_requests,omitempty"`

	// List of cgroup rules to apply to the container.
	DeviceCgroupRules *[]string `json:"device_cgroup_rules,omitempty"`

	// List of DNS options.
	DnsOpts *[]string `json:"dns_opts,omitempty"`

	// List of custom DNS servers.
	DnsServers *[]string `json:"dns_servers,omitempty"`

	// List of custom DNS search domains.
	DnsSearchDomains *[]string `json:"dns_search_domains,omitempty"`

	// Container domainname.
	Domainname *string `json:"domainname,omitempty"`

	// Dictionary of key,value pairs.
	// Values which might be parsed as numbers, booleans or other types by the YAML
	// parser must be quoted (for example `"true"`) in order to avoid data loss.
	// Please note that if you are passing values in with Jinja2 templates, like
	// `"{{ value }}"`, you need to add `| string` to prevent Ansible to convert
	// strings such as `"true"` back to booleans. The correct way is to use `"{{
	// value | string }}"`.
	Env *map[string]any `json:"env,omitempty"`

	// Path to a file, present on the target, containing environment variables
	// `FOO=BAR`.
	// If variable also present in `env`, then the `env` value will override.
	EnvFile *string `json:"env_file,omitempty"`

	// Command that overwrites the default `ENTRYPOINT` of the image.
	// See `command_handling` for differences in how strings and lists are handled.
	Entrypoint *[]string `json:"entrypoint,omitempty"`

	// Dict of host-to-IP mappings, where each host name is a key in the
	// dictionary. Each host name will be added to the container's `/etc/hosts`
	// file.
	// Instead of an IP address, the special value `host-gateway` can also be used,
	// which resolves to the host's gateway IP and allows containers to connect to
	// services running on the host.
	EtcHosts *map[string]any `json:"etc_hosts,omitempty"`

	// List of additional container ports which informs Docker that the container
	// listens on the specified network ports at runtime.
	// If the port is already exposed using `EXPOSE` in a Dockerfile, it does not
	// need to be exposed again.
	ExposedPorts *[]string `json:"exposed_ports,omitempty"`

	// Use the kill command when stopping a running container.
	// default: false
	ForceKill *bool `json:"force_kill,omitempty"`

	// List of additional group names and/or IDs that the container process will
	// run as.
	Groups *[]string `json:"groups,omitempty"`

	// Configure a check that is run to determine whether or not containers for
	// this service are "healthy".
	// See the docs for the `HEALTHCHECK Dockerfile
	// instruction,https://docs.docker.com/engine/reference/builder/#healthcheck`
	// for details on how healthchecks work.
	// `healthcheck.interval`, `healthcheck.timeout`, `healthcheck.start_period`,
	// and `healthcheck.start_interval` are specified as durations. They accept
	// duration as a string in a format that look like: `5h34m56s`, `1m30s`, and so
	// on. The supported units are `us`, `ms`, `s`, `m` and `h`.
	// See also `state=healthy`.
	Healthcheck *struct {
		Test              *any    `json:"test,omitempty"`
		TestCliCompatible *bool   `json:"test_cli_compatible,omitempty"`
		Interval          *string `json:"interval,omitempty"`
		Timeout           *string `json:"timeout,omitempty"`
		Retries           *int    `json:"retries,omitempty"`
		StartPeriod       *string `json:"start_period,omitempty"`
		StartInterval     *string `json:"start_interval,omitempty"`
	} `json:"healthcheck,omitempty"`

	// The container's hostname.
	Hostname *string `json:"hostname,omitempty"`

	// Repository path and tag used to create the container. If an image is not
	// found or pull is true, the image will be pulled from the registry. If no tag
	// is included, `latest` will be used.
	// Can also be an image ID. If this is the case, the image is assumed to be
	// available locally. The `pull` option is ignored for this case.
	Image *string `json:"image,omitempty"`

	// Determines which image to use for idempotency checks that depend on image
	// parameters.
	// The default, `desired-image`, will use the image that is provided to the
	// module with the `image` parameter.
	// `current-image` will use the image that the container is currently using, if
	// the container exists. It falls back to the image that is provided in case
	// the container does not yet exist.
	// This affects the `env`, `env_file`, `exposed_ports`, `labels`, and `volumes`
	// options.
	// default: DockerContainerImageComparisonDesiredImage
	ImageComparison *DockerContainerImageComparison `json:"image_comparison,omitempty"`

	// How to handle labels inherited from the image that are not set explicitly.
	// When `ignore`, labels that are present in the image but not specified in
	// `labels` will be ignored. This is useful to avoid having to specify the
	// image labels in `labels` while keeping labels `comparisons` `strict`.
	// When `fail`, if there are labels present in the image which are not set from
	// `labels`, the module will fail. This prevents introducing unexpected labels
	// from the base image.
	// `Warning:` This option is ignored unless `labels: strict` or `*: strict` is
	// specified in the `comparisons` option.
	// default: DockerContainerImageLabelMismatchIgnore
	ImageLabelMismatch *DockerContainerImageLabelMismatch `json:"image_label_mismatch,omitempty"`

	// Determines what the module does if the image matches, but the image name in
	// the container's configuration does not match the image name provided to the
	// module.
	// This is ignored if `image: ignore` is set in `comparisons`.
	// If set to `recreate` (default) the container will be recreated.
	// If set to `ignore` the container will not be recreated because of this. It
	// might still get recreated for other reasons. This has been the default
	// behavior of the module for a long time, but might not be what users expect.
	// The default changed from `ignore` to `recreate` in community.docker 4.0.0.
	// default: DockerContainerImageNameMismatchRecreate
	ImageNameMismatch *DockerContainerImageNameMismatch `json:"image_name_mismatch,omitempty"`

	// Run an init inside the container that forwards signals and reaps processes.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	Init *bool `json:"init,omitempty"`

	// Keep stdin open after a container is launched, even if not attached.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	Interactive *bool `json:"interactive,omitempty"`

	// Set the IPC mode for the container.
	// Can be one of `container:<name|id>` to reuse another container's IPC
	// namespace or `host` to use the host's IPC namespace within the container.
	IpcMode *string `json:"ipc_mode,omitempty"`

	// Retain anonymous volumes associated with a removed container.
	// default: true
	KeepVolumes *bool `json:"keep_volumes,omitempty"`

	// Override default signal used to kill a running container.
	KillSignal *string `json:"kill_signal,omitempty"`

	// Kernel memory limit in format `<number>[<unit>]`. Number is a positive
	// integer. Unit can be `B` (byte), `K` (kibibyte, 1024B), `M` (mebibyte), `G`
	// (gibibyte), `T` (tebibyte), or `P` (pebibyte). Minimum is `4M`.
	// Omitting the unit defaults to bytes.
	KernelMemory *string `json:"kernel_memory,omitempty"`

	// Dictionary of key value pairs.
	Labels *map[string]any `json:"labels,omitempty"`

	// List of name aliases for linked containers in the format
	// `container_name:alias`.
	// Setting this will force container to be restarted.
	Links *[]string `json:"links,omitempty"`

	// Specify the logging driver. Docker uses `json-file` by default.
	// See `the Docker logging configuration
	// documentation,https://docs.docker.com/config/containers/logging/configure/`
	// for possible choices.
	LogDriver *string `json:"log_driver,omitempty"`

	// Dictionary of options specific to the chosen `log_driver`.
	// See `https://docs.docker.com/engine/admin/logging/overview/` for details.
	// `log_driver` needs to be specified for `log_options` to take effect, even if
	// using the default `json-file` driver.
	LogOptions *map[string]any `json:"log_options,omitempty"`

	// Container MAC address (for example, `92:d0:c6:0a:29:33`).
	// Note that the global container-wide MAC address is deprecated and no longer
	// used since Docker API version 1.44.
	// Use `networks[].mac_address` instead.
	MacAddress *string `json:"mac_address,omitempty"`

	// Memory limit in format `<number>[<unit>]`. Number is a positive integer.
	// Unit can be `B` (byte), `K` (kibibyte, 1024B), `M` (mebibyte), `G`
	// (gibibyte), `T` (tebibyte), or `P` (pebibyte).
	// Omitting the unit defaults to bytes.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `"0"`.
	Memory *string `json:"memory,omitempty"`

	// Memory soft limit in format `<number>[<unit>]`. Number is a positive
	// integer. Unit can be `B` (byte), `K` (kibibyte, 1024B), `M` (mebibyte), `G`
	// (gibibyte), `T` (tebibyte), or `P` (pebibyte).
	// Omitting the unit defaults to bytes.
	MemoryReservation *string `json:"memory_reservation,omitempty"`

	// Total memory limit (memory + swap) in format `<number>[<unit>]`, or the
	// special values `unlimited` or `-1` for unlimited swap usage. Number is a
	// positive integer. Unit can be `B` (byte), `K` (kibibyte, 1024B), `M`
	// (mebibyte), `G` (gibibyte), `T` (tebibyte), or `P` (pebibyte).
	// Omitting the unit defaults to bytes.
	MemorySwap *string `json:"memory_swap,omitempty"`

	// Tune a container's memory swappiness behavior. Accepts an integer between 0
	// and 100.
	// If not set, the value will be remain the same if container exists and will
	// be inherited from the host machine if it is (re-)created.
	MemorySwappiness *int `json:"memory_swappiness,omitempty"`

	// Specification for mounts to be added to the container. More powerful
	// alternative to `volumes`.
	Mounts *struct {
		Target        string          `json:"target"`
		Source        *string         `json:"source,omitempty"`
		Type          *string         `json:"type,omitempty"`
		ReadOnly      *bool           `json:"read_only,omitempty"`
		Consistency   *string         `json:"consistency,omitempty"`
		Propagation   *string         `json:"propagation,omitempty"`
		NoCopy        *bool           `json:"no_copy,omitempty"`
		Labels        *map[string]any `json:"labels,omitempty"`
		VolumeDriver  *string         `json:"volume_driver,omitempty"`
		VolumeOptions *map[string]any `json:"volume_options,omitempty"`
		TmpfsSize     *string         `json:"tmpfs_size,omitempty"`
		TmpfsMode     *string         `json:"tmpfs_mode,omitempty"`
	} `json:"mounts,omitempty"`

	// Assign a name to a new container or match an existing container.
	// When identifying an existing container name may be a name or a long or short
	// container ID.
	Name string `json:"name"`

	// Connect the container to a network. Choices are `bridge`, `host`, `none`,
	// `container:<name|id>`, `<network_name>` or `default`.
	// Since community.docker 2.0.0, if `networks_cli_compatible=true` and
	// `networks` contains at least one network, the default value for
	// `network_mode` is the name of the first network in the `networks` list. You
	// can prevent this by explicitly specifying a value for `network_mode`, like
	// the default value `default` which will be used by Docker if `network_mode`
	// is not specified.
	NetworkMode *string `json:"network_mode,omitempty"`

	// Set the user namespace mode for the container. Currently, the only valid
	// value are `host` and the empty string (`""`).
	UsernsMode *string `json:"userns_mode,omitempty"`

	// List of networks the container belongs to.
	// For examples of the data structure and usage see EXAMPLES below.
	// To remove a container from one or more networks, use `networks: strict` in
	// the `comparisons` option.
	// If `networks_cli_compatible=false`, this will not remove the default network
	// if `networks` is specified. This is different from the behavior of `docker
	// run ...`. You need to explicitly use `networks: strict` in `comparisons` to
	// enforce the removal of the default network (and all other networks not
	// explicitly mentioned in `networks`) in that case.
	Networks *struct {
		Name        string    `json:"name"`
		Ipv4Address *string   `json:"ipv4_address,omitempty"`
		Ipv6Address *string   `json:"ipv6_address,omitempty"`
		Links       *[]string `json:"links,omitempty"`
		Aliases     *[]string `json:"aliases,omitempty"`
		MacAddress  *string   `json:"mac_address,omitempty"`
	} `json:"networks,omitempty"`

	// If `networks_cli_compatible=true` (default), this module will behave as
	// `docker run --network` and will `not` add the default network if `networks`
	// is specified. If `networks` is not specified, the default network will be
	// attached.
	// When `networks_cli_compatible=false` and networks are provided to the module
	// with the `networks` option, the module behaves differently than `docker run
	// --network`: `docker run --network other` will create a container with
	// network `other` attached, but the default network not attached. This module
	// with `networks` set to `{name: other}` will create a container with both
	// `default` and `other` attached. If `networks: strict` or `*: strict` is set
	// in `comparisons`, the `default` network will be removed afterwards.
	// default: true
	NetworksCliCompatible *bool `json:"networks_cli_compatible,omitempty"`

	// Whether or not to disable OOM Killer for the container.
	OomKiller *bool `json:"oom_killer,omitempty"`

	// An integer value containing the score given to the container in order to
	// tune OOM killer preferences.
	OomScoreAdj *int `json:"oom_score_adj,omitempty"`

	// If set to true, output of the container command will be printed.
	// Only effective when `log_driver` is set to `json-file`, `journald`, or
	// `local`.
	// default: false
	OutputLogs *bool `json:"output_logs,omitempty"`

	// Use with the started state to pause running processes inside the container.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	Paused *bool `json:"paused,omitempty"`

	// Set the PID namespace mode for the container.
	PidMode *string `json:"pid_mode,omitempty"`

	// Set PIDs limit for the container. It accepts an integer value.
	// Set `-1` for unlimited PIDs.
	PidsLimit *int `json:"pids_limit,omitempty"`

	// Platform for the container in the format `os[/arch[/variant]]`.
	// Note that since community.docker 3.5.0, the module uses both the image's
	// metadata and the Docker daemon's information to normalize platform strings
	// similarly to how Docker itself is doing this. If you notice idempotency
	// problems, `please create an issue in the community.docker GitHub repository,
	// https://github.com/ansible-collections/community.docker/issues/new?assignees
	// =&labels=&projects=&template=bug_report.md`. For older community.docker
	// versions, you can use the `comparisons` option with `platform: ignore` to
	// prevent accidental recreation of the container due to this.
	Platform *string `json:"platform,omitempty"`

	// Give extended privileges to the container.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	Privileged *bool `json:"privileged,omitempty"`

	// Publish all ports to the host.
	// Any specified port bindings from `published_ports` will remain intact when
	// `true`.
	PublishAllPorts *bool `json:"publish_all_ports,omitempty"`

	// List of ports to publish from the container to the host.
	// Use docker CLI syntax: `8000`, `9000:8000`, or `0.0.0.0:9000:8000`, where
	// 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host
	// interface.
	// Port ranges can be used for source and destination ports. If two ranges with
	// different lengths are specified, the shorter range will be used. Since
	// community.general 0.2.0, if the source port range has length 1, the port
	// will not be assigned to the first port of the destination range, but to a
	// free port in that range. This is the same behavior as for `docker` command
	// line utility.
	// Bind addresses must be either IPv4 or IPv6 addresses. Hostnames are `not`
	// allowed. This is different from the `docker` command line utility. Use the
	// `community.general.dig#lookup` lookup to resolve hostnames.
	// If `networks` parameter is provided, will inspect each network to see if
	// there exists a bridge network with optional parameter
	// `com.docker.network.bridge.host_binding_ipv4`. If such a network is found,
	// then published ports where no host IP address is specified will be bound to
	// the host IP pointed to by `com.docker.network.bridge.host_binding_ipv4`.
	// Note that the first bridge network with a
	// `com.docker.network.bridge.host_binding_ipv4` value encountered in the list
	// of `networks` is the one that will be used.
	// The value `all` was allowed in earlier versions of this module. Support for
	// it was removed in community.docker 3.0.0. Use the `publish_all_ports` option
	// instead.
	PublishedPorts *[]string `json:"published_ports,omitempty"`

	// If set to `never`, will never try to pull an image. Will fail if the image
	// is not available on the Docker daemon.
	// If set to `missing` or `false`, only pull the image if it is not available
	// on the Docker daemon. This is the default behavior.
	// If set to `always` or `true`, always try to pull the latest version of the
	// image.
	// `Note:` images are only pulled when specified by name. If the image is
	// specified as a image ID (hash), it cannot be pulled, and this option is
	// ignored.
	// `Note:` the values `never`, `missing`, and `always` are only available since
	// community.docker 3.8.0. Earlier versions only support `true` and `false`.
	// default: DockerContainerPullMissing
	Pull *any `json:"pull,omitempty"`

	// Allows to adjust the behavior when `pull=always` or `pull=true` in check
	// mode.
	// Since the Docker daemon does not expose any functionality to test whether a
	// pull will result in a changed image, the module by default acts like
	// `pull=always` only results in a change when the image is not present.
	// If set to `image_not_present` (default), only report changes in check mode
	// when the image is not present.
	// If set to `always`, always report changes in check mode.
	// default: DockerContainerPullCheckModeBehaviorImageNotPresent
	PullCheckModeBehavior *DockerContainerPullCheckModeBehavior `json:"pull_check_mode_behavior,omitempty"`

	// Mount the container's root file system as read-only.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	ReadOnly *bool `json:"read_only,omitempty"`

	// Use with present and started states to force the re-creation of an existing
	// container.
	// default: false
	Recreate *bool `json:"recreate,omitempty"`

	// When removing an existing container, the docker daemon API call exists after
	// the container is scheduled for removal. Removal usually is very fast, but it
	// can happen that during high I/O load, removal can take longer. By default,
	// the module will wait until the container has been removed before trying to
	// (re-)create it, however long this takes.
	// By setting this option, the module will wait at most this many seconds for
	// the container to be removed. If the container is still in the removal phase
	// after this many seconds, the module will fail.
	RemovalWaitTimeout *float64 `json:"removal_wait_timeout,omitempty"`

	// Use with started state to force a matching container to be stopped and
	// restarted.
	// default: false
	Restart *bool `json:"restart,omitempty"`

	// Container restart policy.
	// Place quotes around `no` option.
	RestartPolicy *DockerContainerRestartPolicy `json:"restart_policy,omitempty"`

	// Use with restart policy to control maximum number of restart attempts.
	RestartRetries *int `json:"restart_retries,omitempty"`

	// Runtime to use for the container.
	Runtime *string `json:"runtime,omitempty"`

	// Size of `/dev/shm` in format `<number>[<unit>]`. Number is positive integer.
	// Unit can be `B` (byte), `K` (kibibyte, 1024B), `M` (mebibyte), `G`
	// (gibibyte), `T` (tebibyte), or `P` (pebibyte).
	// Omitting the unit defaults to bytes. If you omit the size entirely, Docker
	// daemon uses `64M`.
	ShmSize *string `json:"shm_size,omitempty"`

	// List of security options in the form of `"label:user:User"`.
	SecurityOpts *[]string `json:"security_opts,omitempty"`

	// `absent` - A container matching the specified name will be stopped and
	// removed. Use `force_kill` to kill the container rather than stopping it. Use
	// `keep_volumes` to retain anonymous volumes associated with the removed
	// container.
	// `present` - Asserts the existence of a container matching the name and any
	// provided configuration parameters. If no container matches the name, a
	// container will be created. If a container matches the name but the provided
	// configuration does not match, the container will be updated, if it can be.
	// If it cannot be updated, it will be removed and re-created with the
	// requested config.
	// `started` - Asserts that the container is first `present`, and then if the
	// container is not running moves it to a running state. Use `restart` to force
	// a matching container to be stopped and restarted.
	// `healthy` - Asserts that the container is `present` and `started`, and is
	// actually healthy as well. This means that the conditions defined in
	// `healthcheck` respectively in the image's `HEALTHCHECK` (`Docker reference
	// for HEALTHCHECK, https://docs.docker.com/reference/dockerfile/#healthcheck`)
	// are satisfied. The time waited can be controlled with
	// `healthy_wait_timeout`. This state has been added in community.docker
	// 3.11.0.
	// `stopped` - Asserts that the container is first `present`, and then if the
	// container is running moves it to a stopped state.
	// To control what will be taken into account when comparing configuration, see
	// the `comparisons` option. To avoid that the image version will be taken into
	// account, you can also use the `image: ignore` in the `comparisons` option.
	// Use the `recreate` option to always force re-creation of a matching
	// container, even if it is running.
	// If the container should be killed instead of stopped in case it needs to be
	// stopped for recreation, or because `state` is `stopped`, please use the
	// `force_kill` option. Use `keep_volumes` to retain anonymous volumes
	// associated with a removed container.
	// Use `keep_volumes` to retain anonymous volumes associated with a removed
	// container.
	// default: DockerContainerStateStarted
	State *DockerContainerState `json:"state,omitempty"`

	// Override default signal used to stop the container.
	StopSignal *string `json:"stop_signal,omitempty"`

	// When waiting for the container to become healthy if `state=healthy`, this
	// option controls how long the module waits until the container state becomes
	// healthy.
	// The timeout is specified in seconds. The default, `300`, is 5 minutes.
	// Set this to 0 or a negative value to wait indefinitely. Note that depending
	// on the container this can result in the module not terminating.
	// default: 300
	HealthyWaitTimeout *float64 `json:"healthy_wait_timeout,omitempty"`

	// Number of seconds to wait for the container to stop before sending
	// `SIGKILL`. When the container is created by this module, its `StopTimeout`
	// configuration will be set to this value.
	// When the container is stopped, will be used as a timeout for stopping the
	// container. In case the container has a custom `StopTimeout` configuration,
	// the behavior depends on the version of the docker daemon. New versions of
	// the docker daemon will always use the container's configured `StopTimeout`
	// value if it has been configured.
	StopTimeout *int `json:"stop_timeout,omitempty"`

	// Storage driver options for this container as a key-value mapping.
	StorageOpts *map[string]any `json:"storage_opts,omitempty"`

	// Mount a tmpfs directory.
	Tmpfs *[]string `json:"tmpfs,omitempty"`

	// Allocate a pseudo-TTY.
	// If `container_default_behavior=compatibility`, this option has a default of
	// `false`.
	Tty *bool `json:"tty,omitempty"`

	// List of ulimit options. A ulimit is specified as `nofile:262144:262144`.
	Ulimits *[]string `json:"ulimits,omitempty"`

	// Dictionary of key,value pairs.
	Sysctls *map[string]any `json:"sysctls,omitempty"`

	// Sets the username or UID used and optionally the groupname or GID for the
	// specified command.
	// Can be of the forms `user`, `user:group`, `uid`, `uid:gid`, `user:gid` or
	// `uid:group`.
	User *string `json:"user,omitempty"`

	// Set the UTS namespace mode for the container.
	Uts *string `json:"uts,omitempty"`

	// List of volumes to mount within the container.
	// Use docker CLI-style syntax: `/host:/container[:mode]`.
	// Mount modes can be a comma-separated list of various modes such as `ro`,
	// `rw`, `consistent`, `delegated`, `cached`, `rprivate`, `private`, `rshared`,
	// `shared`, `rslave`, `slave`, and `nocopy`. Note that the docker daemon might
	// not support all modes and combinations of such modes.
	// SELinux hosts can additionally use `z` or `Z` to use a shared or private
	// label for the volume.
	// Note that Ansible 2.7 and earlier only supported one mode, which had to be
	// one of `ro`, `rw`, `z`, and `Z`.
	Volumes *[]string `json:"volumes,omitempty"`

	// The container volume driver.
	VolumeDriver *string `json:"volume_driver,omitempty"`

	// List of container names or IDs to get volumes from.
	VolumesFrom *[]string `json:"volumes_from,omitempty"`

	// Path to the working directory.
	WorkingDir *string `json:"working_dir,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerContainerParameters into an `rpc.RPCCall`.
func (p DockerContainerParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerContainerName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_container` Ansible module.
type DockerContainerReturn struct {
	AnsibleCommonReturns

	// Facts representing the current state of the container. Matches the docker
	// inspection output.
	// Empty if `state=absent`.
	// If `detach=false`, will include `Output` attribute containing any output
	// from container run.
	Container *map[string]any `json:"container,omitempty"`

	// In case a container is started without detaching, this contains the exit
	// code of the process in the container.
	// Before community.docker 1.1.0, this was only returned when non-zero.
	Status *int `json:"status,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerContainerReturn`
func DockerContainerReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerContainerReturn, error) {
	return cast.AnyToJSONT[DockerContainerReturn](r.Result.Result)
}
