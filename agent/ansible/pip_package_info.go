// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Return information about installed pip packages.
const PipPackageInfoName = "pip_package_info"

// Parameters for the `pip_package_info` Ansible module.
type PipPackageInfoParameters struct {
	// A list of the pip executables that will be used to get the packages. They
	// can be supplied with the full path or just the executable name, for example
	// `pip3.7`.
	// default: ["pip"]
	Clients *[]string `json:"clients,omitempty"`
}

// Wrap the `PipPackageInfoParameters into an `rpc.RPCCall`.
func (p PipPackageInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PipPackageInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `pip_package_info` Ansible module.
type PipPackageInfoReturn struct {
	AnsibleCommonReturns

	// A dictionary of installed package data.
	Packages *map[string]any `json:"packages,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `PipPackageInfoReturn`
func PipPackageInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PipPackageInfoReturn, error) {
	return cast.AnyToJSONT[PipPackageInfoReturn](r.Result.Result)
}
