// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Retrieves facts about a docker host.
// Essentially returns the output of `docker system info`.
// The module also allows to list object names for containers, images, networks
// and volumes. It also allows to query information on disk usage.
// The output differs depending on API version of the docker daemon.
// If the docker daemon cannot be contacted or does not meet the API version
// requirements, the module will fail.
const DockerHostInfoName = "docker_host_info"

// Parameters for the `docker_host_info` Ansible module.
type DockerHostInfoParameters struct {
	// Whether to list containers.
	// default: false
	Containers *bool `json:"containers,omitempty"`

	// By default, only running containers are returned.
	// This corresponds to the `--all` option to `docker container list`.
	// default: false
	ContainersAll *bool `json:"containers_all,omitempty"`

	// A dictionary of filter values used for selecting containers to list.
	// For example, `until: 24h`.
	// `label` is a special case of filter which can be a string `<key>` matching
	// when a label is present, a string `<key>=<value>` matching when a label has
	// a particular value, or a list of strings `<key>`/`<key>=<value`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/container_prune/#filtering` for more information on possible filters.
	ContainersFilters *map[string]any `json:"containers_filters,omitempty"`

	// Whether to list images.
	// default: false
	Images *bool `json:"images,omitempty"`

	// A dictionary of filter values used for selecting images to list.
	// For example, `dangling: true`.
	// `label` is a special case of filter which can be a string `<key>` matching
	// when a label is present, a string `<key>=<value>` matching when a label has
	// a particular value, or a list of strings `<key>`/`<key>=<value`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/image_prune/#filtering` for more information on possible filters.
	ImagesFilters *map[string]any `json:"images_filters,omitempty"`

	// Whether to list networks.
	// default: false
	Networks *bool `json:"networks,omitempty"`

	// A dictionary of filter values used for selecting networks to list.
	// `label` is a special case of filter which can be a string `<key>` matching
	// when a label is present, a string `<key>=<value>` matching when a label has
	// a particular value, or a list of strings `<key>`/`<key>=<value`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/network_prune/#filtering` for more information on possible filters.
	NetworksFilters *map[string]any `json:"networks_filters,omitempty"`

	// Whether to list volumes.
	// default: false
	Volumes *bool `json:"volumes,omitempty"`

	// A dictionary of filter values used for selecting volumes to list.
	// `label` is a special case of filter which can be a string `<key>` matching
	// when a label is present, a string `<key>=<value>` matching when a label has
	// a particular value, or a list of strings `<key>`/`<key>=<value`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/volume_prune/#filtering` for more information on possible filters.
	VolumesFilters *map[string]any `json:"volumes_filters,omitempty"`

	// Summary information on used disk space by all Docker layers.
	// The output is a sum of images, volumes, containers and build cache.
	// default: false
	DiskUsage *bool `json:"disk_usage,omitempty"`

	// When set to `true` and `networks`, `volumes`, `images`, `containers`, or
	// `disk_usage` is set to `true` then output will contain verbose information
	// about objects matching the full output of API method. For details see the
	// documentation of your version of Docker API at
	// `https://docs.docker.com/engine/api/`.
	// The verbose output in this module contains only subset of information
	// returned by this module for each type of the objects.
	// default: false
	VerboseOutput *bool `json:"verbose_output,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerHostInfoParameters into an `rpc.RPCCall`.
func (p DockerHostInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerHostInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_host_info` Ansible module.
type DockerHostInfoReturn struct {
	AnsibleCommonReturns

	// Will be `true` if the module can talk to the docker daemon.
	CanTalkToDocker *bool `json:"can_talk_to_docker,omitempty"`

	// Facts representing the basic state of the docker host. Matches the `docker
	// system info` output.
	HostInfo *map[string]any `json:"host_info,omitempty"`

	// List of dict objects containing the basic information about each volume.
	// Keys matches the `docker volume ls` output unless `verbose_output=true`. See
	// description for `verbose_output`.
	Volumes *map[string]any `json:"volumes,omitempty"`

	// List of dict objects containing the basic information about each network.
	// Keys matches the `docker network ls` output unless `verbose_output=true`.
	// See description for `verbose_output`.
	Networks *map[string]any `json:"networks,omitempty"`

	// List of dict objects containing the basic information about each container.
	// Keys matches the `docker container ls` output unless `verbose_output=true`.
	// See description for `verbose_output`.
	Containers *map[string]any `json:"containers,omitempty"`

	// List of dict objects containing the basic information about each image. Keys
	// matches the `docker image ls` output unless `verbose_output=true`. See
	// description for `verbose_output`.
	Images *map[string]any `json:"images,omitempty"`

	// Information on summary disk usage by images, containers and volumes on
	// docker host unless `verbose_output=true`. See description for
	// `verbose_output`.
	DiskUsage *map[string]any `json:"disk_usage,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerHostInfoReturn`
func DockerHostInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerHostInfoReturn, error) {
	return cast.AnyToJSONT[DockerHostInfoReturn](r.Result.Result)
}
