// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// The `community.general.git_config` module changes git configuration by
// invoking `git config`. This is needed if you do not want to use
// `ansible.builtin.template` for the entire git config file (for example
// because you need to change just `user.email` in `/etc/.git/config`).
// Solutions involving `ansible.builtin.command` are cumbersome or do not work
// correctly in check mode.
const GitConfigName = "git_config"

// Specify which scope to read/set values from.
// This is required when setting config values.
// If this is set to `local`, you must also specify the `repo` parameter.
// If this is set to `file`, you must also specify the `file` parameter.
// It defaults to system.
type GitConfigScope string

const (
	GitConfigScopeFile   GitConfigScope = "file"
	GitConfigScopeLocal  GitConfigScope = "local"
	GitConfigScopeGlobal GitConfigScope = "global"
	GitConfigScopeSystem GitConfigScope = "system"
)

// Convert a supported type to an optional (pointer) GitConfigScope
func OptionalGitConfigScope[T interface {
	*GitConfigScope | GitConfigScope | *string | string
}](s T) *GitConfigScope {
	switch v := any(s).(type) {
	case *GitConfigScope:
		return v
	case GitConfigScope:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := GitConfigScope(*v)
		return &val
	case string:
		val := GitConfigScope(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Indicates the setting should be set/unset. This parameter has higher
// precedence than `value` parameter: when `state=absent` and `value` is
// defined, `value` is discarded.
type GitConfigState string

const (
	GitConfigStatePresent GitConfigState = "present"
	GitConfigStateAbsent  GitConfigState = "absent"
)

// Convert a supported type to an optional (pointer) GitConfigState
func OptionalGitConfigState[T interface {
	*GitConfigState | GitConfigState | *string | string
}](s T) *GitConfigState {
	switch v := any(s).(type) {
	case *GitConfigState:
		return v
	case GitConfigState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := GitConfigState(*v)
		return &val
	case string:
		val := GitConfigState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Specify if a value should replace the existing value(s) or if the new value
// should be added alongside other values with the same name.
// This option is only relevant when adding/replacing values. If `state=absent`
// or values are just read out, this option is not considered.
type GitConfigAddMode string

const (
	GitConfigAddModeAdd        GitConfigAddMode = "add"
	GitConfigAddModeReplaceAll GitConfigAddMode = "replace-all"
)

// Convert a supported type to an optional (pointer) GitConfigAddMode
func OptionalGitConfigAddMode[T interface {
	*GitConfigAddMode | GitConfigAddMode | *string | string
}](s T) *GitConfigAddMode {
	switch v := any(s).(type) {
	case *GitConfigAddMode:
		return v
	case GitConfigAddMode:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := GitConfigAddMode(*v)
		return &val
	case string:
		val := GitConfigAddMode(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `git_config` Ansible module.
type GitConfigParameters struct {
	// The name of the setting.
	Name string `json:"name"`

	// Path to a git repository for reading and writing values from a specific
	// repo.
	Repo *string `json:"repo,omitempty"`

	// Path to an adhoc git configuration file to be managed using the `file`
	// scope.
	File *string `json:"file,omitempty"`

	// Specify which scope to read/set values from.
	// This is required when setting config values.
	// If this is set to `local`, you must also specify the `repo` parameter.
	// If this is set to `file`, you must also specify the `file` parameter.
	// It defaults to system.
	Scope *GitConfigScope `json:"scope,omitempty"`

	// Indicates the setting should be set/unset. This parameter has higher
	// precedence than `value` parameter: when `state=absent` and `value` is
	// defined, `value` is discarded.
	// default: GitConfigStatePresent
	State *GitConfigState `json:"state,omitempty"`

	// When specifying the name of a single setting, supply a value to set that
	// setting to the given value.
	// From community.general 11.0.0 on, `value` is required if `state=present`. To
	// read values, use the `community.general.git_config_info` module instead.
	Value *string `json:"value,omitempty"`

	// Specify if a value should replace the existing value(s) or if the new value
	// should be added alongside other values with the same name.
	// This option is only relevant when adding/replacing values. If `state=absent`
	// or values are just read out, this option is not considered.
	// default: GitConfigAddModeReplaceAll
	AddMode *GitConfigAddMode `json:"add_mode,omitempty"`
}

// Wrap the `GitConfigParameters into an `rpc.RPCCall`.
func (p GitConfigParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: GitConfigName,
			Args: args,
		},
	}, nil
}

// Return values for the `git_config` Ansible module.
type GitConfigReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `GitConfigReturn`
func GitConfigReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (GitConfigReturn, error) {
	return cast.AnyToJSONT[GitConfigReturn](r.Result.Result)
}
