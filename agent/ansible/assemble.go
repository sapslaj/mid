// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Assembles a configuration file from fragments.
// Often a particular program will take a single configuration file and does not
// support a `conf.d` style structure where it is easy to build up the
// configuration from multiple sources. `ansible.builtin.assemble` will take a
// directory of files that can be local or have already been transferred to the
// system, and concatenate them together to produce a destination file.
// Files are assembled in string sorting order.
// Puppet calls this idea `fragments`.
const AssembleName = "assemble"

// Parameters for the `assemble` Ansible module.
type AssembleParameters struct {
	// An already existing directory full of source files.
	Src string `json:"src"`

	// A file to create using the concatenation of all of the source files.
	Dest string `json:"dest"`

	// Create a backup file (if `true`), including the timestamp information so you
	// can get the original file back if you somehow clobbered it incorrectly.
	Backup *bool `json:"backup,omitempty"`

	// A delimiter to separate the file contents.
	Delimiter *string `json:"delimiter,omitempty"`

	// If `false`, it will search for src at originating/master machine.
	// If `true`, it will go to the remote/target machine for the src.
	RemoteSrc *bool `json:"remote_src,omitempty"`

	// Assemble files only if the given regular expression matches the filename.
	// If not set, all files are assembled.
	// Every `\\` (backslash) must be escaped as `\\\\` to comply to YAML syntax.
	// Uses `Python regular expressions,https://docs.python.org/3/library/re.html`.
	Regexp *string `json:"regexp,omitempty"`

	// A boolean that controls if files that start with a `.` will be included or
	// not.
	IgnoreHidden *bool `json:"ignore_hidden,omitempty"`

	// The validation command to run before copying into place.
	// The path to the file to validate is passed in by `%s` which must be present
	// as in the sshd example below.
	// The command is passed securely so shell features like expansion and pipes
	// won't work.
	Validate *string `json:"validate,omitempty"`

	// This option controls the auto-decryption of source files using vault.
	Decrypt *bool `json:"decrypt,omitempty"`

	// The permissions the resulting filesystem object should have.
	// For those used to `/usr/bin/chmod` remember that modes are actually octal
	// numbers. You must give Ansible enough information to parse them correctly.
	// For consistent results, quote octal numbers (for example, `'644'` or
	// `'1777'`) so Ansible receives a string and can do its own conversion from
	// string into number. Adding a leading zero (for example, `0755`) works
	// sometimes, but can fail in loops and some other circumstances.
	// Giving Ansible a number without following either of these rules will end up
	// with a decimal number which will have unexpected results.
	// As of Ansible 1.8, the mode may be specified as a symbolic mode (for
	// example, `u+rwx` or `u=rw,g=r,o=r`).
	// If `mode` is not specified and the destination filesystem object `does not`
	// exist, the default `umask` on the system will be used when setting the mode
	// for the newly created filesystem object.
	// If `mode` is not specified and the destination filesystem object `does`
	// exist, the mode of the existing filesystem object will be used.
	// Specifying `mode` is the best way to ensure filesystem objects are created
	// with the correct permissions. See CVE-2020-1736 for further details.
	Mode *any `json:"mode,omitempty"`

	// Name of the user that should own the filesystem object, as would be fed to
	// `chown`.
	// When left unspecified, it uses the current user unless you are root, in
	// which case it can preserve the previous ownership.
	// Specifying a numeric username will be assumed to be a user ID and not a
	// username. Avoid numeric usernames to avoid this confusion.
	Owner *string `json:"owner,omitempty"`

	// Name of the group that should own the filesystem object, as would be fed to
	// `chown`.
	// When left unspecified, it uses the current group of the current user unless
	// you are root, in which case it can preserve the previous ownership.
	Group *string `json:"group,omitempty"`

	// The user part of the SELinux filesystem object context.
	// By default it uses the `system` policy, where applicable.
	// When set to `_default`, it will use the `user` portion of the policy if
	// available.
	Seuser *string `json:"seuser,omitempty"`

	// The role part of the SELinux filesystem object context.
	// When set to `_default`, it will use the `role` portion of the policy if
	// available.
	Serole *string `json:"serole,omitempty"`

	// The type part of the SELinux filesystem object context.
	// When set to `_default`, it will use the `type` portion of the policy if
	// available.
	Setype *string `json:"setype,omitempty"`

	// The level part of the SELinux filesystem object context.
	// This is the MLS/MCS attribute, sometimes known as the `range`.
	// When set to `_default`, it will use the `level` portion of the policy if
	// available.
	Selevel *string `json:"selevel,omitempty"`

	// Influence when to use atomic operation to prevent data corruption or
	// inconsistent reads from the target filesystem object.
	// By default this module uses atomic operations to prevent data corruption or
	// inconsistent reads from the target filesystem objects, but sometimes systems
	// are configured or just broken in ways that prevent this. One example is
	// docker mounted filesystem objects, which cannot be updated atomically from
	// inside the container and can only be written in an unsafe manner.
	// This option allows Ansible to fall back to unsafe methods of updating
	// filesystem objects when atomic operations fail (however, it doesn't force
	// Ansible to perform unsafe writes).
	// IMPORTANT! Unsafe writes are subject to race conditions and can lead to data
	// corruption.
	UnsafeWrites *bool `json:"unsafe_writes,omitempty"`

	// The attributes the resulting filesystem object should have.
	// To get supported flags look at the man page for `chattr` on the target
	// system.
	// This string should contain the attributes in the same order as the one
	// displayed by `lsattr`.
	// The `=` operator is assumed as default, otherwise `+` or `-` operators need
	// to be included in the string.
	Attributes *string `json:"attributes,omitempty"`
}

// Wrap the `AssembleParameters into an `rpc.RPCCall`.
func (p *AssembleParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AssembleName,
			Args: args,
		},
	}, nil
}

// Return values for the `assemble` Ansible module.
type AssembleReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `AssembleReturn`
func AssembleReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AssembleReturn, error) {
	return rpc.AnyToJSONT[AssembleReturn](r.Result.Result)
}
