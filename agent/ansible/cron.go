// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const CronName = "cron"

type CronParameters struct {
	Name         string  `json:"name"`
	User         *string `json:"user,omitempty"`
	Job          *string `json:"job,omitempty"`
	State        *string `json:"state,omitempty"`
	CronFile     *string `json:"cron_file,omitempty"`
	Backup       *bool   `json:"backup,omitempty"`
	Minute       *string `json:"minute,omitempty"`
	Hour         *string `json:"hour,omitempty"`
	Day          *string `json:"day,omitempty"`
	Month        *string `json:"month,omitempty"`
	Weekday      *string `json:"weekday,omitempty"`
	SpecialTime  *string `json:"special_time,omitempty"`
	Disabled     *bool   `json:"disabled,omitempty"`
	Env          *bool   `json:"env,omitempty"`
	Insertafter  *string `json:"insertafter,omitempty"`
	Insertbefore *string `json:"insertbefore,omitempty"`
}

func (p *CronParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: CronName,
			Args: args,
		},
	}, nil
}

type CronReturn struct {
	AnsibleCommonReturns
}

func CronReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (CronReturn, error) {
	return rpc.AnyToJSONT[CronReturn](r.Result.Result)
}
