// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module allows Configuring Intel Optane Persistent Memory modules (PMem)
// using `ipmctl` and `ndctl` command line tools.
const PmemName = "pmem"

// Parameters for the `pmem` Ansible module.
type PmemParameters struct {
	// Percentage of the total capacity to use in AppDirect Mode (`0`-`100`).
	// Create AppDirect capacity utilizing hardware interleaving across the
	// requested PMem modules if applicable given the specified target.
	// Total of `appdirect`, `memorymode` and `reserved` must be `100`.
	Appdirect *int `json:"appdirect,omitempty"`

	// Create AppDirect capacity that is interleaved any other PMem modules.
	// default: true
	AppdirectInterleaved *bool `json:"appdirect_interleaved,omitempty"`

	// Percentage of the total capacity to use in Memory Mode (`0`-`100`).
	Memorymode *int `json:"memorymode,omitempty"`

	// Percentage of the capacity to reserve (`0`-`100`). `reserved` will not be
	// mapped into the system physical address space and will be presented as
	// reserved capacity with Show Device and Show Memory Resources Commands.
	// `reserved` will be set automatically if this is not configured.
	Reserved *int `json:"reserved,omitempty"`

	// This enables to set the configuration for each socket by using the socket
	// ID.
	// Total of `appdirect`, `memorymode` and `reserved` must be `100` within one
	// socket.
	Socket *struct {
		Id                   int   `json:"id"`
		Appdirect            int   `json:"appdirect"`
		AppdirectInterleaved *bool `json:"appdirect_interleaved,omitempty"`
		Memorymode           int   `json:"memorymode"`
		Reserved             *int  `json:"reserved,omitempty"`
	} `json:"socket,omitempty"`

	// This enables to set the configuration for the namespace of the PMem.
	Namespace *struct {
		Mode string  `json:"mode"`
		Type *string `json:"type,omitempty"`
		Size *string `json:"size,omitempty"`
	} `json:"namespace,omitempty"`

	// Enable to append the new namespaces to the system.
	// The default is `false` so the all existing namespaces not listed in
	// `namespace` are removed.
	// default: false
	NamespaceAppend *bool `json:"namespace_append,omitempty"`
}

// Wrap the `PmemParameters into an `rpc.RPCCall`.
func (p *PmemParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PmemName,
			Args: args,
		},
	}, nil
}

// Return values for the `pmem` Ansible module.
type PmemReturn struct {
	AnsibleCommonReturns

	// Indicates that the system reboot is required to complete the PMem
	// configuration.
	RebootRequired *bool `json:"reboot_required,omitempty"`

	// Shows the value of AppDirect, Memory Mode and Reserved size in bytes.
	// If `socket` argument is provided, shows the values in each socket with
	// `socket` which contains the socket ID.
	// If `namespace` argument is provided, shows the detail of each namespace.
	Result *map[string]any `json:"result,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `PmemReturn`
func PmemReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PmemReturn, error) {
	return rpc.AnyToJSONT[PmemReturn](r.Result.Result)
}
