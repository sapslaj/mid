// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// A diversion is for `dpkg` the knowledge that only a given package (or the
// local administrator) is allowed to install a file at a given location. Other
// packages shipping their own version of this file will be forced to `divert`
// it, that is to install it at another location. It allows one to keep changes
// in a file provided by a debian package by preventing it being overwritten on
// package upgrade.
// This module manages diversions of debian packages files using the `dpkg-
// divert` commandline tool. It can either create or remove a diversion for a
// given file, but also update an existing diversion to modify its `holder`
// and/or its `divert` location.
const DpkgDivertName = "dpkg_divert"

// When `state=absent`, remove the diversion of the specified `path`; when
// `state=present`, create the diversion if it does not exist, or update its
// package `holder` or `divert` location, if it already exists.
type DpkgDivertState string

const (
	DpkgDivertStateAbsent  DpkgDivertState = "absent"
	DpkgDivertStatePresent DpkgDivertState = "present"
)

// Convert a supported type to an optional (pointer) DpkgDivertState
func OptionalDpkgDivertState[T interface {
	*DpkgDivertState | DpkgDivertState | *string | string
}](s T) *DpkgDivertState {
	switch v := any(s).(type) {
	case *DpkgDivertState:
		return v
	case DpkgDivertState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DpkgDivertState(*v)
		return &val
	case string:
		val := DpkgDivertState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `dpkg_divert` Ansible module.
type DpkgDivertParameters struct {
	// The original and absolute path of the file to be diverted or undiverted.
	// This path is unique, in other words it is not possible to get two diversions
	// for the same `path`.
	Path string `json:"path"`

	// When `state=absent`, remove the diversion of the specified `path`; when
	// `state=present`, create the diversion if it does not exist, or update its
	// package `holder` or `divert` location, if it already exists.
	// default: DpkgDivertStatePresent
	State *DpkgDivertState `json:"state,omitempty"`

	// The name of the package whose copy of file is not diverted, also known as
	// the diversion holder or the package the diversion belongs to.
	// The actual package does not have to be installed or even to exist for its
	// name to be valid. If not specified, the diversion is hold by 'LOCAL', that
	// is reserved by/for dpkg for local diversions.
	// This parameter is ignored when `state=absent`.
	Holder *string `json:"holder,omitempty"`

	// The location where the versions of file will be diverted.
	// Default is to add suffix `.distrib` to the file path.
	// This parameter is ignored when `state=absent`.
	Divert *string `json:"divert,omitempty"`

	// Actually move the file aside (when `state=present`) or back (when
	// `state=absent`), but only when changing the state of the diversion. This
	// parameter has no effect when attempting to add a diversion that already
	// exists or when removing an unexisting one.
	// Unless `force=true`, renaming fails if the destination file already exists
	// (this lock being a dpkg-divert feature, and bypassing it being a module
	// feature).
	// default: false
	Rename *bool `json:"rename,omitempty"`

	// When `rename=true` and `force=true`, renaming is performed even if the
	// target of the renaming exists, in other words the existing contents of the
	// file at this location will be lost.
	// This parameter is ignored when `rename=false`.
	// default: false
	Force *bool `json:"force,omitempty"`
}

// Wrap the `DpkgDivertParameters into an `rpc.RPCCall`.
func (p DpkgDivertParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DpkgDivertName,
			Args: args,
		},
	}, nil
}

// Return values for the `dpkg_divert` Ansible module.
type DpkgDivertReturn struct {
	AnsibleCommonReturns

	// The dpkg-divert commands ran internally by the module.
	Commands *[]string `json:"commands,omitempty"`

	// The dpkg-divert relevant messages (stdout or stderr).
	Messages *[]string `json:"messages,omitempty"`

	// The status of the diversion after task execution.
	Diversion *map[string]any `json:"diversion,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DpkgDivertReturn`
func DpkgDivertReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DpkgDivertReturn, error) {
	return cast.AnyToJSONT[DpkgDivertReturn](r.Result.Result)
}
