# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import types as _types

__all__ = ["FileLineArgs", "FileLine"]


@pulumi.input_type
class FileLineArgs:
    def __init__(
        __self__,
        *,
        path: pulumi.Input[builtins.str],
        backrefs: Optional[pulumi.Input[builtins.bool]] = None,
        backup: Optional[pulumi.Input[builtins.bool]] = None,
        create: Optional[pulumi.Input[builtins.bool]] = None,
        ensure: Optional[pulumi.Input[builtins.str]] = None,
        first_match: Optional[pulumi.Input[builtins.bool]] = None,
        insert_after: Optional[pulumi.Input[builtins.str]] = None,
        insert_before: Optional[pulumi.Input[builtins.str]] = None,
        line: Optional[pulumi.Input[builtins.str]] = None,
        regexp: Optional[pulumi.Input[builtins.str]] = None,
        search_string: Optional[pulumi.Input[builtins.str]] = None,
        triggers: Optional[pulumi.Input["_types.TriggersInputArgs"]] = None,
        unsafe_writes: Optional[pulumi.Input[builtins.bool]] = None,
        validate: Optional[pulumi.Input[builtins.str]] = None,
    ):
        """
        The set of arguments for constructing a FileLine resource.
        """
        pulumi.set(__self__, "path", path)
        if backrefs is not None:
            pulumi.set(__self__, "backrefs", backrefs)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if ensure is not None:
            pulumi.set(__self__, "ensure", ensure)
        if first_match is not None:
            pulumi.set(__self__, "first_match", first_match)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if insert_before is not None:
            pulumi.set(__self__, "insert_before", insert_before)
        if line is not None:
            pulumi.set(__self__, "line", line)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if search_string is not None:
            pulumi.set(__self__, "search_string", search_string)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if unsafe_writes is not None:
            pulumi.set(__self__, "unsafe_writes", unsafe_writes)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def backrefs(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "backrefs")

    @backrefs.setter
    def backrefs(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "backrefs", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def ensure(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ensure")

    @ensure.setter
    def ensure(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ensure", value)

    @property
    @pulumi.getter(name="firstMatch")
    def first_match(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "first_match")

    @first_match.setter
    def first_match(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "first_match", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="insertBefore")
    def insert_before(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "insert_before")

    @insert_before.setter
    def insert_before(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "insert_before", value)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "line", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "search_string")

    @search_string.setter
    def search_string(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "search_string", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input["_types.TriggersInputArgs"]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input["_types.TriggersInputArgs"]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter(name="unsafeWrites")
    def unsafe_writes(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "unsafe_writes")

    @unsafe_writes.setter
    def unsafe_writes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "unsafe_writes", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "validate", value)


@pulumi.type_token("mid:resource:FileLine")
class FileLine(pulumi.CustomResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        backrefs: Optional[pulumi.Input[builtins.bool]] = None,
        backup: Optional[pulumi.Input[builtins.bool]] = None,
        create: Optional[pulumi.Input[builtins.bool]] = None,
        ensure: Optional[pulumi.Input[builtins.str]] = None,
        first_match: Optional[pulumi.Input[builtins.bool]] = None,
        insert_after: Optional[pulumi.Input[builtins.str]] = None,
        insert_before: Optional[pulumi.Input[builtins.str]] = None,
        line: Optional[pulumi.Input[builtins.str]] = None,
        path: Optional[pulumi.Input[builtins.str]] = None,
        regexp: Optional[pulumi.Input[builtins.str]] = None,
        search_string: Optional[pulumi.Input[builtins.str]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        unsafe_writes: Optional[pulumi.Input[builtins.bool]] = None,
        validate: Optional[pulumi.Input[builtins.str]] = None,
        __props__=None,
    ):
        """
        Create a FileLine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: FileLineArgs,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a FileLine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FileLineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            FileLineArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        backrefs: Optional[pulumi.Input[builtins.bool]] = None,
        backup: Optional[pulumi.Input[builtins.bool]] = None,
        create: Optional[pulumi.Input[builtins.bool]] = None,
        ensure: Optional[pulumi.Input[builtins.str]] = None,
        first_match: Optional[pulumi.Input[builtins.bool]] = None,
        insert_after: Optional[pulumi.Input[builtins.str]] = None,
        insert_before: Optional[pulumi.Input[builtins.str]] = None,
        line: Optional[pulumi.Input[builtins.str]] = None,
        path: Optional[pulumi.Input[builtins.str]] = None,
        regexp: Optional[pulumi.Input[builtins.str]] = None,
        search_string: Optional[pulumi.Input[builtins.str]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        unsafe_writes: Optional[pulumi.Input[builtins.bool]] = None,
        validate: Optional[pulumi.Input[builtins.str]] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = FileLineArgs.__new__(FileLineArgs)

            __props__.__dict__["backrefs"] = backrefs
            __props__.__dict__["backup"] = backup
            __props__.__dict__["create"] = create
            __props__.__dict__["ensure"] = ensure
            __props__.__dict__["first_match"] = first_match
            __props__.__dict__["insert_after"] = insert_after
            __props__.__dict__["insert_before"] = insert_before
            __props__.__dict__["line"] = line
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["regexp"] = regexp
            __props__.__dict__["search_string"] = search_string
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["unsafe_writes"] = unsafe_writes
            __props__.__dict__["validate"] = validate
        super(FileLine, __self__).__init__(
            "mid:resource:FileLine", resource_name, __props__, opts
        )

    @staticmethod
    def get(
        resource_name: str,
        id: pulumi.Input[str],
        opts: Optional[pulumi.ResourceOptions] = None,
    ) -> "FileLine":
        """
        Get an existing FileLine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FileLineArgs.__new__(FileLineArgs)

        __props__.__dict__["backrefs"] = None
        __props__.__dict__["backup"] = None
        __props__.__dict__["create"] = None
        __props__.__dict__["ensure"] = None
        __props__.__dict__["first_match"] = None
        __props__.__dict__["insert_after"] = None
        __props__.__dict__["insert_before"] = None
        __props__.__dict__["line"] = None
        __props__.__dict__["path"] = None
        __props__.__dict__["regexp"] = None
        __props__.__dict__["search_string"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["unsafe_writes"] = None
        __props__.__dict__["validate"] = None
        return FileLine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def backrefs(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "backrefs")

    @property
    @pulumi.getter
    def backup(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter
    def create(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def ensure(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ensure")

    @property
    @pulumi.getter(name="firstMatch")
    def first_match(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "first_match")

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter(name="insertBefore")
    def insert_before(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "insert_before")

    @property
    @pulumi.getter
    def line(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "line")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "search_string")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output["_types.outputs.TriggersOutput"]:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="unsafeWrites")
    def unsafe_writes(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "unsafe_writes")

    @property
    @pulumi.getter
    def validate(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "validate")
