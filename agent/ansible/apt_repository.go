// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const AptRepositoryName = "apt_repository"

//go:embed apt_repository.zip
var AptRepositoryZipfile []byte

type AptRepositoryParameters struct {
	Repo                     string  `json:"repo"`
	State                    *string `json:"state,omitempty"`
	Mode                     *any    `json:"mode,omitempty"`
	UpdateCache              *bool   `json:"update_cache,omitempty"`
	UpdateCacheRetries       *int    `json:"update_cache_retries,omitempty"`
	UpdateCacheRetryMaxDelay *int    `json:"update_cache_retry_max_delay,omitempty"`
	ValidateCerts            *bool   `json:"validate_certs,omitempty"`
	Filename                 *string `json:"filename,omitempty"`
	Codename                 *string `json:"codename,omitempty"`
	InstallPythonApt         *bool   `json:"install_python_apt,omitempty"`
}

func (p *AptRepositoryParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  AptRepositoryZipfile,
			Name: AptRepositoryName,
			Args: args,
		},
	}, nil
}

type AptRepositoryReturn struct {
	AnsibleCommonReturns
	Repo           *string `json:"repo,omitempty"`
	SourcesAdded   *[]any  `json:"sources_added,omitempty"`
	SourcesRemoved *[]any  `json:"sources_removed,omitempty"`
}

func AptRepositoryReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (AptRepositoryReturn, error) {
	return rpc.AnyToJSONT[AptRepositoryReturn](r.Result.Result)
}
