// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module allows retrieving application preferences from the GConf
// database, with the help of `gconftool-2`.
const Gconftool2InfoName = "gconftool2_info"

// Parameters for the `gconftool2_info` Ansible module.
type Gconftool2InfoParameters struct {
	// The key name for an element in the GConf database.
	Key string `json:"key"`
}

// Wrap the `Gconftool2InfoParameters into an `rpc.RPCCall`.
func (p Gconftool2InfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: Gconftool2InfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `gconftool2_info` Ansible module.
type Gconftool2InfoReturn struct {
	AnsibleCommonReturns

	// The value of the property.
	Value *string `json:"value,omitempty"`

	// Version of gconftool-2.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `Gconftool2InfoReturn`
func Gconftool2InfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (Gconftool2InfoReturn, error) {
	return cast.AnyToJSONT[Gconftool2InfoReturn](r.Result.Result)
}
