// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const CopyName = "copy"

//go:embed copy.zip
var CopyZipfile []byte

type CopyParameters struct {
	Src           *string `json:"src,omitempty"`
	Content       *string `json:"content,omitempty"`
	Dest          string  `json:"dest"`
	Backup        *bool   `json:"backup,omitempty"`
	Force         *bool   `json:"force,omitempty"`
	Mode          *string `json:"mode,omitempty"`
	DirectoryMode *any    `json:"directory_mode,omitempty"`
	RemoteSrc     *bool   `json:"remote_src,omitempty"`
	Follow        *bool   `json:"follow,omitempty"`
	LocalFollow   *bool   `json:"local_follow,omitempty"`
	Checksum      *string `json:"checksum,omitempty"`
}

func (p *CopyParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  CopyZipfile,
			Name: CopyName,
			Args: args,
		},
	}, nil
}

type CopyReturn struct {
	AnsibleCommonReturns
	Dest       *string `json:"dest,omitempty"`
	Src        *string `json:"src,omitempty"`
	Md5sum     *string `json:"md5sum,omitempty"`
	Checksum   *string `json:"checksum,omitempty"`
	BackupFile *string `json:"backup_file,omitempty"`
	Gid        *int    `json:"gid,omitempty"`
	Group      *string `json:"group,omitempty"`
	Owner      *string `json:"owner,omitempty"`
	Uid        *int    `json:"uid,omitempty"`
	Mode       *string `json:"mode,omitempty"`
	Size       *int    `json:"size,omitempty"`
	State      *string `json:"state,omitempty"`
}

func CopyReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (CopyReturn, error) {
	return rpc.AnyToJSONT[CopyReturn](r.Result.Result)
}
