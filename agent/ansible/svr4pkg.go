// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages SVR4 packages on Solaris 10 and 11.
// These were the native packages on Solaris <= 10 and are available as a legacy
// feature in Solaris 11.
// Note that this is a very basic packaging system. It will not enforce
// dependencies on install or remove.
const Svr4pkgName = "svr4pkg"

// Whether to install (`present`), or remove (`absent`) a package.
// If the package is to be installed, then `src` is required.
// The SVR4 package system does not provide an upgrade operation. You need to
// uninstall the old, then install the new package.
type Svr4pkgState string

const (
	Svr4pkgStatePresent Svr4pkgState = "present"
	Svr4pkgStateAbsent  Svr4pkgState = "absent"
)

// Whether to install the package only in the current zone, or install it into
// all zones.
// The installation into all zones works only if you are working with the global
// zone.
type Svr4pkgZone string

const (
	Svr4pkgZoneCurrent Svr4pkgZone = "current"
	Svr4pkgZoneAll     Svr4pkgZone = "all"
)

// Convert a supported type to an optional (pointer) Svr4pkgZone
func OptionalSvr4pkgZone[T interface {
	*Svr4pkgZone | Svr4pkgZone | *string | string
}](s T) *Svr4pkgZone {
	switch v := any(s).(type) {
	case *Svr4pkgZone:
		return v
	case Svr4pkgZone:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := Svr4pkgZone(*v)
		return &val
	case string:
		val := Svr4pkgZone(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `svr4pkg` Ansible module.
type Svr4pkgParameters struct {
	// Package name, for example `SUNWcsr`.
	Name string `json:"name"`

	// Whether to install (`present`), or remove (`absent`) a package.
	// If the package is to be installed, then `src` is required.
	// The SVR4 package system does not provide an upgrade operation. You need to
	// uninstall the old, then install the new package.
	State Svr4pkgState `json:"state"`

	// Specifies the location to install the package from. Required when
	// `state=present`.
	// Can be any path acceptable to the `pkgadd` command's `-d` option. For
	// example: `somefile.pkg`, `/dir/with/pkgs`, `http://server/mypkgs.pkg`.
	// If using a file or directory, they must already be accessible by the host.
	// See the `ansible.builtin.copy` module for a way to get them there.
	Src *string `json:"src,omitempty"`

	// HTTP[s] proxy to be used if `src` is a URL.
	Proxy *string `json:"proxy,omitempty"`

	// Specifies the location of a response file to be used if package expects
	// input on install.
	ResponseFile *string `json:"response_file,omitempty"`

	// Whether to install the package only in the current zone, or install it into
	// all zones.
	// The installation into all zones works only if you are working with the
	// global zone.
	// default: Svr4pkgZoneAll
	Zone *Svr4pkgZone `json:"zone,omitempty"`

	// Install/Remove category instead of a single package.
	// default: false
	Category *bool `json:"category,omitempty"`
}

// Wrap the `Svr4pkgParameters into an `rpc.RPCCall`.
func (p Svr4pkgParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: Svr4pkgName,
			Args: args,
		},
	}, nil
}

// Return values for the `svr4pkg` Ansible module.
type Svr4pkgReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `Svr4pkgReturn`
func Svr4pkgReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (Svr4pkgReturn, error) {
	return cast.AnyToJSONT[Svr4pkgReturn](r.Result.Result)
}
