// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages Android SDK packages.
// Allows installation from different channels (stable, beta, dev, canary).
// Allows installation of packages to a non-default SDK root directory.
const AndroidSdkName = "android_sdk"

// Indicates the desired package(s) state.
// `present` ensures that package(s) is/are present.
// `absent` ensures that package(s) is/are absent.
// `latest` ensures that package(s) is/are installed and updated to the latest
// version(s).
type AndroidSdkState string

const (
	AndroidSdkStatePresent AndroidSdkState = "present"
	AndroidSdkStateAbsent  AndroidSdkState = "absent"
	AndroidSdkStateLatest  AndroidSdkState = "latest"
)

func OptionalAndroidSdkState[T interface {
	*AndroidSdkState | AndroidSdkState | *string | string
}](s T) *AndroidSdkState {
	switch v := any(s).(type) {
	case *AndroidSdkState:
		return v
	case AndroidSdkState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AndroidSdkState(*v)
		return &val
	case string:
		val := AndroidSdkState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Indicates what channel must `sdkmanager` use for installation of packages.
type AndroidSdkChannel string

const (
	AndroidSdkChannelStable AndroidSdkChannel = "stable"
	AndroidSdkChannelBeta   AndroidSdkChannel = "beta"
	AndroidSdkChannelDev    AndroidSdkChannel = "dev"
	AndroidSdkChannelCanary AndroidSdkChannel = "canary"
)

func OptionalAndroidSdkChannel[T interface {
	*AndroidSdkChannel | AndroidSdkChannel | *string | string
}](s T) *AndroidSdkChannel {
	switch v := any(s).(type) {
	case *AndroidSdkChannel:
		return v
	case AndroidSdkChannel:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AndroidSdkChannel(*v)
		return &val
	case string:
		val := AndroidSdkChannel(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `android_sdk` Ansible module.
type AndroidSdkParameters struct {
	// If this is set to `true`, the module will try to accept license prompts
	// generated by `sdkmanager` during package installation. Otherwise, every
	// license prompt will be rejected.
	// default: false
	AcceptLicenses *bool `json:"accept_licenses,omitempty"`

	// A name of an Android SDK package (for instance, `build-tools;34.0.0`).
	Name *[]string `json:"name,omitempty"`

	// Indicates the desired package(s) state.
	// `present` ensures that package(s) is/are present.
	// `absent` ensures that package(s) is/are absent.
	// `latest` ensures that package(s) is/are installed and updated to the latest
	// version(s).
	// default: AndroidSdkStatePresent
	State *AndroidSdkState `json:"state,omitempty"`

	// Provides path for an alternative directory to install Android SDK packages
	// to. By default, all packages are installed to the directory where
	// `sdkmanager` is installed.
	SdkRoot *string `json:"sdk_root,omitempty"`

	// Indicates what channel must `sdkmanager` use for installation of packages.
	// default: AndroidSdkChannelStable
	Channel *AndroidSdkChannel `json:"channel,omitempty"`
}

// Wrap the `AndroidSdkParameters into an `rpc.RPCCall`.
func (p *AndroidSdkParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AndroidSdkName,
			Args: args,
		},
	}, nil
}

// Return values for the `android_sdk` Ansible module.
type AndroidSdkReturn struct {
	AnsibleCommonReturns

	// A list of packages that have been installed.
	Installed *[]any `json:"installed,omitempty"`

	// A list of packages that have been removed.
	Removed *[]any `json:"removed,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `AndroidSdkReturn`
func AndroidSdkReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AndroidSdkReturn, error) {
	return rpc.AnyToJSONT[AndroidSdkReturn](r.Result.Result)
}
