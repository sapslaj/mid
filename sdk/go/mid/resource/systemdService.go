// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/mid/sdk/go/mid"
	"github.com/sapslaj/mid/sdk/go/mid/internal"
)

type SystemdService struct {
	pulumi.CustomResourceState

	Config        mid.ResourceConfigPtrOutput `pulumi:"config"`
	Connection    mid.ConnectionPtrOutput     `pulumi:"connection"`
	DaemonReexec  pulumi.BoolPtrOutput        `pulumi:"daemonReexec"`
	DaemonReload  pulumi.BoolPtrOutput        `pulumi:"daemonReload"`
	Enabled       pulumi.BoolPtrOutput        `pulumi:"enabled"`
	Ensure        pulumi.StringPtrOutput      `pulumi:"ensure"`
	Force         pulumi.BoolPtrOutput        `pulumi:"force"`
	Masked        pulumi.BoolPtrOutput        `pulumi:"masked"`
	Name          pulumi.StringPtrOutput      `pulumi:"name"`
	NoBlock       pulumi.BoolPtrOutput        `pulumi:"noBlock"`
	RefreshAction pulumi.StringPtrOutput      `pulumi:"refreshAction"`
	Scope         pulumi.StringPtrOutput      `pulumi:"scope"`
	Triggers      mid.TriggersOutputOutput    `pulumi:"triggers"`
}

// NewSystemdService registers a new resource with the given unique name, arguments, and options.
func NewSystemdService(ctx *pulumi.Context,
	name string, args *SystemdServiceArgs, opts ...pulumi.ResourceOption) (*SystemdService, error) {
	if args == nil {
		args = &SystemdServiceArgs{}
	}

	if args.Connection != nil {
		args.Connection = args.Connection.ToConnectionPtrOutput().ApplyT(func(v *mid.Connection) *mid.Connection { return v.Defaults() }).(mid.ConnectionPtrOutput)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemdService
	err := ctx.RegisterResource("mid:resource:SystemdService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemdService gets an existing SystemdService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemdService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemdServiceState, opts ...pulumi.ResourceOption) (*SystemdService, error) {
	var resource SystemdService
	err := ctx.ReadResource("mid:resource:SystemdService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemdService resources.
type systemdServiceState struct {
}

type SystemdServiceState struct {
}

func (SystemdServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemdServiceState)(nil)).Elem()
}

type systemdServiceArgs struct {
	Config        *mid.ResourceConfig `pulumi:"config"`
	Connection    *mid.Connection     `pulumi:"connection"`
	DaemonReexec  *bool               `pulumi:"daemonReexec"`
	DaemonReload  *bool               `pulumi:"daemonReload"`
	Enabled       *bool               `pulumi:"enabled"`
	Ensure        *string             `pulumi:"ensure"`
	Force         *bool               `pulumi:"force"`
	Masked        *bool               `pulumi:"masked"`
	Name          *string             `pulumi:"name"`
	NoBlock       *bool               `pulumi:"noBlock"`
	RefreshAction *string             `pulumi:"refreshAction"`
	Scope         *string             `pulumi:"scope"`
	Triggers      *mid.TriggersInput  `pulumi:"triggers"`
}

// The set of arguments for constructing a SystemdService resource.
type SystemdServiceArgs struct {
	Config        mid.ResourceConfigPtrInput
	Connection    mid.ConnectionPtrInput
	DaemonReexec  pulumi.BoolPtrInput
	DaemonReload  pulumi.BoolPtrInput
	Enabled       pulumi.BoolPtrInput
	Ensure        pulumi.StringPtrInput
	Force         pulumi.BoolPtrInput
	Masked        pulumi.BoolPtrInput
	Name          pulumi.StringPtrInput
	NoBlock       pulumi.BoolPtrInput
	RefreshAction pulumi.StringPtrInput
	Scope         pulumi.StringPtrInput
	Triggers      mid.TriggersInputPtrInput
}

func (SystemdServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemdServiceArgs)(nil)).Elem()
}

type SystemdServiceInput interface {
	pulumi.Input

	ToSystemdServiceOutput() SystemdServiceOutput
	ToSystemdServiceOutputWithContext(ctx context.Context) SystemdServiceOutput
}

func (*SystemdService) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdService)(nil)).Elem()
}

func (i *SystemdService) ToSystemdServiceOutput() SystemdServiceOutput {
	return i.ToSystemdServiceOutputWithContext(context.Background())
}

func (i *SystemdService) ToSystemdServiceOutputWithContext(ctx context.Context) SystemdServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdServiceOutput)
}

// SystemdServiceArrayInput is an input type that accepts SystemdServiceArray and SystemdServiceArrayOutput values.
// You can construct a concrete instance of `SystemdServiceArrayInput` via:
//
//	SystemdServiceArray{ SystemdServiceArgs{...} }
type SystemdServiceArrayInput interface {
	pulumi.Input

	ToSystemdServiceArrayOutput() SystemdServiceArrayOutput
	ToSystemdServiceArrayOutputWithContext(context.Context) SystemdServiceArrayOutput
}

type SystemdServiceArray []SystemdServiceInput

func (SystemdServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemdService)(nil)).Elem()
}

func (i SystemdServiceArray) ToSystemdServiceArrayOutput() SystemdServiceArrayOutput {
	return i.ToSystemdServiceArrayOutputWithContext(context.Background())
}

func (i SystemdServiceArray) ToSystemdServiceArrayOutputWithContext(ctx context.Context) SystemdServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdServiceArrayOutput)
}

// SystemdServiceMapInput is an input type that accepts SystemdServiceMap and SystemdServiceMapOutput values.
// You can construct a concrete instance of `SystemdServiceMapInput` via:
//
//	SystemdServiceMap{ "key": SystemdServiceArgs{...} }
type SystemdServiceMapInput interface {
	pulumi.Input

	ToSystemdServiceMapOutput() SystemdServiceMapOutput
	ToSystemdServiceMapOutputWithContext(context.Context) SystemdServiceMapOutput
}

type SystemdServiceMap map[string]SystemdServiceInput

func (SystemdServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemdService)(nil)).Elem()
}

func (i SystemdServiceMap) ToSystemdServiceMapOutput() SystemdServiceMapOutput {
	return i.ToSystemdServiceMapOutputWithContext(context.Background())
}

func (i SystemdServiceMap) ToSystemdServiceMapOutputWithContext(ctx context.Context) SystemdServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdServiceMapOutput)
}

type SystemdServiceOutput struct{ *pulumi.OutputState }

func (SystemdServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdService)(nil)).Elem()
}

func (o SystemdServiceOutput) ToSystemdServiceOutput() SystemdServiceOutput {
	return o
}

func (o SystemdServiceOutput) ToSystemdServiceOutputWithContext(ctx context.Context) SystemdServiceOutput {
	return o
}

func (o SystemdServiceOutput) Config() mid.ResourceConfigPtrOutput {
	return o.ApplyT(func(v *SystemdService) mid.ResourceConfigPtrOutput { return v.Config }).(mid.ResourceConfigPtrOutput)
}

func (o SystemdServiceOutput) Connection() mid.ConnectionPtrOutput {
	return o.ApplyT(func(v *SystemdService) mid.ConnectionPtrOutput { return v.Connection }).(mid.ConnectionPtrOutput)
}

func (o SystemdServiceOutput) DaemonReexec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.BoolPtrOutput { return v.DaemonReexec }).(pulumi.BoolPtrOutput)
}

func (o SystemdServiceOutput) DaemonReload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.BoolPtrOutput { return v.DaemonReload }).(pulumi.BoolPtrOutput)
}

func (o SystemdServiceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o SystemdServiceOutput) Ensure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.StringPtrOutput { return v.Ensure }).(pulumi.StringPtrOutput)
}

func (o SystemdServiceOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o SystemdServiceOutput) Masked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.BoolPtrOutput { return v.Masked }).(pulumi.BoolPtrOutput)
}

func (o SystemdServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o SystemdServiceOutput) NoBlock() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.BoolPtrOutput { return v.NoBlock }).(pulumi.BoolPtrOutput)
}

func (o SystemdServiceOutput) RefreshAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.StringPtrOutput { return v.RefreshAction }).(pulumi.StringPtrOutput)
}

func (o SystemdServiceOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdService) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o SystemdServiceOutput) Triggers() mid.TriggersOutputOutput {
	return o.ApplyT(func(v *SystemdService) mid.TriggersOutputOutput { return v.Triggers }).(mid.TriggersOutputOutput)
}

type SystemdServiceArrayOutput struct{ *pulumi.OutputState }

func (SystemdServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemdService)(nil)).Elem()
}

func (o SystemdServiceArrayOutput) ToSystemdServiceArrayOutput() SystemdServiceArrayOutput {
	return o
}

func (o SystemdServiceArrayOutput) ToSystemdServiceArrayOutputWithContext(ctx context.Context) SystemdServiceArrayOutput {
	return o
}

func (o SystemdServiceArrayOutput) Index(i pulumi.IntInput) SystemdServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemdService {
		return vs[0].([]*SystemdService)[vs[1].(int)]
	}).(SystemdServiceOutput)
}

type SystemdServiceMapOutput struct{ *pulumi.OutputState }

func (SystemdServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemdService)(nil)).Elem()
}

func (o SystemdServiceMapOutput) ToSystemdServiceMapOutput() SystemdServiceMapOutput {
	return o
}

func (o SystemdServiceMapOutput) ToSystemdServiceMapOutputWithContext(ctx context.Context) SystemdServiceMapOutput {
	return o
}

func (o SystemdServiceMapOutput) MapIndex(k pulumi.StringInput) SystemdServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemdService {
		return vs[0].(map[string]*SystemdService)[vs[1].(string)]
	}).(SystemdServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdServiceInput)(nil)).Elem(), &SystemdService{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdServiceArrayInput)(nil)).Elem(), SystemdServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdServiceMapInput)(nil)).Elem(), SystemdServiceMap{})
	pulumi.RegisterOutputType(SystemdServiceOutput{})
	pulumi.RegisterOutputType(SystemdServiceArrayOutput{})
	pulumi.RegisterOutputType(SystemdServiceMapOutput{})
}
