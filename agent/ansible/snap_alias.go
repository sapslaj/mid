// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages snaps aliases.
const SnapAliasName = "snap_alias"

// Desired state of the alias.
type SnapAliasState string

const (
	SnapAliasStateAbsent  SnapAliasState = "absent"
	SnapAliasStatePresent SnapAliasState = "present"
)

// Convert a supported type to an optional (pointer) SnapAliasState
func OptionalSnapAliasState[T interface {
	*SnapAliasState | SnapAliasState | *string | string
}](s T) *SnapAliasState {
	switch v := any(s).(type) {
	case *SnapAliasState:
		return v
	case SnapAliasState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SnapAliasState(*v)
		return &val
	case string:
		val := SnapAliasState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `snap_alias` Ansible module.
type SnapAliasParameters struct {
	// Desired state of the alias.
	// default: SnapAliasStatePresent
	State *SnapAliasState `json:"state,omitempty"`

	// Name of the snap.
	Name *string `json:"name,omitempty"`

	// Aliases to be created or removed.
	Alias *[]string `json:"alias,omitempty"`
}

// Wrap the `SnapAliasParameters into an `rpc.RPCCall`.
func (p SnapAliasParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SnapAliasName,
			Args: args,
		},
	}, nil
}

// Return values for the `snap_alias` Ansible module.
type SnapAliasReturn struct {
	AnsibleCommonReturns

	// The snap aliases after execution. If called in check mode, then the list
	// represents the state before execution.
	SnapAliases *[]string `json:"snap_aliases,omitempty"`

	// Versions of snap components as reported by `snap version`.
	Version *map[string]any `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SnapAliasReturn`
func SnapAliasReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SnapAliasReturn, error) {
	return rpc.AnyToJSONT[SnapAliasReturn](r.Result.Result)
}
