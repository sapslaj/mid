// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manage packages using 'installp' on AIX.
const InstallpName = "installp"

// Whether the package needs to be present on or absent from the system.
type InstallpState string

const (
	InstallpStateAbsent  InstallpState = "absent"
	InstallpStatePresent InstallpState = "present"
)

// Convert a supported type to an optional (pointer) InstallpState
func OptionalInstallpState[T interface {
	*InstallpState | InstallpState | *string | string
}](s T) *InstallpState {
	switch v := any(s).(type) {
	case *InstallpState:
		return v
	case InstallpState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := InstallpState(*v)
		return &val
	case string:
		val := InstallpState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `installp` Ansible module.
type InstallpParameters struct {
	// Whether to accept the license for the package(s).
	// default: false
	AcceptLicense *bool `json:"accept_license,omitempty"`

	// One or more packages to install or remove.
	// Use `all` to install all packages available on informed `repository_path`.
	Name []string `json:"name"`

	// Path with AIX packages (required to install).
	RepositoryPath *string `json:"repository_path,omitempty"`

	// Whether the package needs to be present on or absent from the system.
	// default: InstallpStatePresent
	State *InstallpState `json:"state,omitempty"`
}

// Wrap the `InstallpParameters into an `rpc.RPCCall`.
func (p InstallpParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: InstallpName,
			Args: args,
		},
	}, nil
}

// Return values for the `installp` Ansible module.
type InstallpReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `InstallpReturn`
func InstallpReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (InstallpReturn, error) {
	return rpc.AnyToJSONT[InstallpReturn](r.Result.Result)
}
