# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import types as _types

__all__ = ["ServiceArgs", "Service"]


@pulumi.input_type
class ServiceArgs:
    def __init__(
        __self__,
        *,
        arguments: Optional[pulumi.Input[str]] = None,
        enabled: Optional[pulumi.Input[bool]] = None,
        name: Optional[pulumi.Input[str]] = None,
        pattern: Optional[pulumi.Input[str]] = None,
        runlevel: Optional[pulumi.Input[str]] = None,
        sleep: Optional[pulumi.Input[int]] = None,
        state: Optional[pulumi.Input[str]] = None,
        triggers: Optional[pulumi.Input["_types.TriggersInputArgs"]] = None,
        use: Optional[pulumi.Input[str]] = None,
    ):
        """
        The set of arguments for constructing a Service resource.
        """
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if runlevel is not None:
            pulumi.set(__self__, "runlevel", runlevel)
        if sleep is not None:
            pulumi.set(__self__, "sleep", sleep)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def runlevel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runlevel")

    @runlevel.setter
    def runlevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runlevel", value)

    @property
    @pulumi.getter
    def sleep(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sleep")

    @sleep.setter
    def sleep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sleep", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input["_types.TriggersInputArgs"]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input["_types.TriggersInputArgs"]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def use(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        arguments: Optional[pulumi.Input[str]] = None,
        enabled: Optional[pulumi.Input[bool]] = None,
        name: Optional[pulumi.Input[str]] = None,
        pattern: Optional[pulumi.Input[str]] = None,
        runlevel: Optional[pulumi.Input[str]] = None,
        sleep: Optional[pulumi.Input[int]] = None,
        state: Optional[pulumi.Input[str]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        use: Optional[pulumi.Input[str]] = None,
        __props__=None,
    ):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: Optional[ServiceArgs] = None,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            ServiceArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        arguments: Optional[pulumi.Input[str]] = None,
        enabled: Optional[pulumi.Input[bool]] = None,
        name: Optional[pulumi.Input[str]] = None,
        pattern: Optional[pulumi.Input[str]] = None,
        runlevel: Optional[pulumi.Input[str]] = None,
        sleep: Optional[pulumi.Input[int]] = None,
        state: Optional[pulumi.Input[str]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        use: Optional[pulumi.Input[str]] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["arguments"] = arguments
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["pattern"] = pattern
            __props__.__dict__["runlevel"] = runlevel
            __props__.__dict__["sleep"] = sleep
            __props__.__dict__["state"] = state
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["use"] = use
        super(Service, __self__).__init__(
            "mid:resource:Service", resource_name, __props__, opts
        )

    @staticmethod
    def get(
        resource_name: str,
        id: pulumi.Input[str],
        opts: Optional[pulumi.ResourceOptions] = None,
    ) -> "Service":
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceArgs.__new__(ServiceArgs)

        __props__.__dict__["arguments"] = None
        __props__.__dict__["enabled"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["pattern"] = None
        __props__.__dict__["runlevel"] = None
        __props__.__dict__["sleep"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["use"] = None
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arguments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def runlevel(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "runlevel")

    @property
    @pulumi.getter
    def sleep(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "sleep")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output["_types.outputs.TriggersOutput"]:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def use(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "use")
