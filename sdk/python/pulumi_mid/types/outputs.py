# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    "Connection",
    "ExecCommand",
    "TriggersOutput",
]


@pulumi.output_type
class Connection(dict):
    """
    Instructions for how to connect to a remote endpoint.
    """

    def __init__(
        __self__,
        *,
        host: str,
        password: Optional[str] = None,
        port: Optional[float] = None,
        private_key: Optional[str] = None,
        user: Optional[str] = None,
    ):
        """
        Instructions for how to connect to a remote endpoint.
        :param str host: The address of the resource to connect to.
        :param str password: The password we should use for the connection.
        :param float port: The port to connect to. Defaults to 22.
        :param str private_key: The contents of an SSH key to use for the
               connection. This takes preference over the password if provided.
        :param str user: The user that we should use for the connection.
        """
        pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is None:
            port = 22
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if user is None:
            user = "root"
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The address of the resource to connect to.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password we should use for the connection.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[float]:
        """
        The port to connect to. Defaults to 22.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        The contents of an SSH key to use for the
        connection. This takes preference over the password if provided.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The user that we should use for the connection.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class ExecCommand(dict):
    def __init__(
        __self__,
        *,
        command: Sequence[str],
        dir: Optional[str] = None,
        environment: Optional[Mapping[str, str]] = None,
        stdin: Optional[str] = None,
    ):
        """
        :param Sequence[str] command: List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        :param str dir: Directory path to chdir to before executing the command. Defaults to the
               default working directory for the SSH user and session, usually the user's
               home.
        :param Mapping[str, str] environment: Key-value pairs of environment variables to pass to the process. These are
               merged with any system-wide environment variables.
        :param str stdin: Pass a string to the command's process as standard in.
        """
        pulumi.set(__self__, "command", command)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)

    @property
    @pulumi.getter
    def command(self) -> Sequence[str]:
        """
        List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        """
        Directory path to chdir to before executing the command. Defaults to the
        default working directory for the SSH user and session, usually the user's
        home.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        """
        Key-value pairs of environment variables to pass to the process. These are
        merged with any system-wide environment variables.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[str]:
        """
        Pass a string to the command's process as standard in.
        """
        return pulumi.get(self, "stdin")


@pulumi.output_type
class TriggersOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastChanged":
            suggest = "last_changed"

        if suggest:
            pulumi.log.warn(
                f"Key '{key}' not found in TriggersOutput. Access the value via the '{suggest}' property getter instead."
            )

    def __getitem__(self, key: str) -> Any:
        TriggersOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default=None) -> Any:
        TriggersOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(
        __self__,
        *,
        last_changed: str,
        refresh: Optional[Sequence[Any]] = None,
        replace: Optional[Sequence[Any]] = None,
    ):
        """
        :param str last_changed: RFC 3339 timestamp of when this resource last changed. Use this property
               to chain into other resources' `refresh` and `replace` triggers.
        :param Sequence[Any] refresh: Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
               any value in this list changes.
        :param Sequence[Any] replace: Completely delete and replace the resource if any value in this list
               changes.
        """
        pulumi.set(__self__, "last_changed", last_changed)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="lastChanged")
    def last_changed(self) -> str:
        """
        RFC 3339 timestamp of when this resource last changed. Use this property
        to chain into other resources' `refresh` and `replace` triggers.
        """
        return pulumi.get(self, "last_changed")

    @property
    @pulumi.getter
    def refresh(self) -> Optional[Sequence[Any]]:
        """
        Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
        any value in this list changes.
        """
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def replace(self) -> Optional[Sequence[Any]]:
        """
        Completely delete and replace the resource if any value in this list
        changes.
        """
        return pulumi.get(self, "replace")
