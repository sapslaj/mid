// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manage packages for FreeBSD using `portinstall`.
const PortinstallName = "portinstall"

// State of the package.
type PortinstallState string

const (
	PortinstallStatePresent PortinstallState = "present"
	PortinstallStateAbsent  PortinstallState = "absent"
)

// Convert a supported type to an optional (pointer) PortinstallState
func OptionalPortinstallState[T interface {
	*PortinstallState | PortinstallState | *string | string
}](s T) *PortinstallState {
	switch v := any(s).(type) {
	case *PortinstallState:
		return v
	case PortinstallState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := PortinstallState(*v)
		return &val
	case string:
		val := PortinstallState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `portinstall` Ansible module.
type PortinstallParameters struct {
	// Name of package to install/remove.
	Name string `json:"name"`

	// State of the package.
	// default: PortinstallStatePresent
	State *PortinstallState `json:"state,omitempty"`

	// Use packages instead of ports whenever available.
	// default: true
	UsePackages *bool `json:"use_packages,omitempty"`
}

// Wrap the `PortinstallParameters into an `rpc.RPCCall`.
func (p PortinstallParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PortinstallName,
			Args: args,
		},
	}, nil
}

// Return values for the `portinstall` Ansible module.
type PortinstallReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `PortinstallReturn`
func PortinstallReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PortinstallReturn, error) {
	return cast.AnyToJSONT[PortinstallReturn](r.Result.Result)
}
