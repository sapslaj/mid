// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manage packages on SUSE and openSUSE using the zypper and rpm tools.
// Also supports transactional updates, by running zypper inside
// `/sbin/transactional-update --continue --drop-if-no-change --quiet run`.
const ZypperName = "zypper"

// `present` makes sure the package is installed.
// `latest` makes sure the latest version of the package is installed.
// `absent` makes sure the specified package is not installed.
// `dist-upgrade` makes sure the latest version of all installed packages from
// all enabled repositories is installed.
// When using `dist-upgrade`, `name` should be `*`.
type ZypperState string

const (
	ZypperStatePresent     ZypperState = "present"
	ZypperStateLatest      ZypperState = "latest"
	ZypperStateAbsent      ZypperState = "absent"
	ZypperStateDistUpgrade ZypperState = "dist-upgrade"
	ZypperStateInstalled   ZypperState = "installed"
	ZypperStateRemoved     ZypperState = "removed"
)

// Convert a supported type to an optional (pointer) ZypperState
func OptionalZypperState[T interface {
	*ZypperState | ZypperState | *string | string
}](s T) *ZypperState {
	switch v := any(s).(type) {
	case *ZypperState:
		return v
	case ZypperState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := ZypperState(*v)
		return &val
	case string:
		val := ZypperState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The type of package to be operated on.
type ZypperType string

const (
	ZypperTypePackage     ZypperType = "package"
	ZypperTypePatch       ZypperType = "patch"
	ZypperTypePattern     ZypperType = "pattern"
	ZypperTypeProduct     ZypperType = "product"
	ZypperTypeSrcpackage  ZypperType = "srcpackage"
	ZypperTypeApplication ZypperType = "application"
)

// Convert a supported type to an optional (pointer) ZypperType
func OptionalZypperType[T interface {
	*ZypperType | ZypperType | *string | string
}](s T) *ZypperType {
	switch v := any(s).(type) {
	case *ZypperType:
		return v
	case ZypperType:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := ZypperType(*v)
		return &val
	case string:
		val := ZypperType(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `zypper` Ansible module.
type ZypperParameters struct {
	// Package name `name` or package specifier or a list of either.
	// Can include a version like `name=1.0`, `name>3.4` or `name<=2.7`. If a
	// version is given, `oldpackage` is implied and zypper is allowed to update
	// the package within the version range given.
	// You can also pass a URL or a local path to a rpm file.
	// When using `state=latest`, this can be `*`, which updates all installed
	// packages.
	Name []string `json:"name"`

	// `present` makes sure the package is installed.
	// `latest` makes sure the latest version of the package is installed.
	// `absent` makes sure the specified package is not installed.
	// `dist-upgrade` makes sure the latest version of all installed packages from
	// all enabled repositories is installed.
	// When using `dist-upgrade`, `name` should be `*`.
	// default: ZypperStatePresent
	State *ZypperState `json:"state,omitempty"`

	// The type of package to be operated on.
	// default: ZypperTypePackage
	Type *ZypperType `json:"type,omitempty"`

	// Add additional global target options to `zypper`.
	// Options should be supplied in a single line as if given in the command line.
	ExtraArgsPrecommand *string `json:"extra_args_precommand,omitempty"`

	// Whether to disable to GPG signature checking of the package signature being
	// installed. Has an effect only if `state` is `present` or `latest`.
	// default: false
	DisableGpgCheck *bool `json:"disable_gpg_check,omitempty"`

	// Corresponds to the `--no-recommends` option for `zypper`. Default behavior
	// (`true`) modifies zypper's default behavior; `false` does install
	// recommended packages.
	// default: true
	DisableRecommends *bool `json:"disable_recommends,omitempty"`

	// Adds `--force` option to `zypper`. Allows to downgrade packages and change
	// vendor or architecture.
	// default: false
	Force *bool `json:"force,omitempty"`

	// Adds `--force-resolution` option to `zypper`. Allows to (un)install packages
	// with conflicting requirements (resolver chooses a solution).
	// default: false
	ForceResolution *bool `json:"force_resolution,omitempty"`

	// Run the equivalent of `zypper refresh` before the operation. Disabled in
	// check mode.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`

	// Adds `--oldpackage` option to `zypper`. Allows to downgrade packages with
	// less side-effects than force. This is implied as soon as a version is
	// specified as part of the package name.
	// default: false
	Oldpackage *bool `json:"oldpackage,omitempty"`

	// Add additional options to `zypper` command.
	// Options should be supplied in a single line as if given in the command line.
	ExtraArgs *string `json:"extra_args,omitempty"`

	// Adds `--allow_vendor_change` option to `zypper` dist-upgrade command.
	// default: false
	AllowVendorChange *bool `json:"allow_vendor_change,omitempty"`

	// Adds `--replacefiles` option to `zypper` install/update command.
	// default: false
	Replacefiles *bool `json:"replacefiles,omitempty"`

	// Adds `--clean-deps` option to `zypper` remove command.
	// default: false
	CleanDeps *bool `json:"clean_deps,omitempty"`

	// When set to `true`, provide a simplified error output (parses only the
	// `<message>` tag text in the XML output).
	// default: false
	SimpleErrors *bool `json:"simple_errors,omitempty"`

	// Adds `--quiet` option to `zypper` install/update command.
	// default: true
	Quiet *bool `json:"quiet,omitempty"`

	// When set to `true`, ignore `zypper` return code 107 (post install script
	// errors).
	// default: false
	SkipPostErrors *bool `json:"skip_post_errors,omitempty"`
}

// Wrap the `ZypperParameters into an `rpc.RPCCall`.
func (p ZypperParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: ZypperName,
			Args: args,
		},
	}, nil
}

// Return values for the `zypper` Ansible module.
type ZypperReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `ZypperReturn`
func ZypperReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (ZypperReturn, error) {
	return rpc.AnyToJSONT[ZypperReturn](r.Result.Result)
}
