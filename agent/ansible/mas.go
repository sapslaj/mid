// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Installs, uninstalls and updates macOS applications from the Mac App Store
// using the `mas-cli`.
const MasName = "mas"

// Desired state of the app installation.
// The `absent` value requires root permissions, also see the examples.
type MasState string

const (
	MasStateAbsent  MasState = "absent"
	MasStateLatest  MasState = "latest"
	MasStatePresent MasState = "present"
)

func OptionalMasState[T interface {
	*MasState | MasState | *string | string
}](s T) *MasState {
	switch v := any(s).(type) {
	case *MasState:
		return v
	case MasState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := MasState(*v)
		return &val
	case string:
		val := MasState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `mas` Ansible module.
type MasParameters struct {
	// The Mac App Store identifier of the app(s) you want to manage.
	// This can be found by running `mas search APP_NAME` on your machine.
	Id *[]int `json:"id,omitempty"`

	// Desired state of the app installation.
	// The `absent` value requires root permissions, also see the examples.
	// default: MasStatePresent
	State *MasState `json:"state,omitempty"`

	// Upgrade all installed Mac App Store apps.
	// default: false
	UpgradeAll *bool `json:"upgrade_all,omitempty"`
}

// Wrap the `MasParameters into an `rpc.RPCCall`.
func (p *MasParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: MasName,
			Args: args,
		},
	}, nil
}

// Return values for the `mas` Ansible module.
type MasReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `MasReturn`
func MasReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (MasReturn, error) {
	return rpc.AnyToJSONT[MasReturn](r.Result.Result)
}
