// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Change dpkg package selection state via `--get-selections` and `--set-
// selections`.
const DpkgSelectionsName = "dpkg_selections"

// The selection state to set the package to.
type DpkgSelectionsSelection string

const (
	DpkgSelectionsSelectionInstall   DpkgSelectionsSelection = "install"
	DpkgSelectionsSelectionHold      DpkgSelectionsSelection = "hold"
	DpkgSelectionsSelectionDeinstall DpkgSelectionsSelection = "deinstall"
	DpkgSelectionsSelectionPurge     DpkgSelectionsSelection = "purge"
)

// Parameters for the `dpkg_selections` Ansible module.
type DpkgSelectionsParameters struct {
	// Name of the package.
	Name string `json:"name"`

	// The selection state to set the package to.
	Selection DpkgSelectionsSelection `json:"selection"`
}

// Wrap the `DpkgSelectionsParameters into an `rpc.RPCCall`.
func (p *DpkgSelectionsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DpkgSelectionsName,
			Args: args,
		},
	}, nil
}

// Return values for the `dpkg_selections` Ansible module.
type DpkgSelectionsReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `DpkgSelectionsReturn`
func DpkgSelectionsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DpkgSelectionsReturn, error) {
	return rpc.AnyToJSONT[DpkgSelectionsReturn](r.Result.Result)
}
