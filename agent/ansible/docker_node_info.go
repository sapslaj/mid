// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Retrieves facts about a docker node.
// Essentially returns the output of `docker node inspect <name>`.
// Must be executed on a host running as Swarm Manager, otherwise the module
// will fail.
const DockerNodeInfoName = "docker_node_info"

// Parameters for the `docker_node_info` Ansible module.
type DockerNodeInfoParameters struct {
	// The name of the node to inspect.
	// The list of nodes names to inspect.
	// If empty then return information of all nodes in Swarm cluster.
	// When identifying the node use either the hostname of the node (as registered
	// in Swarm) or node ID.
	// If `self=true` then this parameter is ignored.
	Name *[]string `json:"name,omitempty"`

	// If `true`, queries the node (that is, the docker daemon) the module
	// communicates with.
	// If `true` then `name` is ignored.
	// If `false` then query depends on `name` presence and value.
	// default: false
	Self *bool `json:"self,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	// `Note:` this option is no longer supported for Docker SDK for Python 7.0.0+.
	// Specifying it with Docker SDK for Python 7.0.0 or newer will lead to an
	// error.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by Docker SDK for Python
	// and the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// Requires Docker SDK for Python 4.4.0 or newer.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode.
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerNodeInfoParameters into an `rpc.RPCCall`.
func (p DockerNodeInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerNodeInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_node_info` Ansible module.
type DockerNodeInfoReturn struct {
	AnsibleCommonReturns

	// Facts representing the current state of the nodes. Matches the `docker node
	// inspect` output.
	// Can contain multiple entries if more than one node provided in `name`, or
	// `name` is not provided.
	// If `name` contains a list of nodes, the output will provide information on
	// all nodes registered at the swarm, including nodes that left the swarm but
	// have not been removed from the cluster on swarm managers and nodes that are
	// unreachable.
	Nodes *map[string]any `json:"nodes,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerNodeInfoReturn`
func DockerNodeInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerNodeInfoReturn, error) {
	return cast.AnyToJSONT[DockerNodeInfoReturn](r.Result.Result)
}
