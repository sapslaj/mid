// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/mid/sdk/go/mid/internal"
	"github.com/sapslaj/mid/sdk/go/mid/types"
)

type File struct {
	pulumi.CustomResourceState

	AccessTime             pulumi.StringPtrOutput      `pulumi:"accessTime"`
	AccessTimeFormat       pulumi.StringPtrOutput      `pulumi:"accessTimeFormat"`
	Attributes             pulumi.StringPtrOutput      `pulumi:"attributes"`
	Backup                 pulumi.BoolPtrOutput        `pulumi:"backup"`
	BackupFile             pulumi.StringPtrOutput      `pulumi:"backupFile"`
	Checksum               pulumi.StringPtrOutput      `pulumi:"checksum"`
	Content                pulumi.StringPtrOutput      `pulumi:"content"`
	DirectoryMode          pulumi.StringPtrOutput      `pulumi:"directoryMode"`
	Ensure                 pulumi.StringPtrOutput      `pulumi:"ensure"`
	Follow                 pulumi.BoolPtrOutput        `pulumi:"follow"`
	Force                  pulumi.BoolPtrOutput        `pulumi:"force"`
	Group                  pulumi.StringPtrOutput      `pulumi:"group"`
	LocalFollow            pulumi.BoolPtrOutput        `pulumi:"localFollow"`
	Mode                   pulumi.StringPtrOutput      `pulumi:"mode"`
	ModificationTime       pulumi.StringPtrOutput      `pulumi:"modificationTime"`
	ModificationTimeFormat pulumi.StringPtrOutput      `pulumi:"modificationTimeFormat"`
	Owner                  pulumi.StringPtrOutput      `pulumi:"owner"`
	Path                   pulumi.StringOutput         `pulumi:"path"`
	Recurse                pulumi.BoolPtrOutput        `pulumi:"recurse"`
	RemoteSource           pulumi.StringPtrOutput      `pulumi:"remoteSource"`
	Selevel                pulumi.StringPtrOutput      `pulumi:"selevel"`
	Serole                 pulumi.StringPtrOutput      `pulumi:"serole"`
	Setype                 pulumi.StringPtrOutput      `pulumi:"setype"`
	Seuser                 pulumi.StringPtrOutput      `pulumi:"seuser"`
	Source                 pulumi.AssetOrArchiveOutput `pulumi:"source"`
	Stat                   FileStateStatOutput         `pulumi:"stat"`
	Triggers               types.TriggersOutputOutput  `pulumi:"triggers"`
	UnsafeWrites           pulumi.BoolPtrOutput        `pulumi:"unsafeWrites"`
	Validate               pulumi.StringPtrOutput      `pulumi:"validate"`
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOption) (*File, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource File
	err := ctx.RegisterResource("mid:resource:File", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileState, opts ...pulumi.ResourceOption) (*File, error) {
	var resource File
	err := ctx.ReadResource("mid:resource:File", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering File resources.
type fileState struct {
}

type FileState struct {
}

func (FileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileState)(nil)).Elem()
}

type fileArgs struct {
	AccessTime             *string               `pulumi:"accessTime"`
	AccessTimeFormat       *string               `pulumi:"accessTimeFormat"`
	Attributes             *string               `pulumi:"attributes"`
	Backup                 *bool                 `pulumi:"backup"`
	Checksum               *string               `pulumi:"checksum"`
	Content                *string               `pulumi:"content"`
	DirectoryMode          *string               `pulumi:"directoryMode"`
	Ensure                 *string               `pulumi:"ensure"`
	Follow                 *bool                 `pulumi:"follow"`
	Force                  *bool                 `pulumi:"force"`
	Group                  *string               `pulumi:"group"`
	LocalFollow            *bool                 `pulumi:"localFollow"`
	Mode                   *string               `pulumi:"mode"`
	ModificationTime       *string               `pulumi:"modificationTime"`
	ModificationTimeFormat *string               `pulumi:"modificationTimeFormat"`
	Owner                  *string               `pulumi:"owner"`
	Path                   string                `pulumi:"path"`
	Recurse                *bool                 `pulumi:"recurse"`
	RemoteSource           *string               `pulumi:"remoteSource"`
	Selevel                *string               `pulumi:"selevel"`
	Serole                 *string               `pulumi:"serole"`
	Setype                 *string               `pulumi:"setype"`
	Seuser                 *string               `pulumi:"seuser"`
	Source                 pulumi.AssetOrArchive `pulumi:"source"`
	Triggers               *types.TriggersInput  `pulumi:"triggers"`
	UnsafeWrites           *bool                 `pulumi:"unsafeWrites"`
	Validate               *string               `pulumi:"validate"`
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	AccessTime             pulumi.StringPtrInput
	AccessTimeFormat       pulumi.StringPtrInput
	Attributes             pulumi.StringPtrInput
	Backup                 pulumi.BoolPtrInput
	Checksum               pulumi.StringPtrInput
	Content                pulumi.StringPtrInput
	DirectoryMode          pulumi.StringPtrInput
	Ensure                 pulumi.StringPtrInput
	Follow                 pulumi.BoolPtrInput
	Force                  pulumi.BoolPtrInput
	Group                  pulumi.StringPtrInput
	LocalFollow            pulumi.BoolPtrInput
	Mode                   pulumi.StringPtrInput
	ModificationTime       pulumi.StringPtrInput
	ModificationTimeFormat pulumi.StringPtrInput
	Owner                  pulumi.StringPtrInput
	Path                   pulumi.StringInput
	Recurse                pulumi.BoolPtrInput
	RemoteSource           pulumi.StringPtrInput
	Selevel                pulumi.StringPtrInput
	Serole                 pulumi.StringPtrInput
	Setype                 pulumi.StringPtrInput
	Seuser                 pulumi.StringPtrInput
	Source                 pulumi.AssetOrArchiveInput
	Triggers               types.TriggersInputPtrInput
	UnsafeWrites           pulumi.BoolPtrInput
	Validate               pulumi.StringPtrInput
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileArgs)(nil)).Elem()
}

type FileInput interface {
	pulumi.Input

	ToFileOutput() FileOutput
	ToFileOutputWithContext(ctx context.Context) FileOutput
}

func (*File) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (i *File) ToFileOutput() FileOutput {
	return i.ToFileOutputWithContext(context.Background())
}

func (i *File) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOutput)
}

// FileArrayInput is an input type that accepts FileArray and FileArrayOutput values.
// You can construct a concrete instance of `FileArrayInput` via:
//
//	FileArray{ FileArgs{...} }
type FileArrayInput interface {
	pulumi.Input

	ToFileArrayOutput() FileArrayOutput
	ToFileArrayOutputWithContext(context.Context) FileArrayOutput
}

type FileArray []FileInput

func (FileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (i FileArray) ToFileArrayOutput() FileArrayOutput {
	return i.ToFileArrayOutputWithContext(context.Background())
}

func (i FileArray) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileArrayOutput)
}

// FileMapInput is an input type that accepts FileMap and FileMapOutput values.
// You can construct a concrete instance of `FileMapInput` via:
//
//	FileMap{ "key": FileArgs{...} }
type FileMapInput interface {
	pulumi.Input

	ToFileMapOutput() FileMapOutput
	ToFileMapOutputWithContext(context.Context) FileMapOutput
}

type FileMap map[string]FileInput

func (FileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (i FileMap) ToFileMapOutput() FileMapOutput {
	return i.ToFileMapOutputWithContext(context.Background())
}

func (i FileMap) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileMapOutput)
}

type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

func (o FileOutput) AccessTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.AccessTime }).(pulumi.StringPtrOutput)
}

func (o FileOutput) AccessTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.AccessTimeFormat }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Attributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Attributes }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.Backup }).(pulumi.BoolPtrOutput)
}

func (o FileOutput) BackupFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.BackupFile }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Checksum }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

func (o FileOutput) DirectoryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.DirectoryMode }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Ensure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Ensure }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Follow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.Follow }).(pulumi.BoolPtrOutput)
}

func (o FileOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o FileOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

func (o FileOutput) LocalFollow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.LocalFollow }).(pulumi.BoolPtrOutput)
}

func (o FileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o FileOutput) ModificationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.ModificationTime }).(pulumi.StringPtrOutput)
}

func (o FileOutput) ModificationTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.ModificationTimeFormat }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o FileOutput) Recurse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.Recurse }).(pulumi.BoolPtrOutput)
}

func (o FileOutput) RemoteSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.RemoteSource }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Selevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Selevel }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Serole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Serole }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Setype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Setype }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Seuser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Seuser }).(pulumi.StringPtrOutput)
}

func (o FileOutput) Source() pulumi.AssetOrArchiveOutput {
	return o.ApplyT(func(v *File) pulumi.AssetOrArchiveOutput { return v.Source }).(pulumi.AssetOrArchiveOutput)
}

func (o FileOutput) Stat() FileStateStatOutput {
	return o.ApplyT(func(v *File) FileStateStatOutput { return v.Stat }).(FileStateStatOutput)
}

func (o FileOutput) Triggers() types.TriggersOutputOutput {
	return o.ApplyT(func(v *File) types.TriggersOutputOutput { return v.Triggers }).(types.TriggersOutputOutput)
}

func (o FileOutput) UnsafeWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.UnsafeWrites }).(pulumi.BoolPtrOutput)
}

func (o FileOutput) Validate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Validate }).(pulumi.StringPtrOutput)
}

type FileArrayOutput struct{ *pulumi.OutputState }

func (FileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (o FileArrayOutput) ToFileArrayOutput() FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return o
}

func (o FileArrayOutput) Index(i pulumi.IntInput) FileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *File {
		return vs[0].([]*File)[vs[1].(int)]
	}).(FileOutput)
}

type FileMapOutput struct{ *pulumi.OutputState }

func (FileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (o FileMapOutput) ToFileMapOutput() FileMapOutput {
	return o
}

func (o FileMapOutput) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return o
}

func (o FileMapOutput) MapIndex(k pulumi.StringInput) FileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *File {
		return vs[0].(map[string]*File)[vs[1].(string)]
	}).(FileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileInput)(nil)).Elem(), &File{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileArrayInput)(nil)).Elem(), FileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileMapInput)(nil)).Elem(), FileMap{})
	pulumi.RegisterOutputType(FileOutput{})
	pulumi.RegisterOutputType(FileArrayOutput{})
	pulumi.RegisterOutputType(FileMapOutput{})
}
