// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages docker services through a swarm manager node.
// This modules does not support updating services in a stack.
const DockerSwarmServiceName = "docker_swarm_service"

// Service endpoint mode.
// Corresponds to the `--endpoint-mode` option of `docker service create`.
type DockerSwarmServiceEndpointMode string

const (
	DockerSwarmServiceEndpointModeVip   DockerSwarmServiceEndpointMode = "vip"
	DockerSwarmServiceEndpointModeDnsrr DockerSwarmServiceEndpointMode = "dnsrr"
)

// Convert a supported type to an optional (pointer) DockerSwarmServiceEndpointMode
func OptionalDockerSwarmServiceEndpointMode[T interface {
	*DockerSwarmServiceEndpointMode | DockerSwarmServiceEndpointMode | *string | string
}](s T) *DockerSwarmServiceEndpointMode {
	switch v := any(s).(type) {
	case *DockerSwarmServiceEndpointMode:
		return v
	case DockerSwarmServiceEndpointMode:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerSwarmServiceEndpointMode(*v)
		return &val
	case string:
		val := DockerSwarmServiceEndpointMode(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Service replication mode.
// Service will be removed and recreated when changed.
// Corresponds to the `--mode` option of `docker service create`.
// The value `replicated-job` was added in community.docker 4.7.0, and requires
// API version >= 1.41 and Docker SDK for Python >= 6.0.0.
type DockerSwarmServiceMode string

const (
	DockerSwarmServiceModeReplicated    DockerSwarmServiceMode = "replicated"
	DockerSwarmServiceModeGlobal        DockerSwarmServiceMode = "global"
	DockerSwarmServiceModeReplicatedJob DockerSwarmServiceMode = "replicated-job"
)

// Convert a supported type to an optional (pointer) DockerSwarmServiceMode
func OptionalDockerSwarmServiceMode[T interface {
	*DockerSwarmServiceMode | DockerSwarmServiceMode | *string | string
}](s T) *DockerSwarmServiceMode {
	switch v := any(s).(type) {
	case *DockerSwarmServiceMode:
		return v
	case DockerSwarmServiceMode:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerSwarmServiceMode(*v)
		return &val
	case string:
		val := DockerSwarmServiceMode(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// `absent` - A service matching the specified name will be removed and have its
// tasks stopped.
// `present` - Asserts the existence of a service matching the name and provided
// configuration parameters. Unspecified configuration parameters will be set to
// docker defaults.
type DockerSwarmServiceState string

const (
	DockerSwarmServiceStatePresent DockerSwarmServiceState = "present"
	DockerSwarmServiceStateAbsent  DockerSwarmServiceState = "absent"
)

// Convert a supported type to an optional (pointer) DockerSwarmServiceState
func OptionalDockerSwarmServiceState[T interface {
	*DockerSwarmServiceState | DockerSwarmServiceState | *string | string
}](s T) *DockerSwarmServiceState {
	switch v := any(s).(type) {
	case *DockerSwarmServiceState:
		return v
	case DockerSwarmServiceState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerSwarmServiceState(*v)
		return &val
	case string:
		val := DockerSwarmServiceState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_swarm_service` Ansible module.
type DockerSwarmServiceParameters struct {
	// List arguments to be passed to the container.
	// Corresponds to the `ARG` parameter of `docker service create`.
	Args *[]string `json:"args,omitempty"`

	// Command to execute when the container starts.
	// A command may be either a string or a list or a list of strings.
	// Corresponds to the `COMMAND` parameter of `docker service create`.
	Command *any `json:"command,omitempty"`

	// List of dictionaries describing the service configs.
	// Corresponds to the `--config` option of `docker service create`.
	// Requires API version >= 1.30.
	Configs *struct {
		ConfigId   *string `json:"config_id,omitempty"`
		ConfigName string  `json:"config_name"`
		Filename   *string `json:"filename,omitempty"`
		Uid        *string `json:"uid,omitempty"`
		Gid        *string `json:"gid,omitempty"`
		Mode       *int    `json:"mode,omitempty"`
	} `json:"configs,omitempty"`

	// Dictionary of key value pairs.
	// Corresponds to the `--container-label` option of `docker service create`.
	ContainerLabels *map[string]any `json:"container_labels,omitempty"`

	// Dictionary of key, value pairs.
	Sysctls *map[string]any `json:"sysctls,omitempty"`

	// List of custom DNS servers.
	// Corresponds to the `--dns` option of `docker service create`.
	Dns *[]string `json:"dns,omitempty"`

	// List of custom DNS search domains.
	// Corresponds to the `--dns-search` option of `docker service create`.
	DnsSearch *[]string `json:"dns_search,omitempty"`

	// List of custom DNS options.
	// Corresponds to the `--dns-option` option of `docker service create`.
	DnsOptions *[]string `json:"dns_options,omitempty"`

	// Service endpoint mode.
	// Corresponds to the `--endpoint-mode` option of `docker service create`.
	EndpointMode *DockerSwarmServiceEndpointMode `json:"endpoint_mode,omitempty"`

	// List or dictionary of the service environment variables.
	// If passed a list each items need to be in the format of `KEY=VALUE`.
	// If passed a dictionary values which might be parsed as numbers, booleans or
	// other types by the YAML parser must be quoted (for example `"true"`) in
	// order to avoid data loss.
	// Corresponds to the `--env` option of `docker service create`.
	Env *any `json:"env,omitempty"`

	// List of paths to files, present on the target, containing environment
	// variables `FOO=BAR`.
	// The order of the list is significant in determining the value assigned to a
	// variable that shows up more than once.
	// If variable also present in `env`, then `env` value will override.
	EnvFiles *[]string `json:"env_files,omitempty"`

	// Force update even if no changes require it.
	// Corresponds to the `--force` option of `docker service update`.
	// default: false
	ForceUpdate *bool `json:"force_update,omitempty"`

	// List of additional group names and/or IDs that the container process will
	// run as.
	// Corresponds to the `--group` option of `docker service update`.
	Groups *[]string `json:"groups,omitempty"`

	// Configure a check that is run to determine whether or not containers for
	// this service are "healthy". See the docs for the `HEALTHCHECK Dockerfile
	// instruction,https://docs.docker.com/engine/reference/builder/#healthcheck`
	// for details on how healthchecks work.
	// `healthcheck.interval`, `healthcheck.timeout`, and
	// `healthcheck.start_period` are specified as durations. They accept duration
	// as a string in a format that look like: `5h34m56s`, `1m30s`, and so on. The
	// supported units are `us`, `ms`, `s`, `m` and `h`.
	Healthcheck *struct {
		Test        *any    `json:"test,omitempty"`
		Interval    *string `json:"interval,omitempty"`
		Timeout     *string `json:"timeout,omitempty"`
		Retries     *int    `json:"retries,omitempty"`
		StartPeriod *string `json:"start_period,omitempty"`
	} `json:"healthcheck,omitempty"`

	// Container hostname.
	// Corresponds to the `--hostname` option of `docker service create`.
	Hostname *string `json:"hostname,omitempty"`

	// Dict of host-to-IP mappings, where each host name is a key in the
	// dictionary. Each host name will be added to the container's /etc/hosts file.
	// Corresponds to the `--host` option of `docker service create`.
	Hosts *map[string]any `json:"hosts,omitempty"`

	// Service image path and tag.
	// Corresponds to the `IMAGE` parameter of `docker service create`.
	Image *string `json:"image,omitempty"`

	// Use an init inside each service container to forward signals and reap
	// processes.
	// Corresponds to the `--init` option of `docker service create`.
	// Requires API version >= 1.37.
	Init *bool `json:"init,omitempty"`

	// Dictionary of key value pairs.
	// Corresponds to the `--label` option of `docker service create`.
	Labels *map[string]any `json:"labels,omitempty"`

	// Configures service resource limits.
	Limits *struct {
		Cpus   *float64 `json:"cpus,omitempty"`
		Memory *string  `json:"memory,omitempty"`
	} `json:"limits,omitempty"`

	// Logging configuration for the service.
	Logging *struct {
		Driver  *string         `json:"driver,omitempty"`
		Options *map[string]any `json:"options,omitempty"`
	} `json:"logging,omitempty"`

	// Service replication mode.
	// Service will be removed and recreated when changed.
	// Corresponds to the `--mode` option of `docker service create`.
	// The value `replicated-job` was added in community.docker 4.7.0, and requires
	// API version >= 1.41 and Docker SDK for Python >= 6.0.0.
	// default: DockerSwarmServiceModeReplicated
	Mode *DockerSwarmServiceMode `json:"mode,omitempty"`

	// List of dictionaries describing the service mounts.
	// Corresponds to the `--mount` option of `docker service create`.
	Mounts *struct {
		Source       *string         `json:"source,omitempty"`
		Target       string          `json:"target"`
		Type         *string         `json:"type,omitempty"`
		Readonly     *bool           `json:"readonly,omitempty"`
		Labels       *map[string]any `json:"labels,omitempty"`
		Propagation  *string         `json:"propagation,omitempty"`
		NoCopy       *bool           `json:"no_copy,omitempty"`
		DriverConfig *struct {
			Name    *string         `json:"name,omitempty"`
			Options *map[string]any `json:"options,omitempty"`
		} `json:"driver_config,omitempty"`
		TmpfsSize *string `json:"tmpfs_size,omitempty"`
		TmpfsMode *int    `json:"tmpfs_mode,omitempty"`
	} `json:"mounts,omitempty"`

	// Service name.
	// Corresponds to the `--name` option of `docker service create`.
	Name string `json:"name"`

	// List of the service networks names or dictionaries.
	// When passed dictionaries valid sub-options are `name`, which is required,
	// and `aliases` and `options`.
	// Prior to API version 1.29, updating and removing networks is not supported.
	// If changes are made the service will then be removed and recreated.
	// Corresponds to the `--network` option of `docker service create`.
	Networks *[]any `json:"networks,omitempty"`

	// Configures service placement preferences and constraints.
	Placement *struct {
		Constraints        *[]string       `json:"constraints,omitempty"`
		Preferences        *map[string]any `json:"preferences,omitempty"`
		ReplicasMaxPerNode *int            `json:"replicas_max_per_node,omitempty"`
	} `json:"placement,omitempty"`

	// List of dictionaries describing the service published ports.
	// Corresponds to the `--publish` option of `docker service create`.
	Publish *struct {
		PublishedPort *int    `json:"published_port,omitempty"`
		TargetPort    int     `json:"target_port"`
		Protocol      *string `json:"protocol,omitempty"`
		Mode          *string `json:"mode,omitempty"`
	} `json:"publish,omitempty"`

	// Mount the containers root filesystem as read only.
	// Corresponds to the `--read-only` option of `docker service create`.
	ReadOnly *bool `json:"read_only,omitempty"`

	// Number of containers instantiated in the service. Valid only if
	// `mode=replicated` or `mode=replicated-job`.
	// If set to `-1`, and service is not present, service replicas will be set to
	// `1`.
	// If set to `-1`, and service is present, service replicas will be unchanged.
	// Corresponds to the `--replicas` option of `docker service create`.
	// default: -1
	Replicas *int `json:"replicas,omitempty"`

	// Configures service resource reservations.
	Reservations *struct {
		Cpus   *float64 `json:"cpus,omitempty"`
		Memory *string  `json:"memory,omitempty"`
	} `json:"reservations,omitempty"`

	// If the current image digest should be resolved from registry and updated if
	// changed.
	// Requires API version >= 1.30.
	// default: false
	ResolveImage *bool `json:"resolve_image,omitempty"`

	// Configures if and how to restart containers when they exit.
	RestartConfig *struct {
		Condition   *string `json:"condition,omitempty"`
		Delay       *string `json:"delay,omitempty"`
		MaxAttempts *int    `json:"max_attempts,omitempty"`
		Window      *string `json:"window,omitempty"`
	} `json:"restart_config,omitempty"`

	// Configures how the service should be rolled back in case of a failing
	// update.
	RollbackConfig *struct {
		Parallelism     *int     `json:"parallelism,omitempty"`
		Delay           *string  `json:"delay,omitempty"`
		FailureAction   *string  `json:"failure_action,omitempty"`
		Monitor         *string  `json:"monitor,omitempty"`
		MaxFailureRatio *float64 `json:"max_failure_ratio,omitempty"`
		Order           *string  `json:"order,omitempty"`
	} `json:"rollback_config,omitempty"`

	// List of dictionaries describing the service secrets.
	// Corresponds to the `--secret` option of `docker service create`.
	Secrets *struct {
		SecretId   *string `json:"secret_id,omitempty"`
		SecretName string  `json:"secret_name"`
		Filename   *string `json:"filename,omitempty"`
		Uid        *string `json:"uid,omitempty"`
		Gid        *string `json:"gid,omitempty"`
		Mode       *int    `json:"mode,omitempty"`
	} `json:"secrets,omitempty"`

	// `absent` - A service matching the specified name will be removed and have
	// its tasks stopped.
	// `present` - Asserts the existence of a service matching the name and
	// provided configuration parameters. Unspecified configuration parameters will
	// be set to docker defaults.
	// default: DockerSwarmServiceStatePresent
	State *DockerSwarmServiceState `json:"state,omitempty"`

	// Time to wait before force killing a container.
	// Accepts a duration as a string in a format that look like: `5h34m56s`,
	// `1m30s`, and so on. The supported units are `us`, `ms`, `s`, `m` and `h`.
	// Corresponds to the `--stop-grace-period` option of `docker service create`.
	StopGracePeriod *string `json:"stop_grace_period,omitempty"`

	// Override default signal used to stop the container.
	// Corresponds to the `--stop-signal` option of `docker service create`.
	StopSignal *string `json:"stop_signal,omitempty"`

	// Allocate a pseudo-TTY.
	// Corresponds to the `--tty` option of `docker service create`.
	Tty *bool `json:"tty,omitempty"`

	// Configures how the service should be updated. Useful for configuring rolling
	// updates.
	UpdateConfig *struct {
		Parallelism     *int     `json:"parallelism,omitempty"`
		Delay           *string  `json:"delay,omitempty"`
		FailureAction   *string  `json:"failure_action,omitempty"`
		Monitor         *string  `json:"monitor,omitempty"`
		MaxFailureRatio *float64 `json:"max_failure_ratio,omitempty"`
		Order           *string  `json:"order,omitempty"`
	} `json:"update_config,omitempty"`

	// Sets the username or UID used for the specified command.
	// Before Ansible 2.8, the default value for this option was `root`.
	// The default has been removed so that the user defined in the image is used
	// if no user is specified here.
	// Corresponds to the `--user` option of `docker service create`.
	User *string `json:"user,omitempty"`

	// Path to the working directory.
	// Corresponds to the `--workdir` option of `docker service create`.
	WorkingDir *string `json:"working_dir,omitempty"`

	// List of capabilities to add to the container.
	// Requires API version >= 1.41.
	CapAdd *[]string `json:"cap_add,omitempty"`

	// List of capabilities to drop from the container.
	// Requires API version >= 1.41.
	CapDrop *[]string `json:"cap_drop,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	// `Note:` this option is no longer supported for Docker SDK for Python 7.0.0+.
	// Specifying it with Docker SDK for Python 7.0.0 or newer will lead to an
	// error.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by Docker SDK for Python
	// and the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// Requires Docker SDK for Python 4.4.0 or newer.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode.
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerSwarmServiceParameters into an `rpc.RPCCall`.
func (p DockerSwarmServiceParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerSwarmServiceName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_swarm_service` Ansible module.
type DockerSwarmServiceReturn struct {
	AnsibleCommonReturns

	// Dictionary of variables representing the current state of the service.
	// Matches the module parameters format.
	// Note that facts are not part of registered vars but accessible directly.
	// Note that before Ansible 2.7.9, the return variable was documented as
	// `ansible_swarm_service`, while the module actually returned a variable
	// called `ansible_docker_service`. The variable was renamed to
	// R`swarm_service` in both code and documentation for Ansible 2.7.9 and
	// Ansible 2.8.0. In Ansible 2.7.x, the old name `ansible_docker_service` can
	// still be used.
	SwarmService *map[string]any `json:"swarm_service,omitempty"`

	// List of changed service attributes if a service has been altered, []
	// otherwise.
	Changes *[]string `json:"changes,omitempty"`

	// True if the service has been recreated (removed and created).
	Rebuilt *bool `json:"rebuilt,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerSwarmServiceReturn`
func DockerSwarmServiceReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerSwarmServiceReturn, error) {
	return cast.AnyToJSONT[DockerSwarmServiceReturn](r.Result.Result)
}
