// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This modules allows for enable/disable/activate of `awall` policies.
// Alpine Wall (`awall`) generates a firewall configuration from the enabled
// policy files and activates the configuration on the system.
const AwallName = "awall"

// Whether the policies should be enabled or disabled.
type AwallState string

const (
	AwallStateDisabled AwallState = "disabled"
	AwallStateEnabled  AwallState = "enabled"
)

// Convert a supported type to an optional (pointer) AwallState
func OptionalAwallState[T interface {
	*AwallState | AwallState | *string | string
}](s T) *AwallState {
	switch v := any(s).(type) {
	case *AwallState:
		return v
	case AwallState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AwallState(*v)
		return &val
	case string:
		val := AwallState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `awall` Ansible module.
type AwallParameters struct {
	// One or more policy names.
	Name *[]string `json:"name,omitempty"`

	// Whether the policies should be enabled or disabled.
	// default: AwallStateEnabled
	State *AwallState `json:"state,omitempty"`

	// Activate the new firewall rules.
	// Can be run with other steps or on its own.
	// Idempotency is affected if `activate=true`, as the module will always report
	// a changed state.
	// default: false
	Activate *bool `json:"activate,omitempty"`
}

// Wrap the `AwallParameters into an `rpc.RPCCall`.
func (p AwallParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AwallName,
			Args: args,
		},
	}, nil
}

// Return values for the `awall` Ansible module.
type AwallReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `AwallReturn`
func AwallReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AwallReturn, error) {
	return rpc.AnyToJSONT[AwallReturn](r.Result.Result)
}
