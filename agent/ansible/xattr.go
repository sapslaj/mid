// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages filesystem user defined extended attributes.
// Requires that extended attributes are enabled on the target filesystem and
// that the `setfattr`/`getfattr` utilities are present.
const XattrName = "xattr"

// Defines which state you want to do.
// `read` retrieves the current value for a `key`.
// `present` sets `path` to `value`, default if value is set.
// `all` dumps all data.
// `keys` retrieves all keys.
// `absent` deletes the key.
type XattrState string

const (
	XattrStateAbsent  XattrState = "absent"
	XattrStateAll     XattrState = "all"
	XattrStateKeys    XattrState = "keys"
	XattrStatePresent XattrState = "present"
	XattrStateRead    XattrState = "read"
)

// Convert a supported type to an optional (pointer) XattrState
func OptionalXattrState[T interface {
	*XattrState | XattrState | *string | string
}](s T) *XattrState {
	switch v := any(s).(type) {
	case *XattrState:
		return v
	case XattrState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XattrState(*v)
		return &val
	case string:
		val := XattrState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `xattr` Ansible module.
type XattrParameters struct {
	// The full path of the file/object to get the facts of.
	Path string `json:"path"`

	// Namespace of the named name/key.
	// default: "user"
	Namespace *string `json:"namespace,omitempty"`

	// The name of a specific Extended attribute key to set/retrieve.
	Key *string `json:"key,omitempty"`

	// The value to set the named name/key to, it automatically sets the `state` to
	// `present`.
	Value *string `json:"value,omitempty"`

	// Defines which state you want to do.
	// `read` retrieves the current value for a `key`.
	// `present` sets `path` to `value`, default if value is set.
	// `all` dumps all data.
	// `keys` retrieves all keys.
	// `absent` deletes the key.
	// default: XattrStateRead
	State *XattrState `json:"state,omitempty"`

	// If `true`, dereferences symlinks and sets/gets attributes on symlink target,
	// otherwise acts on symlink itself.
	// default: true
	Follow *bool `json:"follow,omitempty"`
}

// Wrap the `XattrParameters into an `rpc.RPCCall`.
func (p XattrParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: XattrName,
			Args: args,
		},
	}, nil
}

// Return values for the `xattr` Ansible module.
type XattrReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `XattrReturn`
func XattrReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (XattrReturn, error) {
	return cast.AnyToJSONT[XattrReturn](r.Result.Result)
}
