// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Set and retrieve file ACL information.
const AclName = "acl"

// Define whether the ACL should be present or not.
// The `query` state gets the current ACL without changing it, for use in
// `register` operations.
type AclState string

const (
	AclStateAbsent  AclState = "absent"
	AclStatePresent AclState = "present"
	AclStateQuery   AclState = "query"
)

// Convert a supported type to an optional (pointer) AclState
func OptionalAclState[T interface {
	*AclState | AclState | *string | string
}](s T) *AclState {
	switch v := any(s).(type) {
	case *AclState:
		return v
	case AclState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AclState(*v)
		return &val
	case string:
		val := AclState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The entity type of the ACL to apply, see `setfacl` documentation for more
// info.
type AclEtype string

const (
	AclEtypeGroup AclEtype = "group"
	AclEtypeMask  AclEtype = "mask"
	AclEtypeOther AclEtype = "other"
	AclEtypeUser  AclEtype = "user"
)

// Convert a supported type to an optional (pointer) AclEtype
func OptionalAclEtype[T interface {
	*AclEtype | AclEtype | *string | string
}](s T) *AclEtype {
	switch v := any(s).(type) {
	case *AclEtype:
		return v
	case AclEtype:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AclEtype(*v)
		return &val
	case string:
		val := AclEtype(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Select if and when to recalculate the effective right masks of the files.
// See `setfacl` documentation for more info.
// Incompatible with `state=query`.
type AclRecalculateMask string

const (
	AclRecalculateMaskDefault AclRecalculateMask = "default"
	AclRecalculateMaskMask    AclRecalculateMask = "mask"
	AclRecalculateMaskNoMask  AclRecalculateMask = "no_mask"
)

// Convert a supported type to an optional (pointer) AclRecalculateMask
func OptionalAclRecalculateMask[T interface {
	*AclRecalculateMask | AclRecalculateMask | *string | string
}](s T) *AclRecalculateMask {
	switch v := any(s).(type) {
	case *AclRecalculateMask:
		return v
	case AclRecalculateMask:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AclRecalculateMask(*v)
		return &val
	case string:
		val := AclRecalculateMask(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `acl` Ansible module.
type AclParameters struct {
	// The full path of the file or object.
	Path string `json:"path"`

	// Define whether the ACL should be present or not.
	// The `query` state gets the current ACL without changing it, for use in
	// `register` operations.
	// default: AclStateQuery
	State *AclState `json:"state,omitempty"`

	// Whether to follow symlinks on the path if a symlink is encountered.
	// default: true
	Follow *bool `json:"follow,omitempty"`

	// If `path` is a directory, setting this to `true` will make it the default
	// ACL for entities created inside the directory.
	// Setting `default=true` causes an error if `path` is a file.
	// default: false
	Default *bool `json:"default,omitempty"`

	// The actual user or group that the ACL applies to when matching entity types
	// user or group are selected.
	// default: ""
	Entity *string `json:"entity,omitempty"`

	// The entity type of the ACL to apply, see `setfacl` documentation for more
	// info.
	Etype *AclEtype `json:"etype,omitempty"`

	// The permissions to apply/remove can be any combination of `r`, `w`, `x`
	// (read, write and execute respectively), and `X` (execute permission if the
	// file is a directory or already has execute permission for some user)
	Permissions *string `json:"permissions,omitempty"`

	// DEPRECATED.
	// The ACL to set or remove.
	// This must always be quoted in the form of `<etype>:<qualifier>:<perms>`.
	// The qualifier may be empty for some types, but the type and perms are always
	// required.
	// `-` can be used as placeholder when you do not care about permissions.
	// This is now superseded by entity, type and permissions fields.
	Entry *string `json:"entry,omitempty"`

	// Recursively sets the specified ACL.
	// Incompatible with `state=query`.
	// Alias `recurse` added in version 1.3.0.
	// default: false
	Recursive *bool `json:"recursive,omitempty"`

	// Use NFSv4 ACLs instead of POSIX ACLs.
	// This feature uses `nfs4_setfacl` and `nfs4_getfacl`. The behavior depends on
	// those implementation. And currently it only supports `A` in ACE, so `D` must
	// be replaced with the appropriate `A`.
	// Permission is set as optimised ACLs by the system. You can check the actual
	// ACLs that has been set using the return value.
	// More info `man nfs4_setfacl`
	// default: false
	UseNfsv4Acls *bool `json:"use_nfsv4_acls,omitempty"`

	// Select if and when to recalculate the effective right masks of the files.
	// See `setfacl` documentation for more info.
	// Incompatible with `state=query`.
	// default: AclRecalculateMaskDefault
	RecalculateMask *AclRecalculateMask `json:"recalculate_mask,omitempty"`
}

// Wrap the `AclParameters into an `rpc.RPCCall`.
func (p AclParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AclName,
			Args: args,
		},
	}, nil
}

// Return values for the `acl` Ansible module.
type AclReturn struct {
	AnsibleCommonReturns

	// Current ACL on provided path (after changes, if any)
	Acl *[]any `json:"acl,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `AclReturn`
func AclReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AclReturn, error) {
	return rpc.AnyToJSONT[AclReturn](r.Result.Result)
}
