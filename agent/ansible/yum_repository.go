// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const YumRepositoryName = "yum_repository"

type YumRepositoryParameters struct {
	Async                      *bool     `json:"async,omitempty"`
	Bandwidth                  *string   `json:"bandwidth,omitempty"`
	Baseurl                    *[]string `json:"baseurl,omitempty"`
	Cost                       *string   `json:"cost,omitempty"`
	Countme                    *bool     `json:"countme,omitempty"`
	DeltarpmMetadataPercentage *string   `json:"deltarpm_metadata_percentage,omitempty"`
	DeltarpmPercentage         *string   `json:"deltarpm_percentage,omitempty"`
	Description                *string   `json:"description,omitempty"`
	Enabled                    *bool     `json:"enabled,omitempty"`
	Enablegroups               *bool     `json:"enablegroups,omitempty"`
	Exclude                    *[]string `json:"exclude,omitempty"`
	Failovermethod             *string   `json:"failovermethod,omitempty"`
	File                       *string   `json:"file,omitempty"`
	Gpgcakey                   *string   `json:"gpgcakey,omitempty"`
	Gpgcheck                   *bool     `json:"gpgcheck,omitempty"`
	Gpgkey                     *[]string `json:"gpgkey,omitempty"`
	ModuleHotfixes             *bool     `json:"module_hotfixes,omitempty"`
	HttpCaching                *string   `json:"http_caching,omitempty"`
	Include                    *string   `json:"include,omitempty"`
	Includepkgs                *[]string `json:"includepkgs,omitempty"`
	IpResolve                  *string   `json:"ip_resolve,omitempty"`
	Keepalive                  *bool     `json:"keepalive,omitempty"`
	Keepcache                  *string   `json:"keepcache,omitempty"`
	MetadataExpire             *string   `json:"metadata_expire,omitempty"`
	MetadataExpireFilter       *string   `json:"metadata_expire_filter,omitempty"`
	Metalink                   *string   `json:"metalink,omitempty"`
	Mirrorlist                 *string   `json:"mirrorlist,omitempty"`
	MirrorlistExpire           *string   `json:"mirrorlist_expire,omitempty"`
	Name                       string    `json:"name"`
	Password                   *string   `json:"password,omitempty"`
	Priority                   *string   `json:"priority,omitempty"`
	Protect                    *bool     `json:"protect,omitempty"`
	Proxy                      *string   `json:"proxy,omitempty"`
	ProxyPassword              *string   `json:"proxy_password,omitempty"`
	ProxyUsername              *string   `json:"proxy_username,omitempty"`
	RepoGpgcheck               *bool     `json:"repo_gpgcheck,omitempty"`
	Reposdir                   *string   `json:"reposdir,omitempty"`
	Retries                    *string   `json:"retries,omitempty"`
	S3Enabled                  *bool     `json:"s3_enabled,omitempty"`
	SkipIfUnavailable          *bool     `json:"skip_if_unavailable,omitempty"`
	SslCheckCertPermissions    *bool     `json:"ssl_check_cert_permissions,omitempty"`
	Sslcacert                  *string   `json:"sslcacert,omitempty"`
	Sslclientcert              *string   `json:"sslclientcert,omitempty"`
	Sslclientkey               *string   `json:"sslclientkey,omitempty"`
	Sslverify                  *bool     `json:"sslverify,omitempty"`
	State                      *string   `json:"state,omitempty"`
	Throttle                   *string   `json:"throttle,omitempty"`
	Timeout                    *string   `json:"timeout,omitempty"`
	UiRepoidVars               *string   `json:"ui_repoid_vars,omitempty"`
	Username                   *string   `json:"username,omitempty"`
}

func (p *YumRepositoryParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: YumRepositoryName,
			Args: args,
		},
	}, nil
}

type YumRepositoryReturn struct {
	AnsibleCommonReturns
	Repo  *string `json:"repo,omitempty"`
	State *string `json:"state,omitempty"`
}

func YumRepositoryReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (YumRepositoryReturn, error) {
	return rpc.AnyToJSONT[YumRepositoryReturn](r.Result.Result)
}
