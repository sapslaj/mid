// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manage (Enable/Disable) RHSM repositories to the Red Hat Subscription
// Management entitlement platform using the `subscription-manager` command.
const RhsmRepositoryName = "rhsm_repository"

// If state is equal to present or disabled, indicates the desired repository
// state.
// In community.general 10.0.0 the states `present` and `absent` have been
// removed. Please use `enabled` and `disabled` instead.
type RhsmRepositoryState string

const (
	RhsmRepositoryStateEnabled  RhsmRepositoryState = "enabled"
	RhsmRepositoryStateDisabled RhsmRepositoryState = "disabled"
)

// Convert a supported type to an optional (pointer) RhsmRepositoryState
func OptionalRhsmRepositoryState[T interface {
	*RhsmRepositoryState | RhsmRepositoryState | *string | string
}](s T) *RhsmRepositoryState {
	switch v := any(s).(type) {
	case *RhsmRepositoryState:
		return v
	case RhsmRepositoryState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := RhsmRepositoryState(*v)
		return &val
	case string:
		val := RhsmRepositoryState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `rhsm_repository` Ansible module.
type RhsmRepositoryParameters struct {
	// If state is equal to present or disabled, indicates the desired repository
	// state.
	// In community.general 10.0.0 the states `present` and `absent` have been
	// removed. Please use `enabled` and `disabled` instead.
	// default: RhsmRepositoryStateEnabled
	State *RhsmRepositoryState `json:"state,omitempty"`

	// The ID of repositories to enable.
	// To operate on several repositories this can accept a comma separated list or
	// a YAML list.
	Name []string `json:"name"`

	// Disable all currently enabled repositories that are not not specified in
	// `name`. Only set this to `true` if passing in a list of repositories to the
	// `name` field. Using this with `loop` will most likely not have the desired
	// result.
	// default: false
	Purge *bool `json:"purge,omitempty"`
}

// Wrap the `RhsmRepositoryParameters into an `rpc.RPCCall`.
func (p RhsmRepositoryParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: RhsmRepositoryName,
			Args: args,
		},
	}, nil
}

// Return values for the `rhsm_repository` Ansible module.
type RhsmRepositoryReturn struct {
	AnsibleCommonReturns

	// The list of RHSM repositories with their states.
	// When this module is used to change the repository states, this list contains
	// the updated states after the changes.
	Repositories *[]any `json:"repositories,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `RhsmRepositoryReturn`
func RhsmRepositoryReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (RhsmRepositoryReturn, error) {
	return cast.AnyToJSONT[RhsmRepositoryReturn](r.Result.Result)
}
