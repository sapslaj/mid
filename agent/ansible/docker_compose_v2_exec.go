// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Uses Docker Compose to run a command in a service's container.
// This can be used to run one-off commands in an existing service's container,
// and encapsulates `docker compose exec`.
const DockerComposeV2ExecName = "docker_compose_v2_exec"

// Parameters for the `docker_compose_v2_exec` Ansible module.
type DockerComposeV2ExecParameters struct {
	// The service to run the command in.
	Service string `json:"service"`

	// The index of the container to run the command in if the service has multiple
	// replicas.
	Index *int `json:"index,omitempty"`

	// The command to execute.
	// Since this is a list of arguments, no quoting is needed.
	// Exactly one of `argv` or `command` must be specified.
	Argv *[]string `json:"argv,omitempty"`

	// The command to execute.
	// Exactly one of `argv` or `command` must be specified.
	Command *string `json:"command,omitempty"`

	// The directory to run the command in.
	Chdir *string `json:"chdir,omitempty"`

	// Whether to run the command synchronously (`detach=false`, default) or
	// asynchronously (`detach=true`).
	// If set to `true`, `stdin` cannot be provided, and the return values
	// R`stdout`, R`stderr`, and R`rc` are not returned.
	// default: false
	Detach *bool `json:"detach,omitempty"`

	// If specified, the user to execute this command with.
	User *string `json:"user,omitempty"`

	// Set the stdin of the command directly to the specified value.
	// Can only be used if `detach=false`.
	Stdin *string `json:"stdin,omitempty"`

	// If set to `true`, appends a newline to `stdin`.
	// default: true
	StdinAddNewline *bool `json:"stdin_add_newline,omitempty"`

	// Strip empty lines from the end of stdout/stderr in result.
	// default: true
	StripEmptyEnds *bool `json:"strip_empty_ends,omitempty"`

	// Whether to give extended privileges to the process.
	// default: false
	Privileged *bool `json:"privileged,omitempty"`

	// Whether to allocate a TTY.
	// default: true
	Tty *bool `json:"tty,omitempty"`

	// Dictionary of environment variables with their respective values to be
	// passed to the command ran inside the container.
	// Values which might be parsed as numbers, booleans or other types by the YAML
	// parser must be quoted (for example `"true"`) in order to avoid data loss.
	// Please note that if you are passing values in with Jinja2 templates, like
	// `"{{ value }}"`, you need to add `| string` to prevent Ansible to convert
	// strings such as `"true"` back to booleans. The correct way is to use `"{{
	// value | string }}"`.
	Env *map[string]any `json:"env,omitempty"`

	// Path to a directory containing a Compose file (`compose.yml`,
	// `compose.yaml`, `docker-compose.yml`, or `docker-compose.yaml`).
	// If `files` is provided, will look for these files in this directory instead.
	// Mutually exclusive with `definition`. One of `project_src` and `definition`
	// must be provided.
	ProjectSrc *string `json:"project_src,omitempty"`

	// Provide a project name. If not provided, the project name is taken from the
	// basename of `project_src`.
	// Required when `definition` is provided.
	ProjectName *string `json:"project_name,omitempty"`

	// List of Compose file names relative to `project_src` to be used instead of
	// the main Compose file (`compose.yml`, `compose.yaml`, `docker-compose.yml`,
	// or `docker-compose.yaml`).
	// Files are loaded and merged in the order given.
	// Mutually exclusive with `definition`.
	Files *[]string `json:"files,omitempty"`

	// Compose file describing one or more services, networks and volumes.
	// Mutually exclusive with `project_src` and `files`. One of `project_src` and
	// `definition` must be provided.
	// If provided, PyYAML must be available to this module, and `project_name`
	// must be specified.
	// Note that a temporary directory will be created and deleted afterwards when
	// using this option.
	Definition *map[string]any `json:"definition,omitempty"`

	// By default environment files are loaded from a `.env` file located directly
	// under the `project_src` directory.
	// `env_files` can be used to specify the path of one or multiple custom
	// environment files instead.
	// The path is relative to the `project_src` directory.
	EnvFiles *[]string `json:"env_files,omitempty"`

	// List of profiles to enable when starting services.
	// Equivalent to `docker compose --profile`.
	Profiles *[]string `json:"profiles,omitempty"`

	// If set to `false`, the module will not check whether one of the files
	// `compose.yaml`, `compose.yml`, `docker-compose.yaml`, or `docker-
	// compose.yml` exists in `project_src` if `files` is not provided.
	// This can be useful if environment files with `COMPOSE_FILE` are used to
	// configure a different filename. The module currently does not check for
	// `COMPOSE_FILE` in environment files or the current environment.
	// default: true
	CheckFilesExisting *bool `json:"check_files_existing,omitempty"`

	// Path to the Docker CLI. If not provided, will search for Docker CLI on the
	// `PATH`.
	DockerCli *string `json:"docker_cli,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// Mutually exclusive with `cli_context`. If neither `docker_host` nor
	// `cli_context` are provided, the value `unix:///var/run/docker.sock` is used.
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// The Docker CLI context to use.
	// Mutually exclusive with `docker_host`.
	CliContext *string `json:"cli_context,omitempty"`
}

// Wrap the `DockerComposeV2ExecParameters into an `rpc.RPCCall`.
func (p DockerComposeV2ExecParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerComposeV2ExecName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_compose_v2_exec` Ansible module.
type DockerComposeV2ExecReturn struct {
	AnsibleCommonReturns

	// The standard output of the container command.
	Stdout *string `json:"stdout,omitempty"`

	// The standard error output of the container command.
	Stderr *string `json:"stderr,omitempty"`

	// The exit code of the command.
	Rc *int `json:"rc,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerComposeV2ExecReturn`
func DockerComposeV2ExecReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerComposeV2ExecReturn, error) {
	return cast.AnyToJSONT[DockerComposeV2ExecReturn](r.Result.Result)
}
