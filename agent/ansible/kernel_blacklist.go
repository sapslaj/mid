// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Add or remove kernel modules from blacklist.
const KernelBlacklistName = "kernel_blacklist"

// Whether the module should be present in the blacklist or absent.
type KernelBlacklistState string

const (
	KernelBlacklistStateAbsent  KernelBlacklistState = "absent"
	KernelBlacklistStatePresent KernelBlacklistState = "present"
)

func OptionalKernelBlacklistState[T interface {
	*KernelBlacklistState | KernelBlacklistState | *string | string
}](s T) *KernelBlacklistState {
	switch v := any(s).(type) {
	case *KernelBlacklistState:
		return v
	case KernelBlacklistState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := KernelBlacklistState(*v)
		return &val
	case string:
		val := KernelBlacklistState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `kernel_blacklist` Ansible module.
type KernelBlacklistParameters struct {
	// Name of kernel module to black- or whitelist.
	Name string `json:"name"`

	// Whether the module should be present in the blacklist or absent.
	// default: KernelBlacklistStatePresent
	State *KernelBlacklistState `json:"state,omitempty"`

	// If specified, use this blacklist file instead of `/etc/modprobe.d/blacklist-
	// ansible.conf`.
	// default: "/etc/modprobe.d/blacklist-ansible.conf"
	BlacklistFile *string `json:"blacklist_file,omitempty"`
}

// Wrap the `KernelBlacklistParameters into an `rpc.RPCCall`.
func (p *KernelBlacklistParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: KernelBlacklistName,
			Args: args,
		},
	}, nil
}

// Return values for the `kernel_blacklist` Ansible module.
type KernelBlacklistReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `KernelBlacklistReturn`
func KernelBlacklistReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (KernelBlacklistReturn, error) {
	return rpc.AnyToJSONT[KernelBlacklistReturn](r.Result.Result)
}
