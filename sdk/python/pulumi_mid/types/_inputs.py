# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConnectionArgs',
    'ConnectionArgsDict',
    'TriggersInputArgs',
    'TriggersInputArgsDict',
]

MYPY = False

if not MYPY:
    class ConnectionArgsDict(TypedDict):
        host: pulumi.Input[str]
        password: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[float]]
        private_key: NotRequired[pulumi.Input[str]]
        user: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class TriggersInputArgsDict(TypedDict):
        refresh: NotRequired[pulumi.Input[Sequence[Any]]]
        replace: NotRequired[pulumi.Input[Sequence[Any]]]
elif False:
    TriggersInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TriggersInputArgs:
    def __init__(__self__, *,
                 refresh: Optional[pulumi.Input[Sequence[Any]]] = None,
                 replace: Optional[pulumi.Input[Sequence[Any]]] = None):
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "replace", value)


