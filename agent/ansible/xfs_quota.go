// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Configure quotas on XFS filesystems.
// Before using this module /etc/projects and /etc/projid need to be configured.
const XfsQuotaName = "xfs_quota"

// The XFS quota type.
type XfsQuotaType string

const (
	XfsQuotaTypeUser    XfsQuotaType = "user"
	XfsQuotaTypeGroup   XfsQuotaType = "group"
	XfsQuotaTypeProject XfsQuotaType = "project"
)

// Whether to apply the limits or remove them.
// When removing limit, they are set to 0, and not quite removed.
type XfsQuotaState string

const (
	XfsQuotaStatePresent XfsQuotaState = "present"
	XfsQuotaStateAbsent  XfsQuotaState = "absent"
)

func OptionalXfsQuotaState[T interface {
	*XfsQuotaState | XfsQuotaState | *string | string
}](s T) *XfsQuotaState {
	switch v := any(s).(type) {
	case *XfsQuotaState:
		return v
	case XfsQuotaState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XfsQuotaState(*v)
		return &val
	case string:
		val := XfsQuotaState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `xfs_quota` Ansible module.
type XfsQuotaParameters struct {
	// The XFS quota type.
	Type XfsQuotaType `json:"type"`

	// The name of the user, group or project to apply the quota to, if other than
	// default.
	Name *string `json:"name,omitempty"`

	// The mount point on which to apply the quotas.
	Mountpoint string `json:"mountpoint"`

	// Hard blocks quota limit.
	// This argument supports human readable sizes.
	Bhard *string `json:"bhard,omitempty"`

	// Soft blocks quota limit.
	// This argument supports human readable sizes.
	Bsoft *string `json:"bsoft,omitempty"`

	// Hard inodes quota limit.
	Ihard *int `json:"ihard,omitempty"`

	// Soft inodes quota limit.
	Isoft *int `json:"isoft,omitempty"`

	// Hard realtime blocks quota limit.
	// This argument supports human readable sizes.
	Rtbhard *string `json:"rtbhard,omitempty"`

	// Soft realtime blocks quota limit.
	// This argument supports human readable sizes.
	Rtbsoft *string `json:"rtbsoft,omitempty"`

	// Whether to apply the limits or remove them.
	// When removing limit, they are set to 0, and not quite removed.
	// default: XfsQuotaStatePresent
	State *XfsQuotaState `json:"state,omitempty"`
}

// Wrap the `XfsQuotaParameters into an `rpc.RPCCall`.
func (p *XfsQuotaParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: XfsQuotaName,
			Args: args,
		},
	}, nil
}

// Return values for the `xfs_quota` Ansible module.
type XfsQuotaReturn struct {
	AnsibleCommonReturns

	// The current `bhard` setting in bytes.
	Bhard *int `json:"bhard,omitempty"`

	// The current `bsoft` setting in bytes.
	Bsoft *int `json:"bsoft,omitempty"`

	// The current `ihard` setting in bytes.
	Ihard *int `json:"ihard,omitempty"`

	// The current `isoft` setting in bytes.
	Isoft *int `json:"isoft,omitempty"`

	// The current `rtbhard` setting in bytes.
	Rtbhard *int `json:"rtbhard,omitempty"`

	// The current `rtbsoft` setting in bytes.
	Rtbsoft *int `json:"rtbsoft,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `XfsQuotaReturn`
func XfsQuotaReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (XfsQuotaReturn, error) {
	return rpc.AnyToJSONT[XfsQuotaReturn](r.Result.Result)
}
