# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    "AnsibleTaskListArgsTasksArgs",
    "AnsibleTaskListArgsTasksArgsDict",
    "AnsibleTaskListArgsTaskArgs",
    "AnsibleTaskListArgsTaskArgsDict",
]

MYPY = False

if not MYPY:

    class AnsibleTaskListArgsTasksArgsDict(TypedDict):
        create: pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgsDict"]]]
        delete: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgsDict"]]]
        ]
        update: NotRequired[
            pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgsDict"]]]
        ]
elif False:
    AnsibleTaskListArgsTasksArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class AnsibleTaskListArgsTasksArgs:
    def __init__(
        __self__,
        *,
        create: pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]],
        delete: Optional[
            pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]
        ] = None,
        update: Optional[
            pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]
        ] = None,
    ):
        pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(
        self,
    ) -> pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]:
        return pulumi.get(self, "create")

    @create.setter
    def create(
        self, value: pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]
    ):
        pulumi.set(self, "create", value)

    @_builtins.property
    @pulumi.getter
    def delete(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]]:
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]
        ],
    ):
        pulumi.set(self, "delete", value)

    @_builtins.property
    @pulumi.getter
    def update(
        self,
    ) -> Optional[pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]]:
        return pulumi.get(self, "update")

    @update.setter
    def update(
        self,
        value: Optional[
            pulumi.Input[Sequence[pulumi.Input["AnsibleTaskListArgsTaskArgs"]]]
        ],
    ):
        pulumi.set(self, "update", value)


if not MYPY:

    class AnsibleTaskListArgsTaskArgsDict(TypedDict):
        args: pulumi.Input[Mapping[str, Any]]
        module: pulumi.Input[_builtins.str]
        check: NotRequired[pulumi.Input[_builtins.bool]]
        environment: NotRequired[
            pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
        ]
        ignore_errors: NotRequired[pulumi.Input[_builtins.bool]]
elif False:
    AnsibleTaskListArgsTaskArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class AnsibleTaskListArgsTaskArgs:
    def __init__(
        __self__,
        *,
        args: pulumi.Input[Mapping[str, Any]],
        module: pulumi.Input[_builtins.str],
        check: Optional[pulumi.Input[_builtins.bool]] = None,
        environment: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
        ] = None,
        ignore_errors: Optional[pulumi.Input[_builtins.bool]] = None,
    ):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "module", module)
        if check is not None:
            pulumi.set(__self__, "check", check)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if ignore_errors is not None:
            pulumi.set(__self__, "ignore_errors", ignore_errors)

    @_builtins.property
    @pulumi.getter
    def args(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter
    def module(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "module")

    @module.setter
    def module(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "module", value)

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check", value)

    @_builtins.property
    @pulumi.getter
    def environment(
        self,
    ) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
    ):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter(name="ignoreErrors")
    def ignore_errors(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ignore_errors")

    @ignore_errors.setter
    def ignore_errors(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ignore_errors", value)
