# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import types as _types

__all__ = ["GroupArgs", "Group"]


@pulumi.input_type
class GroupArgs:
    def __init__(
        __self__,
        *,
        name: pulumi.Input[str],
        ensure: Optional[pulumi.Input[str]] = None,
        force: Optional[pulumi.Input[bool]] = None,
        gid: Optional[pulumi.Input[int]] = None,
        gid_max: Optional[pulumi.Input[int]] = None,
        gid_min: Optional[pulumi.Input[int]] = None,
        local: Optional[pulumi.Input[bool]] = None,
        non_unique: Optional[pulumi.Input[bool]] = None,
        system: Optional[pulumi.Input[bool]] = None,
        triggers: Optional[pulumi.Input["_types.TriggersInputArgs"]] = None,
    ):
        """
        The set of arguments for constructing a Group resource.
        """
        pulumi.set(__self__, "name", name)
        if ensure is not None:
            pulumi.set(__self__, "ensure", ensure)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if gid_max is not None:
            pulumi.set(__self__, "gid_max", gid_max)
        if gid_min is not None:
            pulumi.set(__self__, "gid_min", gid_min)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if non_unique is not None:
            pulumi.set(__self__, "non_unique", non_unique)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ensure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ensure")

    @ensure.setter
    def ensure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ensure", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter(name="gidMax")
    def gid_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gid_max")

    @gid_max.setter
    def gid_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gid_max", value)

    @property
    @pulumi.getter(name="gidMin")
    def gid_min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gid_min")

    @gid_min.setter
    def gid_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gid_min", value)

    @property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local", value)

    @property
    @pulumi.getter(name="nonUnique")
    def non_unique(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "non_unique")

    @non_unique.setter
    def non_unique(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "non_unique", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input["_types.TriggersInputArgs"]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input["_types.TriggersInputArgs"]]):
        pulumi.set(self, "triggers", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        ensure: Optional[pulumi.Input[str]] = None,
        force: Optional[pulumi.Input[bool]] = None,
        gid: Optional[pulumi.Input[int]] = None,
        gid_max: Optional[pulumi.Input[int]] = None,
        gid_min: Optional[pulumi.Input[int]] = None,
        local: Optional[pulumi.Input[bool]] = None,
        name: Optional[pulumi.Input[str]] = None,
        non_unique: Optional[pulumi.Input[bool]] = None,
        system: Optional[pulumi.Input[bool]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        __props__=None,
    ):
        """
        Create a Group resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: GroupArgs,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a Group resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            GroupArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        ensure: Optional[pulumi.Input[str]] = None,
        force: Optional[pulumi.Input[bool]] = None,
        gid: Optional[pulumi.Input[int]] = None,
        gid_max: Optional[pulumi.Input[int]] = None,
        gid_min: Optional[pulumi.Input[int]] = None,
        local: Optional[pulumi.Input[bool]] = None,
        name: Optional[pulumi.Input[str]] = None,
        non_unique: Optional[pulumi.Input[bool]] = None,
        system: Optional[pulumi.Input[bool]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["ensure"] = ensure
            __props__.__dict__["force"] = force
            __props__.__dict__["gid"] = gid
            __props__.__dict__["gid_max"] = gid_max
            __props__.__dict__["gid_min"] = gid_min
            __props__.__dict__["local"] = local
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["non_unique"] = non_unique
            __props__.__dict__["system"] = system
            __props__.__dict__["triggers"] = triggers
        super(Group, __self__).__init__(
            "mid:resource:Group", resource_name, __props__, opts
        )

    @staticmethod
    def get(
        resource_name: str,
        id: pulumi.Input[str],
        opts: Optional[pulumi.ResourceOptions] = None,
    ) -> "Group":
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GroupArgs.__new__(GroupArgs)

        __props__.__dict__["ensure"] = None
        __props__.__dict__["force"] = None
        __props__.__dict__["gid"] = None
        __props__.__dict__["gid_max"] = None
        __props__.__dict__["gid_min"] = None
        __props__.__dict__["local"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["non_unique"] = None
        __props__.__dict__["system"] = None
        __props__.__dict__["triggers"] = None
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ensure(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ensure")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def gid(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="gidMax")
    def gid_max(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "gid_max")

    @property
    @pulumi.getter(name="gidMin")
    def gid_min(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "gid_min")

    @property
    @pulumi.getter
    def local(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "local")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonUnique")
    def non_unique(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "non_unique")

    @property
    @pulumi.getter
    def system(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output["_types.outputs.TriggersOutput"]:
        return pulumi.get(self, "triggers")
