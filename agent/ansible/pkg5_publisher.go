// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// IPS packages are the native packages in Solaris 11 and higher.
// This modules will configure which publishers a client will download IPS
// packages from.
const Pkg5PublisherName = "pkg5_publisher"

// Whether to ensure that a publisher is present or absent.
type Pkg5PublisherState string

const (
	Pkg5PublisherStatePresent Pkg5PublisherState = "present"
	Pkg5PublisherStateAbsent  Pkg5PublisherState = "absent"
)

// Convert a supported type to an optional (pointer) Pkg5PublisherState
func OptionalPkg5PublisherState[T interface {
	*Pkg5PublisherState | Pkg5PublisherState | *string | string
}](s T) *Pkg5PublisherState {
	switch v := any(s).(type) {
	case *Pkg5PublisherState:
		return v
	case Pkg5PublisherState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := Pkg5PublisherState(*v)
		return &val
	case string:
		val := Pkg5PublisherState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `pkg5_publisher` Ansible module.
type Pkg5PublisherParameters struct {
	// The publisher's name.
	Name string `json:"name"`

	// Whether to ensure that a publisher is present or absent.
	// default: Pkg5PublisherStatePresent
	State *Pkg5PublisherState `json:"state,omitempty"`

	// Packages installed from a sticky repository can only receive updates from
	// that repository.
	Sticky *bool `json:"sticky,omitempty"`

	// Is the repository enabled or disabled?
	Enabled *bool `json:"enabled,omitempty"`

	// A path or URL to the repository.
	// Multiple values may be provided.
	Origin *[]string `json:"origin,omitempty"`

	// A path or URL to the repository mirror.
	// Multiple values may be provided.
	Mirror *[]string `json:"mirror,omitempty"`
}

// Wrap the `Pkg5PublisherParameters into an `rpc.RPCCall`.
func (p Pkg5PublisherParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: Pkg5PublisherName,
			Args: args,
		},
	}, nil
}

// Return values for the `pkg5_publisher` Ansible module.
type Pkg5PublisherReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `Pkg5PublisherReturn`
func Pkg5PublisherReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (Pkg5PublisherReturn, error) {
	return rpc.AnyToJSONT[Pkg5PublisherReturn](r.Result.Result)
}
