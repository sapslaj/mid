// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages SELinux network port type definitions.
const SeportName = "seport"

// Protocol for the specified port.
type SeportProto string

const (
	SeportProtoTcp SeportProto = "tcp"
	SeportProtoUdp SeportProto = "udp"
)

// Desired boolean value.
type SeportState string

const (
	SeportStateAbsent  SeportState = "absent"
	SeportStatePresent SeportState = "present"
)

// Convert a supported type to an optional (pointer) SeportState
func OptionalSeportState[T interface {
	*SeportState | SeportState | *string | string
}](s T) *SeportState {
	switch v := any(s).(type) {
	case *SeportState:
		return v
	case SeportState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SeportState(*v)
		return &val
	case string:
		val := SeportState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `seport` Ansible module.
type SeportParameters struct {
	// Ports or port ranges.
	// Can be a list (since 2.6) or comma separated string.
	Ports []string `json:"ports"`

	// Protocol for the specified port.
	Proto SeportProto `json:"proto"`

	// SELinux type for the specified port.
	Setype string `json:"setype"`

	// Desired boolean value.
	// default: SeportStatePresent
	State *SeportState `json:"state,omitempty"`

	// Reload SELinux policy after commit.
	// default: true
	Reload *bool `json:"reload,omitempty"`

	// Run independent of selinux runtime state.
	// default: false
	IgnoreSelinuxState *bool `json:"ignore_selinux_state,omitempty"`

	// Work with local modifications only.
	// default: false
	Local *bool `json:"local,omitempty"`
}

// Wrap the `SeportParameters into an `rpc.RPCCall`.
func (p SeportParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SeportName,
			Args: args,
		},
	}, nil
}

// Return values for the `seport` Ansible module.
type SeportReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SeportReturn`
func SeportReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SeportReturn, error) {
	return cast.AnyToJSONT[SeportReturn](r.Result.Result)
}
