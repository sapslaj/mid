# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TriggersInputArgs',
    'TriggersInputArgsDict',
]

MYPY = False

if not MYPY:
    class TriggersInputArgsDict(TypedDict):
        refresh: NotRequired[pulumi.Input[Sequence[Any]]]
        replace: NotRequired[pulumi.Input[Sequence[Any]]]
elif False:
    TriggersInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TriggersInputArgs:
    def __init__(__self__, *,
                 refresh: Optional[pulumi.Input[Sequence[Any]]] = None,
                 replace: Optional[pulumi.Input[Sequence[Any]]] = None):
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "replace", value)


