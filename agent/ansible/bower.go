// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manage bower packages with `bower`.
const BowerName = "bower"

// The state of the bower package.
type BowerState string

const (
	BowerStatePresent BowerState = "present"
	BowerStateAbsent  BowerState = "absent"
	BowerStateLatest  BowerState = "latest"
)

func OptionalBowerState[T interface {
	*BowerState | BowerState | *string | string
}](s T) *BowerState {
	switch v := any(s).(type) {
	case *BowerState:
		return v
	case BowerState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := BowerState(*v)
		return &val
	case string:
		val := BowerState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `bower` Ansible module.
type BowerParameters struct {
	// The name of a bower package to install.
	Name *string `json:"name,omitempty"`

	// Install packages from local cache, if the packages were installed before.
	// default: false
	Offline *bool `json:"offline,omitempty"`

	// Install with `--production` flag.
	// default: false
	Production *bool `json:"production,omitempty"`

	// The base path where to install the bower packages.
	Path string `json:"path"`

	// Relative path to bower executable from install path.
	RelativeExecpath *string `json:"relative_execpath,omitempty"`

	// The state of the bower package.
	// default: BowerStatePresent
	State *BowerState `json:"state,omitempty"`

	// The version to be installed.
	Version *string `json:"version,omitempty"`
}

// Wrap the `BowerParameters into an `rpc.RPCCall`.
func (p *BowerParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: BowerName,
			Args: args,
		},
	}, nil
}

// Return values for the `bower` Ansible module.
type BowerReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `BowerReturn`
func BowerReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (BowerReturn, error) {
	return rpc.AnyToJSONT[BowerReturn](r.Result.Result)
}
