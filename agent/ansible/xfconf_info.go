// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module allows retrieving Xfce 4 configurations with the help of `xfconf-
// query`.
const XfconfInfoName = "xfconf_info"

// Parameters for the `xfconf_info` Ansible module.
type XfconfInfoParameters struct {
	// A Xfconf preference channel is a top-level tree key, inside of the Xfconf
	// repository that corresponds to the location for which all application
	// properties/keys are stored.
	// If not provided, the module lists all available channels.
	Channel *string `json:"channel,omitempty"`

	// A Xfce preference key is an element in the Xfconf repository that
	// corresponds to an application preference.
	// If provided, then `channel` is required.
	// If not provided and a `channel` is provided, then the module lists all
	// available properties in that `channel`.
	Property *string `json:"property,omitempty"`
}

// Wrap the `XfconfInfoParameters into an `rpc.RPCCall`.
func (p XfconfInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: XfconfInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `xfconf_info` Ansible module.
type XfconfInfoReturn struct {
	AnsibleCommonReturns

	// List of available channels.
	// Returned when the module receives no parameter at all.
	Channels *[]string `json:"channels,omitempty"`

	// List of available properties for a specific channel.
	// Returned by passing only the `channel` parameter to the module.
	Properties *[]string `json:"properties,omitempty"`

	// Flag indicating whether the property is an array or not.
	IsArray *bool `json:"is_array,omitempty"`

	// The value of the property. Empty if the property is of array type.
	Value *string `json:"value,omitempty"`

	// The array value of the property. Empty if the property is not of array type.
	ValueArray *[]string `json:"value_array,omitempty"`

	// The version of the `xfconf-query` command.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `XfconfInfoReturn`
func XfconfInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (XfconfInfoReturn, error) {
	return cast.AnyToJSONT[XfconfInfoReturn](r.Result.Result)
}
