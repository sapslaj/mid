// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const GitName = "git"

type GitParameters struct {
	Repo             string    `json:"repo"`
	Dest             string    `json:"dest"`
	Version          *string   `json:"version,omitempty"`
	AcceptHostkey    *bool     `json:"accept_hostkey,omitempty"`
	AcceptNewhostkey *bool     `json:"accept_newhostkey,omitempty"`
	SshOpts          *string   `json:"ssh_opts,omitempty"`
	KeyFile          *string   `json:"key_file,omitempty"`
	Reference        *string   `json:"reference,omitempty"`
	Remote           *string   `json:"remote,omitempty"`
	Refspec          *string   `json:"refspec,omitempty"`
	Force            *bool     `json:"force,omitempty"`
	Depth            *int      `json:"depth,omitempty"`
	Clone            *bool     `json:"clone,omitempty"`
	Update           *bool     `json:"update,omitempty"`
	Executable       *string   `json:"executable,omitempty"`
	Bare             *bool     `json:"bare,omitempty"`
	Umask            *any      `json:"umask,omitempty"`
	Recursive        *bool     `json:"recursive,omitempty"`
	SingleBranch     *bool     `json:"single_branch,omitempty"`
	TrackSubmodules  *bool     `json:"track_submodules,omitempty"`
	VerifyCommit     *bool     `json:"verify_commit,omitempty"`
	Archive          *string   `json:"archive,omitempty"`
	ArchivePrefix    *string   `json:"archive_prefix,omitempty"`
	SeparateGitDir   *string   `json:"separate_git_dir,omitempty"`
	GpgAllowlist     *[]string `json:"gpg_allowlist,omitempty"`
}

func (p *GitParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: GitName,
			Args: args,
		},
	}, nil
}

type GitReturn struct {
	AnsibleCommonReturns
	After            *string `json:"after,omitempty"`
	Before           *string `json:"before,omitempty"`
	RemoteUrlChanged *bool   `json:"remote_url_changed,omitempty"`
	Warnings         *string `json:"warnings,omitempty"`
	GitDirNow        *string `json:"git_dir_now,omitempty"`
	GitDirBefore     *string `json:"git_dir_before,omitempty"`
}

func GitReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (GitReturn, error) {
	return rpc.AnyToJSONT[GitReturn](r.Result.Result)
}
