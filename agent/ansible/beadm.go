// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Create, delete or activate ZFS boot environments.
// Mount and unmount ZFS boot environments.
const BeadmName = "beadm"

// Create or delete ZFS boot environment.
type BeadmState string

const (
	BeadmStateAbsent    BeadmState = "absent"
	BeadmStateActivated BeadmState = "activated"
	BeadmStateMounted   BeadmState = "mounted"
	BeadmStatePresent   BeadmState = "present"
	BeadmStateUnmounted BeadmState = "unmounted"
)

// Convert a supported type to an optional (pointer) BeadmState
func OptionalBeadmState[T interface {
	*BeadmState | BeadmState | *string | string
}](s T) *BeadmState {
	switch v := any(s).(type) {
	case *BeadmState:
		return v
	case BeadmState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := BeadmState(*v)
		return &val
	case string:
		val := BeadmState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `beadm` Ansible module.
type BeadmParameters struct {
	// ZFS boot environment name.
	Name string `json:"name"`

	// If specified, the new boot environment will be cloned from the given
	// snapshot or inactive boot environment.
	Snapshot *string `json:"snapshot,omitempty"`

	// Associate a description with a new boot environment. This option is
	// available only on Solarish platforms.
	Description *string `json:"description,omitempty"`

	// Create the datasets for new BE with specific ZFS properties.
	// Multiple options can be specified.
	// This option is available only on Solarish platforms.
	Options *string `json:"options,omitempty"`

	// Path where to mount the ZFS boot environment.
	Mountpoint *string `json:"mountpoint,omitempty"`

	// Create or delete ZFS boot environment.
	// default: BeadmStatePresent
	State *BeadmState `json:"state,omitempty"`

	// Specifies if the unmount should be forced.
	// default: false
	Force *bool `json:"force,omitempty"`
}

// Wrap the `BeadmParameters into an `rpc.RPCCall`.
func (p BeadmParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: BeadmName,
			Args: args,
		},
	}, nil
}

// Return values for the `beadm` Ansible module.
type BeadmReturn struct {
	AnsibleCommonReturns

	// BE name.
	Name *string `json:"name,omitempty"`

	// ZFS snapshot to create BE from.
	Snapshot *string `json:"snapshot,omitempty"`

	// BE description.
	Description *string `json:"description,omitempty"`

	// BE additional options.
	Options *string `json:"options,omitempty"`

	// BE mountpoint.
	Mountpoint *string `json:"mountpoint,omitempty"`

	// State of the target.
	State *string `json:"state,omitempty"`

	// If forced action is wanted.
	Force *bool `json:"force,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `BeadmReturn`
func BeadmReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (BeadmReturn, error) {
	return rpc.AnyToJSONT[BeadmReturn](r.Result.Result)
}
