// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manage PHP packages with the pear package manager.
const PearName = "pear"

// Desired state of the package.
type PearState string

const (
	PearStatePresent   PearState = "present"
	PearStateInstalled PearState = "installed"
	PearStateLatest    PearState = "latest"
	PearStateAbsent    PearState = "absent"
	PearStateRemoved   PearState = "removed"
)

// Convert a supported type to an optional (pointer) PearState
func OptionalPearState[T interface {
	*PearState | PearState | *string | string
}](s T) *PearState {
	switch v := any(s).(type) {
	case *PearState:
		return v
	case PearState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := PearState(*v)
		return &val
	case string:
		val := PearState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `pear` Ansible module.
type PearParameters struct {
	// Name of the package to install, upgrade, or remove.
	Name string `json:"name"`

	// Desired state of the package.
	// default: PearStatePresent
	State *PearState `json:"state,omitempty"`

	// Path to the pear executable.
	Executable *string `json:"executable,omitempty"`

	// List of regular expressions that can be used to detect prompts during pear
	// package installation to answer the expected question.
	// Prompts will be processed in the same order as the packages list.
	// You can optionally specify an answer to any question in the list.
	// If no answer is provided, the list item will only contain the regular
	// expression.
	// To specify an answer, the item will be a dict with the regular expression as
	// key and the answer as value `my_regular_expression: 'an_answer'`.
	// You can provide a list containing items with or without answer.
	// A prompt list can be shorter or longer than the packages list but will issue
	// a warning.
	// If you want to specify that a package will not need prompts in the middle of
	// a list, `null`.
	Prompts *[]any `json:"prompts,omitempty"`
}

// Wrap the `PearParameters into an `rpc.RPCCall`.
func (p PearParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PearName,
			Args: args,
		},
	}, nil
}

// Return values for the `pear` Ansible module.
type PearReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `PearReturn`
func PearReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PearReturn, error) {
	return cast.AnyToJSONT[PearReturn](r.Result.Result)
}
