# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import types as _types

__all__ = ["AptArgs", "Apt"]


@pulumi.input_type
class AptArgs:
    def __init__(
        __self__,
        *,
        allow_change_held_packages: Optional[pulumi.Input[builtins.bool]] = None,
        allow_downgrade: Optional[pulumi.Input[builtins.bool]] = None,
        allow_unauthenticated: Optional[pulumi.Input[builtins.bool]] = None,
        autoclean: Optional[pulumi.Input[builtins.bool]] = None,
        autoremove: Optional[pulumi.Input[builtins.bool]] = None,
        cache_valid_time: Optional[pulumi.Input[builtins.int]] = None,
        clean: Optional[pulumi.Input[builtins.bool]] = None,
        deb: Optional[pulumi.Input[builtins.str]] = None,
        default_release: Optional[pulumi.Input[builtins.str]] = None,
        dpkg_options: Optional[pulumi.Input[builtins.str]] = None,
        ensure: Optional[pulumi.Input[builtins.str]] = None,
        fail_on_autoremove: Optional[pulumi.Input[builtins.bool]] = None,
        force: Optional[pulumi.Input[builtins.bool]] = None,
        force_apt_get: Optional[pulumi.Input[builtins.bool]] = None,
        install_recommends: Optional[pulumi.Input[builtins.bool]] = None,
        lock_timeout: Optional[pulumi.Input[builtins.int]] = None,
        name: Optional[pulumi.Input[builtins.str]] = None,
        names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
        only_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
        policy_rc_d: Optional[pulumi.Input[builtins.int]] = None,
        purge: Optional[pulumi.Input[builtins.bool]] = None,
        triggers: Optional[pulumi.Input["_types.TriggersInputArgs"]] = None,
        update_cache: Optional[pulumi.Input[builtins.bool]] = None,
        update_cache_retries: Optional[pulumi.Input[builtins.int]] = None,
        update_cache_retry_max_delay: Optional[pulumi.Input[builtins.int]] = None,
        upgrade: Optional[pulumi.Input[builtins.str]] = None,
    ):
        """
        The set of arguments for constructing a Apt resource.
        """
        if allow_change_held_packages is not None:
            pulumi.set(
                __self__, "allow_change_held_packages", allow_change_held_packages
            )
        if allow_downgrade is not None:
            pulumi.set(__self__, "allow_downgrade", allow_downgrade)
        if allow_unauthenticated is not None:
            pulumi.set(__self__, "allow_unauthenticated", allow_unauthenticated)
        if autoclean is not None:
            pulumi.set(__self__, "autoclean", autoclean)
        if autoremove is not None:
            pulumi.set(__self__, "autoremove", autoremove)
        if cache_valid_time is not None:
            pulumi.set(__self__, "cache_valid_time", cache_valid_time)
        if clean is not None:
            pulumi.set(__self__, "clean", clean)
        if deb is not None:
            pulumi.set(__self__, "deb", deb)
        if default_release is not None:
            pulumi.set(__self__, "default_release", default_release)
        if dpkg_options is not None:
            pulumi.set(__self__, "dpkg_options", dpkg_options)
        if ensure is not None:
            pulumi.set(__self__, "ensure", ensure)
        if fail_on_autoremove is not None:
            pulumi.set(__self__, "fail_on_autoremove", fail_on_autoremove)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if force_apt_get is not None:
            pulumi.set(__self__, "force_apt_get", force_apt_get)
        if install_recommends is not None:
            pulumi.set(__self__, "install_recommends", install_recommends)
        if lock_timeout is not None:
            pulumi.set(__self__, "lock_timeout", lock_timeout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if only_upgrade is not None:
            pulumi.set(__self__, "only_upgrade", only_upgrade)
        if policy_rc_d is not None:
            pulumi.set(__self__, "policy_rc_d", policy_rc_d)
        if purge is not None:
            pulumi.set(__self__, "purge", purge)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if update_cache is not None:
            pulumi.set(__self__, "update_cache", update_cache)
        if update_cache_retries is not None:
            pulumi.set(__self__, "update_cache_retries", update_cache_retries)
        if update_cache_retry_max_delay is not None:
            pulumi.set(
                __self__, "update_cache_retry_max_delay", update_cache_retry_max_delay
            )
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)

    @property
    @pulumi.getter(name="allowChangeHeldPackages")
    def allow_change_held_packages(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allow_change_held_packages")

    @allow_change_held_packages.setter
    def allow_change_held_packages(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_change_held_packages", value)

    @property
    @pulumi.getter(name="allowDowngrade")
    def allow_downgrade(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allow_downgrade")

    @allow_downgrade.setter
    def allow_downgrade(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_downgrade", value)

    @property
    @pulumi.getter(name="allowUnauthenticated")
    def allow_unauthenticated(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allow_unauthenticated")

    @allow_unauthenticated.setter
    def allow_unauthenticated(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_unauthenticated", value)

    @property
    @pulumi.getter
    def autoclean(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "autoclean")

    @autoclean.setter
    def autoclean(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "autoclean", value)

    @property
    @pulumi.getter
    def autoremove(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "autoremove")

    @autoremove.setter
    def autoremove(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "autoremove", value)

    @property
    @pulumi.getter(name="cacheValidTime")
    def cache_valid_time(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cache_valid_time")

    @cache_valid_time.setter
    def cache_valid_time(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cache_valid_time", value)

    @property
    @pulumi.getter
    def clean(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "clean")

    @clean.setter
    def clean(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clean", value)

    @property
    @pulumi.getter
    def deb(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "deb")

    @deb.setter
    def deb(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deb", value)

    @property
    @pulumi.getter(name="defaultRelease")
    def default_release(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "default_release")

    @default_release.setter
    def default_release(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_release", value)

    @property
    @pulumi.getter(name="dpkgOptions")
    def dpkg_options(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dpkg_options")

    @dpkg_options.setter
    def dpkg_options(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dpkg_options", value)

    @property
    @pulumi.getter
    def ensure(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "ensure")

    @ensure.setter
    def ensure(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ensure", value)

    @property
    @pulumi.getter(name="failOnAutoremove")
    def fail_on_autoremove(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "fail_on_autoremove")

    @fail_on_autoremove.setter
    def fail_on_autoremove(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "fail_on_autoremove", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="forceAptGet")
    def force_apt_get(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "force_apt_get")

    @force_apt_get.setter
    def force_apt_get(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_apt_get", value)

    @property
    @pulumi.getter(name="installRecommends")
    def install_recommends(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "install_recommends")

    @install_recommends.setter
    def install_recommends(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "install_recommends", value)

    @property
    @pulumi.getter(name="lockTimeout")
    def lock_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "lock_timeout")

    @lock_timeout.setter
    def lock_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lock_timeout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "names")

    @names.setter
    def names(
        self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
    ):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter(name="onlyUpgrade")
    def only_upgrade(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "only_upgrade")

    @only_upgrade.setter
    def only_upgrade(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "only_upgrade", value)

    @property
    @pulumi.getter(name="policyRcD")
    def policy_rc_d(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "policy_rc_d")

    @policy_rc_d.setter
    def policy_rc_d(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "policy_rc_d", value)

    @property
    @pulumi.getter
    def purge(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "purge")

    @purge.setter
    def purge(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "purge", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input["_types.TriggersInputArgs"]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input["_types.TriggersInputArgs"]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter(name="updateCache")
    def update_cache(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "update_cache")

    @update_cache.setter
    def update_cache(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "update_cache", value)

    @property
    @pulumi.getter(name="updateCacheRetries")
    def update_cache_retries(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "update_cache_retries")

    @update_cache_retries.setter
    def update_cache_retries(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "update_cache_retries", value)

    @property
    @pulumi.getter(name="updateCacheRetryMaxDelay")
    def update_cache_retry_max_delay(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "update_cache_retry_max_delay")

    @update_cache_retry_max_delay.setter
    def update_cache_retry_max_delay(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "update_cache_retry_max_delay", value)

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "upgrade")

    @upgrade.setter
    def upgrade(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upgrade", value)


@pulumi.type_token("mid:resource:Apt")
class Apt(pulumi.CustomResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        allow_change_held_packages: Optional[pulumi.Input[builtins.bool]] = None,
        allow_downgrade: Optional[pulumi.Input[builtins.bool]] = None,
        allow_unauthenticated: Optional[pulumi.Input[builtins.bool]] = None,
        autoclean: Optional[pulumi.Input[builtins.bool]] = None,
        autoremove: Optional[pulumi.Input[builtins.bool]] = None,
        cache_valid_time: Optional[pulumi.Input[builtins.int]] = None,
        clean: Optional[pulumi.Input[builtins.bool]] = None,
        deb: Optional[pulumi.Input[builtins.str]] = None,
        default_release: Optional[pulumi.Input[builtins.str]] = None,
        dpkg_options: Optional[pulumi.Input[builtins.str]] = None,
        ensure: Optional[pulumi.Input[builtins.str]] = None,
        fail_on_autoremove: Optional[pulumi.Input[builtins.bool]] = None,
        force: Optional[pulumi.Input[builtins.bool]] = None,
        force_apt_get: Optional[pulumi.Input[builtins.bool]] = None,
        install_recommends: Optional[pulumi.Input[builtins.bool]] = None,
        lock_timeout: Optional[pulumi.Input[builtins.int]] = None,
        name: Optional[pulumi.Input[builtins.str]] = None,
        names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
        only_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
        policy_rc_d: Optional[pulumi.Input[builtins.int]] = None,
        purge: Optional[pulumi.Input[builtins.bool]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        update_cache: Optional[pulumi.Input[builtins.bool]] = None,
        update_cache_retries: Optional[pulumi.Input[builtins.int]] = None,
        update_cache_retry_max_delay: Optional[pulumi.Input[builtins.int]] = None,
        upgrade: Optional[pulumi.Input[builtins.str]] = None,
        __props__=None,
    ):
        """
        Create a Apt resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: Optional[AptArgs] = None,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a Apt resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            AptArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        allow_change_held_packages: Optional[pulumi.Input[builtins.bool]] = None,
        allow_downgrade: Optional[pulumi.Input[builtins.bool]] = None,
        allow_unauthenticated: Optional[pulumi.Input[builtins.bool]] = None,
        autoclean: Optional[pulumi.Input[builtins.bool]] = None,
        autoremove: Optional[pulumi.Input[builtins.bool]] = None,
        cache_valid_time: Optional[pulumi.Input[builtins.int]] = None,
        clean: Optional[pulumi.Input[builtins.bool]] = None,
        deb: Optional[pulumi.Input[builtins.str]] = None,
        default_release: Optional[pulumi.Input[builtins.str]] = None,
        dpkg_options: Optional[pulumi.Input[builtins.str]] = None,
        ensure: Optional[pulumi.Input[builtins.str]] = None,
        fail_on_autoremove: Optional[pulumi.Input[builtins.bool]] = None,
        force: Optional[pulumi.Input[builtins.bool]] = None,
        force_apt_get: Optional[pulumi.Input[builtins.bool]] = None,
        install_recommends: Optional[pulumi.Input[builtins.bool]] = None,
        lock_timeout: Optional[pulumi.Input[builtins.int]] = None,
        name: Optional[pulumi.Input[builtins.str]] = None,
        names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
        only_upgrade: Optional[pulumi.Input[builtins.bool]] = None,
        policy_rc_d: Optional[pulumi.Input[builtins.int]] = None,
        purge: Optional[pulumi.Input[builtins.bool]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        update_cache: Optional[pulumi.Input[builtins.bool]] = None,
        update_cache_retries: Optional[pulumi.Input[builtins.int]] = None,
        update_cache_retry_max_delay: Optional[pulumi.Input[builtins.int]] = None,
        upgrade: Optional[pulumi.Input[builtins.str]] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = AptArgs.__new__(AptArgs)

            __props__.__dict__["allow_change_held_packages"] = (
                allow_change_held_packages
            )
            __props__.__dict__["allow_downgrade"] = allow_downgrade
            __props__.__dict__["allow_unauthenticated"] = allow_unauthenticated
            __props__.__dict__["autoclean"] = autoclean
            __props__.__dict__["autoremove"] = autoremove
            __props__.__dict__["cache_valid_time"] = cache_valid_time
            __props__.__dict__["clean"] = clean
            __props__.__dict__["deb"] = deb
            __props__.__dict__["default_release"] = default_release
            __props__.__dict__["dpkg_options"] = dpkg_options
            __props__.__dict__["ensure"] = ensure
            __props__.__dict__["fail_on_autoremove"] = fail_on_autoremove
            __props__.__dict__["force"] = force
            __props__.__dict__["force_apt_get"] = force_apt_get
            __props__.__dict__["install_recommends"] = install_recommends
            __props__.__dict__["lock_timeout"] = lock_timeout
            __props__.__dict__["name"] = name
            __props__.__dict__["names"] = names
            __props__.__dict__["only_upgrade"] = only_upgrade
            __props__.__dict__["policy_rc_d"] = policy_rc_d
            __props__.__dict__["purge"] = purge
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["update_cache"] = update_cache
            __props__.__dict__["update_cache_retries"] = update_cache_retries
            __props__.__dict__["update_cache_retry_max_delay"] = (
                update_cache_retry_max_delay
            )
            __props__.__dict__["upgrade"] = upgrade
        super(Apt, __self__).__init__(
            "mid:resource:Apt", resource_name, __props__, opts
        )

    @staticmethod
    def get(
        resource_name: str,
        id: pulumi.Input[str],
        opts: Optional[pulumi.ResourceOptions] = None,
    ) -> "Apt":
        """
        Get an existing Apt resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AptArgs.__new__(AptArgs)

        __props__.__dict__["allow_change_held_packages"] = None
        __props__.__dict__["allow_downgrade"] = None
        __props__.__dict__["allow_unauthenticated"] = None
        __props__.__dict__["autoclean"] = None
        __props__.__dict__["autoremove"] = None
        __props__.__dict__["cache_valid_time"] = None
        __props__.__dict__["clean"] = None
        __props__.__dict__["deb"] = None
        __props__.__dict__["default_release"] = None
        __props__.__dict__["dpkg_options"] = None
        __props__.__dict__["ensure"] = None
        __props__.__dict__["fail_on_autoremove"] = None
        __props__.__dict__["force"] = None
        __props__.__dict__["force_apt_get"] = None
        __props__.__dict__["install_recommends"] = None
        __props__.__dict__["lock_timeout"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["names"] = None
        __props__.__dict__["only_upgrade"] = None
        __props__.__dict__["policy_rc_d"] = None
        __props__.__dict__["purge"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["update_cache"] = None
        __props__.__dict__["update_cache_retries"] = None
        __props__.__dict__["update_cache_retry_max_delay"] = None
        __props__.__dict__["upgrade"] = None
        return Apt(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowChangeHeldPackages")
    def allow_change_held_packages(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "allow_change_held_packages")

    @property
    @pulumi.getter(name="allowDowngrade")
    def allow_downgrade(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "allow_downgrade")

    @property
    @pulumi.getter(name="allowUnauthenticated")
    def allow_unauthenticated(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "allow_unauthenticated")

    @property
    @pulumi.getter
    def autoclean(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "autoclean")

    @property
    @pulumi.getter
    def autoremove(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "autoremove")

    @property
    @pulumi.getter(name="cacheValidTime")
    def cache_valid_time(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "cache_valid_time")

    @property
    @pulumi.getter
    def clean(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "clean")

    @property
    @pulumi.getter
    def deb(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "deb")

    @property
    @pulumi.getter(name="defaultRelease")
    def default_release(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "default_release")

    @property
    @pulumi.getter(name="dpkgOptions")
    def dpkg_options(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dpkg_options")

    @property
    @pulumi.getter
    def ensure(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "ensure")

    @property
    @pulumi.getter(name="failOnAutoremove")
    def fail_on_autoremove(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "fail_on_autoremove")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter(name="forceAptGet")
    def force_apt_get(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "force_apt_get")

    @property
    @pulumi.getter(name="installRecommends")
    def install_recommends(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "install_recommends")

    @property
    @pulumi.getter(name="lockTimeout")
    def lock_timeout(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "lock_timeout")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def names(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="onlyUpgrade")
    def only_upgrade(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "only_upgrade")

    @property
    @pulumi.getter(name="policyRcD")
    def policy_rc_d(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "policy_rc_d")

    @property
    @pulumi.getter
    def purge(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "purge")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output["_types.outputs.TriggersOutput"]:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="updateCache")
    def update_cache(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "update_cache")

    @property
    @pulumi.getter(name="updateCacheRetries")
    def update_cache_retries(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "update_cache_retries")

    @property
    @pulumi.getter(name="updateCacheRetryMaxDelay")
    def update_cache_retry_max_delay(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "update_cache_retry_max_delay")

    @property
    @pulumi.getter
    def upgrade(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "upgrade")
