// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module allows the installation of Ansible collections or roles using
// `ansible-galaxy`.
const AnsibleGalaxyInstallName = "ansible_galaxy_install"

// If `state=present` then the collection or role will be installed. Note that
// the collections and roles are not updated with this option.
// Currently the `state=latest` is ignored unless `type=collection`, and it will
// ensure the collection is installed and updated to the latest available
// version.
// Please note that `force=true` can be used to perform upgrade regardless of
// `type`.
type AnsibleGalaxyInstallState string

const (
	AnsibleGalaxyInstallStatePresent AnsibleGalaxyInstallState = "present"
	AnsibleGalaxyInstallStateLatest  AnsibleGalaxyInstallState = "latest"
)

func OptionalAnsibleGalaxyInstallState[T interface {
	*AnsibleGalaxyInstallState | AnsibleGalaxyInstallState | *string | string
}](s T) *AnsibleGalaxyInstallState {
	switch v := any(s).(type) {
	case *AnsibleGalaxyInstallState:
		return v
	case AnsibleGalaxyInstallState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AnsibleGalaxyInstallState(*v)
		return &val
	case string:
		val := AnsibleGalaxyInstallState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The type of installation performed by `ansible-galaxy`.
// If `type=both`, then `requirements_file` must be passed and it may contain
// both roles and collections.
// Note however that the opposite is not true: if using a `requirements_file`,
// then `type` can be any of the three choices.
type AnsibleGalaxyInstallType string

const (
	AnsibleGalaxyInstallTypeCollection AnsibleGalaxyInstallType = "collection"
	AnsibleGalaxyInstallTypeRole       AnsibleGalaxyInstallType = "role"
	AnsibleGalaxyInstallTypeBoth       AnsibleGalaxyInstallType = "both"
)

// Parameters for the `ansible_galaxy_install` Ansible module.
type AnsibleGalaxyInstallParameters struct {
	// If `state=present` then the collection or role will be installed. Note that
	// the collections and roles are not updated with this option.
	// Currently the `state=latest` is ignored unless `type=collection`, and it
	// will ensure the collection is installed and updated to the latest available
	// version.
	// Please note that `force=true` can be used to perform upgrade regardless of
	// `type`.
	// default: AnsibleGalaxyInstallStatePresent
	State *AnsibleGalaxyInstallState `json:"state,omitempty"`

	// The type of installation performed by `ansible-galaxy`.
	// If `type=both`, then `requirements_file` must be passed and it may contain
	// both roles and collections.
	// Note however that the opposite is not true: if using a `requirements_file`,
	// then `type` can be any of the three choices.
	Type AnsibleGalaxyInstallType `json:"type"`

	// Name of the collection or role being installed.
	// Versions can be specified with `ansible-galaxy` usual formats. For example,
	// the collection `community.docker:1.6.1` or the role
	// `ansistrano.deploy,3.8.0`.
	// `name` and `requirements_file` are mutually exclusive.
	Name *string `json:"name,omitempty"`

	// Path to a file containing a list of requirements to be installed.
	// It works for `type` equals to `collection` and `role`.
	// `name` and `requirements_file` are mutually exclusive.
	RequirementsFile *string `json:"requirements_file,omitempty"`

	// The path to the directory containing your collections or roles, according to
	// the value of `type`.
	// Please notice that `ansible-galaxy` will not install collections with
	// `type=both`, when `requirements_file` contains both roles and collections
	// and `dest` is specified.
	Dest *string `json:"dest,omitempty"`

	// Refrain from installing dependencies.
	// default: false
	NoDeps *bool `json:"no_deps,omitempty"`

	// Force overwriting existing roles and/or collections.
	// It can be used for upgrading, but the module output will always report
	// `changed=true`.
	// Using `force=true` is mandatory when downgrading.
	// default: false
	Force *bool `json:"force,omitempty"`
}

// Wrap the `AnsibleGalaxyInstallParameters into an `rpc.RPCCall`.
func (p *AnsibleGalaxyInstallParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AnsibleGalaxyInstallName,
			Args: args,
		},
	}, nil
}

// Return values for the `ansible_galaxy_install` Ansible module.
type AnsibleGalaxyInstallReturn struct {
	AnsibleCommonReturns

	// The value of the `type` parameter.
	Type *string `json:"type,omitempty"`

	// The value of the `name` parameter.
	Name *string `json:"name,omitempty"`

	// The value of the `dest` parameter.
	Dest *string `json:"dest,omitempty"`

	// The value of the `requirements_file` parameter.
	RequirementsFile *string `json:"requirements_file,omitempty"`

	// The value of the `force` parameter.
	Force *bool `json:"force,omitempty"`

	// If `requirements_file` is specified instead, returns dictionary with all the
	// roles installed per path.
	// If `name` is specified, returns that role name and the version installed per
	// path.
	InstalledRoles *map[string]any `json:"installed_roles,omitempty"`

	// If `requirements_file` is specified instead, returns dictionary with all the
	// collections installed per path.
	// If `name` is specified, returns that collection name and the version
	// installed per path.
	InstalledCollections *map[string]any `json:"installed_collections,omitempty"`

	// New collections installed by this module.
	NewCollections *map[string]any `json:"new_collections,omitempty"`

	// New roles installed by this module.
	NewRoles *map[string]any `json:"new_roles,omitempty"`

	// Version of ansible-core for ansible-galaxy.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `AnsibleGalaxyInstallReturn`
func AnsibleGalaxyInstallReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AnsibleGalaxyInstallReturn, error) {
	return rpc.AnyToJSONT[AnsibleGalaxyInstallReturn](r.Result.Result)
}
