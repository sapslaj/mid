// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const SetupName = "setup"

//go:embed setup.zip
var SetupZipfile []byte

type SetupParameters struct {
	GatherSubset  *[]string `json:"gather_subset,omitempty"`
	GatherTimeout *int      `json:"gather_timeout,omitempty"`
	Filter        *[]string `json:"filter,omitempty"`
	FactPath      *string   `json:"fact_path,omitempty"`
}

func (p *SetupParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  SetupZipfile,
			Name: SetupName,
			Args: args,
		},
	}, nil
}

type SetupReturn struct {
	AnsibleCommonReturns
}

func SetupReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (SetupReturn, error) {
	return rpc.AnyToJSONT[SetupReturn](r.Result.Result)
}
