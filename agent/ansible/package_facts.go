// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Return information about installed packages as facts.
const PackageFactsName = "package_facts"

// The package manager(s) used by the system so we can query the package
// information. This is a list and can support multiple package managers per
// system, since version 2.8.
// The `portage` and `pkg` options were added in version 2.8.
// The `apk` option was added in version 2.11.
// The `pkg_info`' option was added in version 2.13.
// Aliases were added in 2.18, to support using
// `manager={{ansible_facts['pkg_mgr']}}`
type PackageFactsManager string

const (
	// Depending on `strategy`, will match the first or all package managers
	// provided, in order
	PackageFactsManagerAuto PackageFactsManager = "auto"
	// For RPM based distros, requires RPM Python bindings, not installed by
	// default on Suse (python3-rpm)
	PackageFactsManagerRpm PackageFactsManager = "rpm"
	// Alias to rpm
	PackageFactsManagerYum PackageFactsManager = "yum"
	// Alias to rpm
	PackageFactsManagerDnf PackageFactsManager = "dnf"
	// Alias to rpm
	PackageFactsManagerDnf5 PackageFactsManager = "dnf5"
	// Alias to rpm
	PackageFactsManagerZypper PackageFactsManager = "zypper"
	// For DEB based distros, `python-apt` package must be installed on targeted
	// hosts
	PackageFactsManagerApt PackageFactsManager = "apt"
	// Handles ebuild packages, it requires the `qlist` utility, which is part of
	// 'app-portage/portage-utils'
	PackageFactsManagerPortage PackageFactsManager = "portage"
	// libpkg front end (FreeBSD)
	PackageFactsManagerPkg PackageFactsManager = "pkg"
	// Alias to pkg
	PackageFactsManagerPkg5 PackageFactsManager = "pkg5"
	// Alias to pkg
	PackageFactsManagerPkgng PackageFactsManager = "pkgng"
	// Archlinux package manager/builder
	PackageFactsManagerPacman PackageFactsManager = "pacman"
	// Alpine Linux package manager
	PackageFactsManagerApk PackageFactsManager = "apk"
	// OpenBSD package manager
	PackageFactsManagerPkgInfo PackageFactsManager = "pkg_info"
	// Alias to pkg_info
	PackageFactsManagerOpenbsdPkg PackageFactsManager = "openbsd_pkg"
)

// Convert a supported type to an optional (pointer) PackageFactsManager
func OptionalPackageFactsManager[T interface {
	*PackageFactsManager | PackageFactsManager | *string | string
}](s T) *PackageFactsManager {
	switch v := any(s).(type) {
	case *PackageFactsManager:
		return v
	case PackageFactsManager:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := PackageFactsManager(*v)
		return &val
	case string:
		val := PackageFactsManager(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// This option controls how the module queries the package managers on the
// system.
type PackageFactsStrategy string

const (
	// returns only information for the first supported package manager available.
	PackageFactsStrategyFirst PackageFactsStrategy = "first"
	// returns information for all supported and available package managers on the
	// system.
	PackageFactsStrategyAll PackageFactsStrategy = "all"
)

// Convert a supported type to an optional (pointer) PackageFactsStrategy
func OptionalPackageFactsStrategy[T interface {
	*PackageFactsStrategy | PackageFactsStrategy | *string | string
}](s T) *PackageFactsStrategy {
	switch v := any(s).(type) {
	case *PackageFactsStrategy:
		return v
	case PackageFactsStrategy:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := PackageFactsStrategy(*v)
		return &val
	case string:
		val := PackageFactsStrategy(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `package_facts` Ansible module.
type PackageFactsParameters struct {
	// The package manager(s) used by the system so we can query the package
	// information. This is a list and can support multiple package managers per
	// system, since version 2.8.
	// The `portage` and `pkg` options were added in version 2.8.
	// The `apk` option was added in version 2.11.
	// The `pkg_info`' option was added in version 2.13.
	// Aliases were added in 2.18, to support using
	// `manager={{ansible_facts['pkg_mgr']}}`
	// default: []PackageFactsManager{PackageFactsManagerAuto}
	Manager *PackageFactsManager `json:"manager,omitempty"`

	// This option controls how the module queries the package managers on the
	// system.
	// default: PackageFactsStrategyFirst
	Strategy *PackageFactsStrategy `json:"strategy,omitempty"`
}

// Wrap the `PackageFactsParameters into an `rpc.RPCCall`.
func (p PackageFactsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PackageFactsName,
			Args: args,
		},
	}, nil
}

// Return values for the `package_facts` Ansible module.
type PackageFactsReturn struct {
	AnsibleCommonReturns

	// Facts to add to ansible_facts.
	AnsibleFacts *any `json:"ansible_facts,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `PackageFactsReturn`
func PackageFactsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PackageFactsReturn, error) {
	return rpc.AnyToJSONT[PackageFactsReturn](r.Result.Result)
}
