// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages locales in Debian and Ubuntu systems.
const LocaleGenName = "locale_gen"

// Whether the locales shall be present.
type LocaleGenState string

const (
	LocaleGenStateAbsent  LocaleGenState = "absent"
	LocaleGenStatePresent LocaleGenState = "present"
)

// Convert a supported type to an optional (pointer) LocaleGenState
func OptionalLocaleGenState[T interface {
	*LocaleGenState | LocaleGenState | *string | string
}](s T) *LocaleGenState {
	switch v := any(s).(type) {
	case *LocaleGenState:
		return v
	case LocaleGenState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := LocaleGenState(*v)
		return &val
	case string:
		val := LocaleGenState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `locale_gen` Ansible module.
type LocaleGenParameters struct {
	// Name and encoding of the locales, such as `en_GB.UTF-8`.
	// Before community.general 9.3.0, this was a string. Using a string still
	// works.
	Name []string `json:"name"`

	// Whether the locales shall be present.
	// default: LocaleGenStatePresent
	State *LocaleGenState `json:"state,omitempty"`
}

// Wrap the `LocaleGenParameters into an `rpc.RPCCall`.
func (p LocaleGenParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: LocaleGenName,
			Args: args,
		},
	}, nil
}

// Return values for the `locale_gen` Ansible module.
type LocaleGenReturn struct {
	AnsibleCommonReturns

	// Mechanism used to deploy the locales.
	Mechanism *string `json:"mechanism,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `LocaleGenReturn`
func LocaleGenReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (LocaleGenReturn, error) {
	return rpc.AnyToJSONT[LocaleGenReturn](r.Result.Result)
}
