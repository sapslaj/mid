// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages symbolic links using the `update-alternatives` tool.
// Useful when multiple programs are installed but provide similar functionality
// (for example, different editors).
const AlternativesName = "alternatives"

// `present` - install the alternative (if not already installed), but do not
// set it as the currently selected alternative for the group.
// `selected` - install the alternative (if not already installed), and set it
// as the currently selected alternative for the group.
// `auto` - install the alternative (if not already installed), and set the
// group to auto mode. Added in community.general 5.1.0.
// `absent` - removes the alternative. Added in community.general 5.1.0.
type AlternativesState string

const (
	AlternativesStatePresent  AlternativesState = "present"
	AlternativesStateSelected AlternativesState = "selected"
	AlternativesStateAuto     AlternativesState = "auto"
	AlternativesStateAbsent   AlternativesState = "absent"
)

// Convert a supported type to an optional (pointer) AlternativesState
func OptionalAlternativesState[T interface {
	*AlternativesState | AlternativesState | *string | string
}](s T) *AlternativesState {
	switch v := any(s).(type) {
	case *AlternativesState:
		return v
	case AlternativesState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AlternativesState(*v)
		return &val
	case string:
		val := AlternativesState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `alternatives` Ansible module.
type AlternativesParameters struct {
	// The generic name of the link.
	Name string `json:"name"`

	// The path to the real executable that the link should point to.
	Path *string `json:"path,omitempty"`

	// The family groups similar alternatives. This option is available only on
	// RHEL-based distributions.
	Family *string `json:"family,omitempty"`

	// The path to the symbolic link that should point to the real executable.
	// This option is always required on RHEL-based distributions. On Debian-based
	// distributions this option is required when the alternative `name` is unknown
	// to the system.
	Link *string `json:"link,omitempty"`

	// The priority of the alternative. If no priority is given for creation `50`
	// is used as a fallback.
	Priority *int `json:"priority,omitempty"`

	// `present` - install the alternative (if not already installed), but do not
	// set it as the currently selected alternative for the group.
	// `selected` - install the alternative (if not already installed), and set it
	// as the currently selected alternative for the group.
	// `auto` - install the alternative (if not already installed), and set the
	// group to auto mode. Added in community.general 5.1.0.
	// `absent` - removes the alternative. Added in community.general 5.1.0.
	// default: AlternativesStateSelected
	State *AlternativesState `json:"state,omitempty"`

	// A list of subcommands.
	// Each subcommand needs a name, a link and a path parameter.
	// Subcommands are also named `slaves` or `followers`, depending on the version
	// of `alternatives`.
	Subcommands *struct {
		Name string `json:"name"`
		Path string `json:"path"`
		Link string `json:"link"`
	} `json:"subcommands,omitempty"`
}

// Wrap the `AlternativesParameters into an `rpc.RPCCall`.
func (p AlternativesParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AlternativesName,
			Args: args,
		},
	}, nil
}

// Return values for the `alternatives` Ansible module.
type AlternativesReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `AlternativesReturn`
func AlternativesReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AlternativesReturn, error) {
	return cast.AnyToJSONT[AlternativesReturn](r.Result.Result)
}
