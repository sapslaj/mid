// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Run targets in a Makefile.
const MakeName = "make"

// Parameters for the `make` Ansible module.
type MakeParameters struct {
	// Change to this directory before running make.
	Chdir string `json:"chdir"`

	// Use a custom Makefile.
	File *string `json:"file,omitempty"`

	// Set the number of make jobs to run concurrently.
	// Typically if set, this would be the number of processors and/or threads
	// available to the machine.
	// This is not supported by all make implementations.
	Jobs *int `json:"jobs,omitempty"`

	// Use a specific make binary.
	Make *string `json:"make,omitempty"`

	// Any extra parameters to pass to make.
	// If the value is empty, only the key will be used. For example, `FOO:` will
	// produce `FOO`, not `FOO=`.
	Params *map[string]any `json:"params,omitempty"`

	// The target to run.
	// Typically this would be something like `install`, `test`, or `all`.
	// `target` and `targets` are mutually exclusive.
	Target *string `json:"target,omitempty"`

	// The list of targets to run.
	// Typically this would be something like `install`, `test`, or `all`.
	// `target` and `targets` are mutually exclusive.
	Targets *[]string `json:"targets,omitempty"`
}

// Wrap the `MakeParameters into an `rpc.RPCCall`.
func (p MakeParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: MakeName,
			Args: args,
		},
	}, nil
}

// Return values for the `make` Ansible module.
type MakeReturn struct {
	AnsibleCommonReturns

	// The value of the module parameter `chdir`.
	Chdir *string `json:"chdir,omitempty"`

	// The command built and executed by the module.
	Command *string `json:"command,omitempty"`

	// The value of the module parameter `file`.
	File *string `json:"file,omitempty"`

	// The value of the module parameter `jobs`.
	Jobs *int `json:"jobs,omitempty"`

	// The value of the module parameter `params`.
	Params *map[string]any `json:"params,omitempty"`

	// The value of the module parameter `target`.
	Target *string `json:"target,omitempty"`

	// The value of the module parameter `targets`.
	Targets *string `json:"targets,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `MakeReturn`
func MakeReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (MakeReturn, error) {
	return cast.AnyToJSONT[MakeReturn](r.Result.Result)
}
