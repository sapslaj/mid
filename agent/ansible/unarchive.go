// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const UnarchiveName = "unarchive"

//go:embed unarchive.zip
var UnarchiveZipfile []byte

type UnarchiveParameters struct {
	Src           string    `json:"src"`
	Dest          string    `json:"dest"`
	Copy          *bool     `json:"copy,omitempty"`
	Creates       *string   `json:"creates,omitempty"`
	IoBufferSize  *int      `json:"io_buffer_size,omitempty"`
	ListFiles     *bool     `json:"list_files,omitempty"`
	Exclude       *[]string `json:"exclude,omitempty"`
	Include       *[]string `json:"include,omitempty"`
	KeepNewer     *bool     `json:"keep_newer,omitempty"`
	ExtraOpts     *[]string `json:"extra_opts,omitempty"`
	RemoteSrc     *bool     `json:"remote_src,omitempty"`
	ValidateCerts *bool     `json:"validate_certs,omitempty"`
}

func (p *UnarchiveParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  UnarchiveZipfile,
			Name: UnarchiveName,
			Args: args,
		},
	}, nil
}

type UnarchiveReturn struct {
	AnsibleCommonReturns
	Dest    *string `json:"dest,omitempty"`
	Files   *[]any  `json:"files,omitempty"`
	Gid     *int    `json:"gid,omitempty"`
	Group   *string `json:"group,omitempty"`
	Handler *string `json:"handler,omitempty"`
	Mode    *string `json:"mode,omitempty"`
	Owner   *string `json:"owner,omitempty"`
	Size    *int    `json:"size,omitempty"`
	Src     *string `json:"src,omitempty"`
	State   *string `json:"state,omitempty"`
	Uid     *int    `json:"uid,omitempty"`
}

func UnarchiveReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (UnarchiveReturn, error) {
	return rpc.AnyToJSONT[UnarchiveReturn](r.Result.Result)
}
