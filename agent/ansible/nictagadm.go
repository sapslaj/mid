// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Create or delete nic tags on SmartOS systems.
const NictagadmName = "nictagadm"

// Create or delete a SmartOS nic tag.
type NictagadmState string

const (
	NictagadmStateAbsent  NictagadmState = "absent"
	NictagadmStatePresent NictagadmState = "present"
)

// Convert a supported type to an optional (pointer) NictagadmState
func OptionalNictagadmState[T interface {
	*NictagadmState | NictagadmState | *string | string
}](s T) *NictagadmState {
	switch v := any(s).(type) {
	case *NictagadmState:
		return v
	case NictagadmState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := NictagadmState(*v)
		return &val
	case string:
		val := NictagadmState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `nictagadm` Ansible module.
type NictagadmParameters struct {
	// Name of the nic tag.
	Name string `json:"name"`

	// Specifies the `mac` address to attach the nic tag to when not creating an
	// `etherstub`.
	// Parameters `mac` and `etherstub` are mutually exclusive.
	Mac *string `json:"mac,omitempty"`

	// Specifies that the nic tag will be attached to a created `etherstub`.
	// Parameter `etherstub` is mutually exclusive with both `mtu`, and `mac`.
	// default: false
	Etherstub *bool `json:"etherstub,omitempty"`

	// Specifies the size of the `mtu` of the desired nic tag.
	// Parameters `mtu` and `etherstub` are mutually exclusive.
	Mtu *int `json:"mtu,omitempty"`

	// When `state=absent` this switch will use the `-f` parameter and delete the
	// nic tag regardless of existing VMs.
	// default: false
	Force *bool `json:"force,omitempty"`

	// Create or delete a SmartOS nic tag.
	// default: NictagadmStatePresent
	State *NictagadmState `json:"state,omitempty"`
}

// Wrap the `NictagadmParameters into an `rpc.RPCCall`.
func (p NictagadmParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: NictagadmName,
			Args: args,
		},
	}, nil
}

// Return values for the `nictagadm` Ansible module.
type NictagadmReturn struct {
	AnsibleCommonReturns

	// Nic tag name.
	Name *string `json:"name,omitempty"`

	// MAC Address that the nic tag was attached to.
	Mac *string `json:"mac,omitempty"`

	// Specifies if the nic tag will create and attach to an etherstub.
	Etherstub *bool `json:"etherstub,omitempty"`

	// Specifies which MTU size was passed during the nictagadm add command. mtu
	// and etherstub are mutually exclusive.
	Mtu *int `json:"mtu,omitempty"`

	// Shows if -f was used during the deletion of a nic tag.
	Force *bool `json:"force,omitempty"`

	// State of the target.
	State *string `json:"state,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `NictagadmReturn`
func NictagadmReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (NictagadmReturn, error) {
	return rpc.AnyToJSONT[NictagadmReturn](r.Result.Result)
}
