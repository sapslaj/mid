// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module allows for the manipulation of GNOME 2 Configuration using
// `gconftool-2`. Please see the gconftool-2(1) man pages for more details.
const Gconftool2Name = "gconftool2"

// The type of value being set. This is ignored unless `state=present`.
type Gconftool2ValueType string

const (
	Gconftool2ValueTypeBool   Gconftool2ValueType = "bool"
	Gconftool2ValueTypeFloat  Gconftool2ValueType = "float"
	Gconftool2ValueTypeInt    Gconftool2ValueType = "int"
	Gconftool2ValueTypeString Gconftool2ValueType = "string"
)

// Convert a supported type to an optional (pointer) Gconftool2ValueType
func OptionalGconftool2ValueType[T interface {
	*Gconftool2ValueType | Gconftool2ValueType | *string | string
}](s T) *Gconftool2ValueType {
	switch v := any(s).(type) {
	case *Gconftool2ValueType:
		return v
	case Gconftool2ValueType:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := Gconftool2ValueType(*v)
		return &val
	case string:
		val := Gconftool2ValueType(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The action to take upon the key/value.
type Gconftool2State string

const (
	Gconftool2StateAbsent  Gconftool2State = "absent"
	Gconftool2StatePresent Gconftool2State = "present"
)

// Parameters for the `gconftool2` Ansible module.
type Gconftool2Parameters struct {
	// A GConf preference key is an element in the GConf repository that
	// corresponds to an application preference.
	Key string `json:"key"`

	// Preference keys typically have simple values such as strings, integers, or
	// lists of strings and integers. This is ignored unless `state=present`.
	Value *string `json:"value,omitempty"`

	// The type of value being set. This is ignored unless `state=present`.
	ValueType *Gconftool2ValueType `json:"value_type,omitempty"`

	// The action to take upon the key/value.
	State Gconftool2State `json:"state"`

	// Specify a configuration source to use rather than the default path.
	ConfigSource *string `json:"config_source,omitempty"`

	// Access the config database directly, bypassing server. If `direct` is
	// specified then the `config_source` must be specified as well.
	// default: false
	Direct *bool `json:"direct,omitempty"`
}

// Wrap the `Gconftool2Parameters into an `rpc.RPCCall`.
func (p Gconftool2Parameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: Gconftool2Name,
			Args: args,
		},
	}, nil
}

// Return values for the `gconftool2` Ansible module.
type Gconftool2Return struct {
	AnsibleCommonReturns

	// The key specified in the module parameters.
	Key *string `json:"key,omitempty"`

	// The type of the value that was changed.
	ValueType *string `json:"value_type,omitempty"`

	// The value of the preference key after executing the module or `null` if key
	// is removed.
	// From community.general 7.0.0 onwards it returns `null` for a non-existent
	// `key`, and returned `""` before that.
	Value *string `json:"value,omitempty"`

	// The value of the preference key before executing the module.
	// From community.general 7.0.0 onwards it returns `null` for a non-existent
	// `key`, and returned `""` before that.
	PreviousValue *string `json:"previous_value,omitempty"`

	// Version of gconftool-2.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `Gconftool2Return`
func Gconftool2ReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (Gconftool2Return, error) {
	return cast.AnyToJSONT[Gconftool2Return](r.Result.Result)
}
