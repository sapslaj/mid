// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages ipk packages for OpenWrt and Openembedded/Yocto based Linux
// distributions.
const OpkgName = "opkg"

// State of the package.
type OpkgState string

const (
	OpkgStatePresent   OpkgState = "present"
	OpkgStateAbsent    OpkgState = "absent"
	OpkgStateInstalled OpkgState = "installed"
	OpkgStateRemoved   OpkgState = "removed"
)

func OptionalOpkgState[T interface {
	*OpkgState | OpkgState | *string | string
}](s T) *OpkgState {
	switch v := any(s).(type) {
	case *OpkgState:
		return v
	case OpkgState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := OpkgState(*v)
		return &val
	case string:
		val := OpkgState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The `opkg --force` parameter used.
type OpkgForce string

const (
	OpkgForceDepends                    OpkgForce = "depends"
	OpkgForceMaintainer                 OpkgForce = "maintainer"
	OpkgForceReinstall                  OpkgForce = "reinstall"
	OpkgForceOverwrite                  OpkgForce = "overwrite"
	OpkgForceDowngrade                  OpkgForce = "downgrade"
	OpkgForceSpace                      OpkgForce = "space"
	OpkgForcePostinstall                OpkgForce = "postinstall"
	OpkgForceRemove                     OpkgForce = "remove"
	OpkgForceChecksum                   OpkgForce = "checksum"
	OpkgForceRemovalOfDependentPackages OpkgForce = "removal-of-dependent-packages"
)

func OptionalOpkgForce[T interface {
	*OpkgForce | OpkgForce | *string | string
}](s T) *OpkgForce {
	switch v := any(s).(type) {
	case *OpkgForce:
		return v
	case OpkgForce:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := OpkgForce(*v)
		return &val
	case string:
		val := OpkgForce(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `opkg` Ansible module.
type OpkgParameters struct {
	// Name of package(s) to install/remove.
	// `NAME=VERSION` syntax is also supported to install a package in a certain
	// version. See the examples. This only works on Yocto based Linux
	// distributions (opkg>=0.3.2) and not for OpenWrt. This is supported since
	// community.general 6.2.0.
	Name []string `json:"name"`

	// State of the package.
	// default: OpkgStatePresent
	State *OpkgState `json:"state,omitempty"`

	// The `opkg --force` parameter used.
	Force *OpkgForce `json:"force,omitempty"`

	// Update the package DB first.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`

	// The executable location for `opkg`.
	Executable *string `json:"executable,omitempty"`
}

// Wrap the `OpkgParameters into an `rpc.RPCCall`.
func (p *OpkgParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: OpkgName,
			Args: args,
		},
	}, nil
}

// Return values for the `opkg` Ansible module.
type OpkgReturn struct {
	AnsibleCommonReturns

	// Version of opkg.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `OpkgReturn`
func OpkgReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (OpkgReturn, error) {
	return rpc.AnyToJSONT[OpkgReturn](r.Result.Result)
}
