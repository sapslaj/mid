// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages Homebrew packages.
const HomebrewName = "homebrew"

// State of the package.
type HomebrewState string

const (
	HomebrewStateAbsent      HomebrewState = "absent"
	HomebrewStateHead        HomebrewState = "head"
	HomebrewStateInstalled   HomebrewState = "installed"
	HomebrewStateLatest      HomebrewState = "latest"
	HomebrewStateLinked      HomebrewState = "linked"
	HomebrewStatePresent     HomebrewState = "present"
	HomebrewStateRemoved     HomebrewState = "removed"
	HomebrewStateUninstalled HomebrewState = "uninstalled"
	HomebrewStateUnlinked    HomebrewState = "unlinked"
	HomebrewStateUpgraded    HomebrewState = "upgraded"
)

// Convert a supported type to an optional (pointer) HomebrewState
func OptionalHomebrewState[T interface {
	*HomebrewState | HomebrewState | *string | string
}](s T) *HomebrewState {
	switch v := any(s).(type) {
	case *HomebrewState:
		return v
	case HomebrewState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := HomebrewState(*v)
		return &val
	case string:
		val := HomebrewState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `homebrew` Ansible module.
type HomebrewParameters struct {
	// A list of names of packages to install/remove.
	Name *[]string `json:"name,omitempty"`

	// A `:` separated list of paths to search for `brew` executable. Since a
	// package (`formula` in homebrew parlance) location is prefixed relative to
	// the actual path of `brew` command, providing an alternative `brew` path
	// enables managing different set of packages in an alternative location in the
	// system.
	// default: "/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin"
	Path *string `json:"path,omitempty"`

	// State of the package.
	// default: HomebrewStatePresent
	State *HomebrewState `json:"state,omitempty"`

	// Update homebrew itself first.
	// default: false
	UpdateHomebrew *bool `json:"update_homebrew,omitempty"`

	// Upgrade all homebrew packages.
	// default: false
	UpgradeAll *bool `json:"upgrade_all,omitempty"`

	// Options flags to install a package.
	InstallOptions *[]string `json:"install_options,omitempty"`

	// Option flags to upgrade.
	UpgradeOptions *[]string `json:"upgrade_options,omitempty"`

	// Force the package(s) to be treated as a formula (equivalent to `brew
	// --formula`).
	// To install a cask, use the `community.general.homebrew_cask` module.
	// default: false
	ForceFormula *bool `json:"force_formula,omitempty"`
}

// Wrap the `HomebrewParameters into an `rpc.RPCCall`.
func (p HomebrewParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: HomebrewName,
			Args: args,
		},
	}, nil
}

// Return values for the `homebrew` Ansible module.
type HomebrewReturn struct {
	AnsibleCommonReturns

	// If the cache was updated or not.
	Msg *string `json:"msg,omitempty"`

	// List of package names which are unchanged after module run.
	UnchangedPkgs *[]any `json:"unchanged_pkgs,omitempty"`

	// List of package names which are changed after module run.
	ChangedPkgs *[]any `json:"changed_pkgs,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `HomebrewReturn`
func HomebrewReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (HomebrewReturn, error) {
	return cast.AnyToJSONT[HomebrewReturn](r.Result.Result)
}
