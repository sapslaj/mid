// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module allows for the manipulation of Xfce 4 Configuration with the help
// of `xfconf-query`.
const XfconfName = "xfconf"

// The type of value being set.
// When providing more than one `value_type`, the length of the list must be
// equal to the length of `value`.
// If only one `value_type` is provided, but `value` contains more than on
// element, that `value_type` is applied to all elements of `value`.
// If the `property` being set is an array and it can possibly have only one
// element in the array, then `force_array=true` must be used to ensure that
// `xfconf-query` interprets the value as an array rather than a scalar.
// Support for `uchar`, `char`, `uint64`, and `int64` has been added in
// community.general 4.8.0.
type XfconfValueType string

const (
	XfconfValueTypeString XfconfValueType = "string"
	XfconfValueTypeInt    XfconfValueType = "int"
	XfconfValueTypeDouble XfconfValueType = "double"
	XfconfValueTypeBool   XfconfValueType = "bool"
	XfconfValueTypeUint   XfconfValueType = "uint"
	XfconfValueTypeUchar  XfconfValueType = "uchar"
	XfconfValueTypeChar   XfconfValueType = "char"
	XfconfValueTypeUint64 XfconfValueType = "uint64"
	XfconfValueTypeInt64  XfconfValueType = "int64"
	XfconfValueTypeFloat  XfconfValueType = "float"
)

func OptionalXfconfValueType[T interface {
	*XfconfValueType | XfconfValueType | *string | string
}](s T) *XfconfValueType {
	switch v := any(s).(type) {
	case *XfconfValueType:
		return v
	case XfconfValueType:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XfconfValueType(*v)
		return &val
	case string:
		val := XfconfValueType(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// The action to take upon the property/value.
// The state `get` has been removed in community.general 5.0.0. Please use the
// module `community.general.xfconf_info` instead.
type XfconfState string

const (
	XfconfStatePresent XfconfState = "present"
	XfconfStateAbsent  XfconfState = "absent"
)

func OptionalXfconfState[T interface {
	*XfconfState | XfconfState | *string | string
}](s T) *XfconfState {
	switch v := any(s).(type) {
	case *XfconfState:
		return v
	case XfconfState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := XfconfState(*v)
		return &val
	case string:
		val := XfconfState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `xfconf` Ansible module.
type XfconfParameters struct {
	// A Xfconf preference channel is a top-level tree key, inside of the Xfconf
	// repository that corresponds to the location for which all application
	// properties/keys are stored. See man xfconf-query(1).
	Channel string `json:"channel"`

	// A Xfce preference key is an element in the Xfconf repository that
	// corresponds to an application preference. See man xfconf-query(1).
	Property string `json:"property"`

	// Preference properties typically have simple values such as strings,
	// integers, or lists of strings and integers. See man xfconf-query(1).
	Value *[]any `json:"value,omitempty"`

	// The type of value being set.
	// When providing more than one `value_type`, the length of the list must be
	// equal to the length of `value`.
	// If only one `value_type` is provided, but `value` contains more than on
	// element, that `value_type` is applied to all elements of `value`.
	// If the `property` being set is an array and it can possibly have only one
	// element in the array, then `force_array=true` must be used to ensure that
	// `xfconf-query` interprets the value as an array rather than a scalar.
	// Support for `uchar`, `char`, `uint64`, and `int64` has been added in
	// community.general 4.8.0.
	ValueType *XfconfValueType `json:"value_type,omitempty"`

	// The action to take upon the property/value.
	// The state `get` has been removed in community.general 5.0.0. Please use the
	// module `community.general.xfconf_info` instead.
	// default: XfconfStatePresent
	State *XfconfState `json:"state,omitempty"`

	// Force array even if only one element.
	// default: false
	ForceArray *bool `json:"force_array,omitempty"`
}

// Wrap the `XfconfParameters into an `rpc.RPCCall`.
func (p *XfconfParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: XfconfName,
			Args: args,
		},
	}, nil
}

// Return values for the `xfconf` Ansible module.
type XfconfReturn struct {
	AnsibleCommonReturns

	// The channel specified in the module parameters.
	Channel *string `json:"channel,omitempty"`

	// The property specified in the module parameters.
	Property *string `json:"property,omitempty"`

	// The type of the value that was changed (`none` for `state=reset`). Either a
	// single string value or a list of strings for array types.
	// This is a string or a list of strings.
	ValueType *any `json:"value_type,omitempty"`

	// The value of the preference key after executing the module. Either a single
	// string value or a list of strings for array types.
	// This is a string or a list of strings.
	Value *any `json:"value,omitempty"`

	// The value of the preference key before executing the module. Either a single
	// string value or a list of strings for array types.
	// This is a string or a list of strings.
	PreviousValue *any `json:"previous_value,omitempty"`

	// A list with the resulting `xfconf-query` command executed by the module.
	Cmd *[]string `json:"cmd,omitempty"`

	// The version of the `xfconf-query` command.
	Version *string `json:"version,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `XfconfReturn`
func XfconfReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (XfconfReturn, error) {
	return rpc.AnyToJSONT[XfconfReturn](r.Result.Result)
}
