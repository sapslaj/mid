# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    "Connection",
    "ConnectionDict",
    "ConnectionArgs",
    "ConnectionArgsDict",
    "ExecCommandArgs",
    "ExecCommandArgsDict",
    "ResourceConfig",
    "ResourceConfigDict",
    "ResourceConfigArgs",
    "ResourceConfigArgsDict",
    "TriggersInputArgs",
    "TriggersInputArgsDict",
]

MYPY = False

if not MYPY:

    class ConnectionDict(TypedDict):
        """
        Instructions for how to connect to a remote endpoint.
        """

        host: NotRequired[_builtins.str]
        """
        The address of the resource to connect to.
        """
        host_key: NotRequired[_builtins.str]
        password: NotRequired[_builtins.str]
        """
        The password we should use for the connection.
        """
        per_dial_timeout: NotRequired[_builtins.int]
        port: NotRequired[_builtins.float]
        """
        The port to connect to. Defaults to 22.
        """
        private_key: NotRequired[_builtins.str]
        """
        The contents of an SSH key to use for the
        connection. This takes preference over the password if provided.
        """
        private_key_password: NotRequired[_builtins.str]
        ssh_agent: NotRequired[_builtins.bool]
        ssh_agent_socket_path: NotRequired[_builtins.str]
        user: NotRequired[_builtins.str]
        """
        The user that we should use for the connection.
        """
elif False:
    ConnectionDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class Connection:
    def __init__(
        __self__,
        *,
        host: Optional[_builtins.str] = None,
        host_key: Optional[_builtins.str] = None,
        password: Optional[_builtins.str] = None,
        per_dial_timeout: Optional[_builtins.int] = None,
        port: Optional[_builtins.float] = None,
        private_key: Optional[_builtins.str] = None,
        private_key_password: Optional[_builtins.str] = None,
        ssh_agent: Optional[_builtins.bool] = None,
        ssh_agent_socket_path: Optional[_builtins.str] = None,
        user: Optional[_builtins.str] = None,
    ):
        """
        Instructions for how to connect to a remote endpoint.
        :param _builtins.str host: The address of the resource to connect to.
        :param _builtins.str password: The password we should use for the connection.
        :param _builtins.float port: The port to connect to. Defaults to 22.
        :param _builtins.str private_key: The contents of an SSH key to use for the
               connection. This takes preference over the password if provided.
        :param _builtins.str user: The user that we should use for the connection.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if host_key is not None:
            pulumi.set(__self__, "host_key", host_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if per_dial_timeout is not None:
            pulumi.set(__self__, "per_dial_timeout", per_dial_timeout)
        if port is None:
            port = 22
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)
        if ssh_agent is not None:
            pulumi.set(__self__, "ssh_agent", ssh_agent)
        if ssh_agent_socket_path is not None:
            pulumi.set(__self__, "ssh_agent_socket_path", ssh_agent_socket_path)
        if user is None:
            user = "root"
        if user is not None:
            pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The address of the resource to connect to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="hostKey")
    def host_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_key")

    @host_key.setter
    def host_key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "host_key", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        The password we should use for the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="perDialTimeout")
    def per_dial_timeout(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "per_dial_timeout")

    @per_dial_timeout.setter
    def per_dial_timeout(self, value: Optional[_builtins.int]):
        pulumi.set(self, "per_dial_timeout", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.float]:
        """
        The port to connect to. Defaults to 22.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[_builtins.float]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[_builtins.str]:
        """
        The contents of an SSH key to use for the
        connection. This takes preference over the password if provided.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[_builtins.str]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[_builtins.str]):
        pulumi.set(self, "private_key_password", value)

    @_builtins.property
    @pulumi.getter(name="sshAgent")
    def ssh_agent(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ssh_agent")

    @ssh_agent.setter
    def ssh_agent(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "ssh_agent", value)

    @_builtins.property
    @pulumi.getter(name="sshAgentSocketPath")
    def ssh_agent_socket_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ssh_agent_socket_path")

    @ssh_agent_socket_path.setter
    def ssh_agent_socket_path(self, value: Optional[_builtins.str]):
        pulumi.set(self, "ssh_agent_socket_path", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        """
        The user that we should use for the connection.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[_builtins.str]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ConnectionArgsDict(TypedDict):
        """
        Instructions for how to connect to a remote endpoint.
        """

        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        The address of the resource to connect to.
        """
        host_key: NotRequired[pulumi.Input[_builtins.str]]
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        The password we should use for the connection.
        """
        per_dial_timeout: NotRequired[pulumi.Input[_builtins.int]]
        port: NotRequired[pulumi.Input[_builtins.float]]
        """
        The port to connect to. Defaults to 22.
        """
        private_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        The contents of an SSH key to use for the
        connection. This takes preference over the password if provided.
        """
        private_key_password: NotRequired[pulumi.Input[_builtins.str]]
        ssh_agent: NotRequired[pulumi.Input[_builtins.bool]]
        ssh_agent_socket_path: NotRequired[pulumi.Input[_builtins.str]]
        user: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user that we should use for the connection.
        """
elif False:
    ConnectionArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ConnectionArgs:
    def __init__(
        __self__,
        *,
        host: Optional[pulumi.Input[_builtins.str]] = None,
        host_key: Optional[pulumi.Input[_builtins.str]] = None,
        password: Optional[pulumi.Input[_builtins.str]] = None,
        per_dial_timeout: Optional[pulumi.Input[_builtins.int]] = None,
        port: Optional[pulumi.Input[_builtins.float]] = None,
        private_key: Optional[pulumi.Input[_builtins.str]] = None,
        private_key_password: Optional[pulumi.Input[_builtins.str]] = None,
        ssh_agent: Optional[pulumi.Input[_builtins.bool]] = None,
        ssh_agent_socket_path: Optional[pulumi.Input[_builtins.str]] = None,
        user: Optional[pulumi.Input[_builtins.str]] = None,
    ):
        """
        Instructions for how to connect to a remote endpoint.
        :param pulumi.Input[_builtins.str] host: The address of the resource to connect to.
        :param pulumi.Input[_builtins.str] password: The password we should use for the connection.
        :param pulumi.Input[_builtins.float] port: The port to connect to. Defaults to 22.
        :param pulumi.Input[_builtins.str] private_key: The contents of an SSH key to use for the
               connection. This takes preference over the password if provided.
        :param pulumi.Input[_builtins.str] user: The user that we should use for the connection.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if host_key is not None:
            pulumi.set(__self__, "host_key", host_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if per_dial_timeout is not None:
            pulumi.set(__self__, "per_dial_timeout", per_dial_timeout)
        if port is None:
            port = 22
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)
        if ssh_agent is not None:
            pulumi.set(__self__, "ssh_agent", ssh_agent)
        if ssh_agent_socket_path is not None:
            pulumi.set(__self__, "ssh_agent_socket_path", ssh_agent_socket_path)
        if user is None:
            user = "root"
        if user is not None:
            pulumi.set(__self__, "user", user)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The address of the resource to connect to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="hostKey")
    def host_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_key")

    @host_key.setter
    def host_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_key", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password we should use for the connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="perDialTimeout")
    def per_dial_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "per_dial_timeout")

    @per_dial_timeout.setter
    def per_dial_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "per_dial_timeout", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port to connect to. Defaults to 22.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The contents of an SSH key to use for the
        connection. This takes preference over the password if provided.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key_password", value)

    @_builtins.property
    @pulumi.getter(name="sshAgent")
    def ssh_agent(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ssh_agent")

    @ssh_agent.setter
    def ssh_agent(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssh_agent", value)

    @_builtins.property
    @pulumi.getter(name="sshAgentSocketPath")
    def ssh_agent_socket_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssh_agent_socket_path")

    @ssh_agent_socket_path.setter
    def ssh_agent_socket_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_agent_socket_path", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user that we should use for the connection.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user", value)


if not MYPY:

    class ExecCommandArgsDict(TypedDict):
        command: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        """
        dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        Directory path to chdir to before executing the command. Defaults to the
        default working directory for the SSH user and session, usually the user's
        home.
        """
        environment: NotRequired[
            pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
        ]
        """
        Key-value pairs of environment variables to pass to the process. These are
        merged with any system-wide environment variables.
        """
        stdin: NotRequired[pulumi.Input[_builtins.str]]
        """
        Pass a string to the command's process as standard in.
        """
elif False:
    ExecCommandArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ExecCommandArgs:
    def __init__(
        __self__,
        *,
        command: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
        dir: Optional[pulumi.Input[_builtins.str]] = None,
        environment: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
        ] = None,
        stdin: Optional[pulumi.Input[_builtins.str]] = None,
    ):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] command: List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        :param pulumi.Input[_builtins.str] dir: Directory path to chdir to before executing the command. Defaults to the
               default working directory for the SSH user and session, usually the user's
               home.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment: Key-value pairs of environment variables to pass to the process. These are
               merged with any system-wide environment variables.
        :param pulumi.Input[_builtins.str] stdin: Pass a string to the command's process as standard in.
        """
        pulumi.set(__self__, "command", command)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)

    @_builtins.property
    @pulumi.getter
    def command(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Directory path to chdir to before executing the command. Defaults to the
        default working directory for the SSH user and session, usually the user's
        home.
        """
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dir", value)

    @_builtins.property
    @pulumi.getter
    def environment(
        self,
    ) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value pairs of environment variables to pass to the process. These are
        merged with any system-wide environment variables.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
    ):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pass a string to the command's process as standard in.
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stdin", value)


if not MYPY:

    class ResourceConfigDict(TypedDict):
        check: NotRequired[_builtins.bool]
        delete_unreachable: NotRequired[_builtins.bool]
        parallel: NotRequired[_builtins.int]
elif False:
    ResourceConfigDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ResourceConfig:
    def __init__(
        __self__,
        *,
        check: Optional[_builtins.bool] = None,
        delete_unreachable: Optional[_builtins.bool] = None,
        parallel: Optional[_builtins.int] = None,
    ):
        if check is not None:
            pulumi.set(__self__, "check", check)
        if delete_unreachable is not None:
            pulumi.set(__self__, "delete_unreachable", delete_unreachable)
        if parallel is not None:
            pulumi.set(__self__, "parallel", parallel)

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "check", value)

    @_builtins.property
    @pulumi.getter(name="deleteUnreachable")
    def delete_unreachable(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "delete_unreachable")

    @delete_unreachable.setter
    def delete_unreachable(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "delete_unreachable", value)

    @_builtins.property
    @pulumi.getter
    def parallel(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "parallel")

    @parallel.setter
    def parallel(self, value: Optional[_builtins.int]):
        pulumi.set(self, "parallel", value)


if not MYPY:

    class ResourceConfigArgsDict(TypedDict):
        check: NotRequired[pulumi.Input[_builtins.bool]]
        delete_unreachable: NotRequired[pulumi.Input[_builtins.bool]]
        parallel: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    ResourceConfigArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class ResourceConfigArgs:
    def __init__(
        __self__,
        *,
        check: Optional[pulumi.Input[_builtins.bool]] = None,
        delete_unreachable: Optional[pulumi.Input[_builtins.bool]] = None,
        parallel: Optional[pulumi.Input[_builtins.int]] = None,
    ):
        if check is not None:
            pulumi.set(__self__, "check", check)
        if delete_unreachable is not None:
            pulumi.set(__self__, "delete_unreachable", delete_unreachable)
        if parallel is not None:
            pulumi.set(__self__, "parallel", parallel)

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check", value)

    @_builtins.property
    @pulumi.getter(name="deleteUnreachable")
    def delete_unreachable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_unreachable")

    @delete_unreachable.setter
    def delete_unreachable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_unreachable", value)

    @_builtins.property
    @pulumi.getter
    def parallel(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "parallel")

    @parallel.setter
    def parallel(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "parallel", value)


if not MYPY:

    class TriggersInputArgsDict(TypedDict):
        refresh: NotRequired[pulumi.Input[Sequence[Any]]]
        """
        Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
        any value in this list changes.
        """
        replace: NotRequired[pulumi.Input[Sequence[Any]]]
        """
        Completely delete and replace the resource if any value in this list
        changes.
        """
elif False:
    TriggersInputArgsDict: TypeAlias = Mapping[str, Any]


@pulumi.input_type
class TriggersInputArgs:
    def __init__(
        __self__,
        *,
        refresh: Optional[pulumi.Input[Sequence[Any]]] = None,
        replace: Optional[pulumi.Input[Sequence[Any]]] = None,
    ):
        """
        :param pulumi.Input[Sequence[Any]] refresh: Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
               any value in this list changes.
        :param pulumi.Input[Sequence[Any]] replace: Completely delete and replace the resource if any value in this list
               changes.
        """
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @_builtins.property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
        any value in this list changes.
        """
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "refresh", value)

    @_builtins.property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Completely delete and replace the resource if any value in this list
        changes.
        """
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "replace", value)
