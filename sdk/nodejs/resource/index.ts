// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AptArgs } from "./apt";
export type Apt = import("./apt").Apt;
export const Apt: typeof import("./apt").Apt = null as any;
utilities.lazyLoad(exports, ["Apt"], () => require("./apt"));

export { ExecArgs } from "./exec";
export type Exec = import("./exec").Exec;
export const Exec: typeof import("./exec").Exec = null as any;
utilities.lazyLoad(exports, ["Exec"], () => require("./exec"));

export { FileArgs } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FileLineArgs } from "./fileLine";
export type FileLine = import("./fileLine").FileLine;
export const FileLine: typeof import("./fileLine").FileLine = null as any;
utilities.lazyLoad(exports, ["FileLine"], () => require("./fileLine"));

export { GroupArgs } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { PackageArgs } from "./package";
export type Package = import("./package").Package;
export const Package: typeof import("./package").Package = null as any;
utilities.lazyLoad(exports, ["Package"], () => require("./package"));

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { SystemdServiceArgs } from "./systemdService";
export type SystemdService = import("./systemdService").SystemdService;
export const SystemdService: typeof import("./systemdService").SystemdService = null as any;
utilities.lazyLoad(exports, ["SystemdService"], () => require("./systemdService"));

export { UserArgs } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mid:resource:Apt":
                return new Apt(name, <any>undefined, { urn })
            case "mid:resource:Exec":
                return new Exec(name, <any>undefined, { urn })
            case "mid:resource:File":
                return new File(name, <any>undefined, { urn })
            case "mid:resource:FileLine":
                return new FileLine(name, <any>undefined, { urn })
            case "mid:resource:Group":
                return new Group(name, <any>undefined, { urn })
            case "mid:resource:Package":
                return new Package(name, <any>undefined, { urn })
            case "mid:resource:Service":
                return new Service(name, <any>undefined, { urn })
            case "mid:resource:SystemdService":
                return new SystemdService(name, <any>undefined, { urn })
            case "mid:resource:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mid", "resource", _module)
