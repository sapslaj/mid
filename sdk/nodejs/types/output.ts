// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

export namespace agent {
  export interface FileStatFileMode {
    int: number;
    isDir: boolean;
    isRegular: boolean;
    octal: string;
    string: string;
  }
}

export namespace resource {
  export interface FileStateStat {
    atime: number;
    attributes: string[];
    charset: string;
    checksum: string;
    ctime: number;
    dev: number;
    executable: boolean;
    exists: boolean;
    gid: number;
    gr_name: string;
    inode: number;
    isblk: boolean;
    ischr: boolean;
    isdir: boolean;
    isfifo: boolean;
    isgid: boolean;
    islnk: boolean;
    isreg: boolean;
    issock: boolean;
    isuid: boolean;
    lnkSource: string;
    lnkTarget: string;
    mimetype: string;
    mode: string;
    mtime: number;
    nlink: number;
    path: string;
    pwName: string;
    readable: boolean;
    rgrp: boolean;
    roth: boolean;
    rusr: boolean;
    size: number;
    uid: number;
    version: string;
    wgrp: boolean;
    woth: boolean;
    writeable: boolean;
    wusr: boolean;
    xgrp: boolean;
    xoth: boolean;
    xusr: boolean;
  }
}

export namespace types {
  /**
   * Instructions for how to connect to a remote endpoint.
   */
  export interface Connection {
    /**
     * The address of the resource to connect to.
     */
    host: string;
    /**
     * The password we should use for the connection.
     */
    password?: string;
    /**
     * The port to connect to. Defaults to 22.
     */
    port?: number;
    /**
     * The contents of an SSH key to use for the
     * connection. This takes preference over the password if provided.
     */
    privateKey?: string;
    /**
     * The user that we should use for the connection.
     */
    user?: string;
  }
  /**
   * connectionProvideDefaults sets the appropriate defaults for Connection
   */
  export function connectionProvideDefaults(val: Connection): Connection {
    return {
      ...val,
      port: (val.port) ?? 22,
      user: (val.user) ?? "root",
    };
  }

  export interface ExecCommand {
    /**
     * List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
     */
    command: string[];
    /**
     * Directory path to chdir to before executing the command. Defaults to the
     * default working directory for the SSH user and session, usually the user's
     * home.
     */
    dir?: string;
    /**
     * Key-value pairs of environment variables to pass to the process. These are
     * merged with any system-wide environment variables.
     */
    environment?: { [key: string]: string };
    /**
     * Pass a string to the command's process as standard in.
     */
    stdin?: string;
  }

  export interface TriggersOutput {
    /**
     * RFC 3339 timestamp of when this resource last changed. Use this property
     * to chain into other resources' `refresh` and `replace` triggers.
     */
    lastChanged: string;
    /**
     * Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
     * any value in this list changes.
     */
    refresh?: any[];
    /**
     * Completely delete and replace the resource if any value in this list
     * changes.
     */
    replace?: any[];
  }
}
