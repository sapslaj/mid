// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manage Node.js packages with the Yarn package manager `https://yarnpkg.com/`.
// Note that at the moment, this module `only works with Yarn Classic`.
const YarnName = "yarn"

// Installation state of the named Node.js library.
// If `absent` is selected, a `name` option must be provided.
type YarnState string

const (
	YarnStatePresent YarnState = "present"
	YarnStateAbsent  YarnState = "absent"
	YarnStateLatest  YarnState = "latest"
)

func OptionalYarnState[T interface {
	*YarnState | YarnState | *string | string
}](s T) *YarnState {
	switch v := any(s).(type) {
	case *YarnState:
		return v
	case YarnState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := YarnState(*v)
		return &val
	case string:
		val := YarnState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `yarn` Ansible module.
type YarnParameters struct {
	// The name of a Node.js library to install.
	// If omitted all packages in package.json are installed.
	// To globally install from local Node.js library. Prepend `file:` to the path
	// of the Node.js library.
	Name *string `json:"name,omitempty"`

	// The base path where Node.js installs libraries.
	// This is where the `node_modules` folder lives.
	Path *string `json:"path,omitempty"`

	// The version of the library to be installed.
	// Must be in semver format. If "latest" is desired, use `state` arg instead.
	Version *string `json:"version,omitempty"`

	// Install the Node.js library globally.
	// default: false
	Global *bool `json:"global,omitempty"`

	// The executable location for yarn.
	Executable *string `json:"executable,omitempty"`

	// Use the `--ignore-scripts` flag when installing.
	// default: false
	IgnoreScripts *bool `json:"ignore_scripts,omitempty"`

	// Install dependencies in production mode.
	// `yarn` ignores any dependencies under devDependencies in `package.json`.
	// default: false
	Production *bool `json:"production,omitempty"`

	// The registry to install modules from.
	Registry *string `json:"registry,omitempty"`

	// Installation state of the named Node.js library.
	// If `absent` is selected, a `name` option must be provided.
	// default: YarnStatePresent
	State *YarnState `json:"state,omitempty"`
}

// Wrap the `YarnParameters into an `rpc.RPCCall`.
func (p *YarnParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: YarnName,
			Args: args,
		},
	}, nil
}

// Return values for the `yarn` Ansible module.
type YarnReturn struct {
	AnsibleCommonReturns

	// Output generated from Yarn.
	Out *string `json:"out,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `YarnReturn`
func YarnReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (YarnReturn, error) {
	return rpc.AnyToJSONT[YarnReturn](r.Result.Result)
}
