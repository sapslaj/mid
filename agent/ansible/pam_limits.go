// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// The `community.general.pam_limits` module modifies PAM limits.
// The default file is `/etc/security/limits.conf`.
// For the full documentation, see `man 5 limits.conf`.
const PamLimitsName = "pam_limits"

// Limit type, see `man 5 limits.conf` for an explanation.
type PamLimitsLimitType string

const (
	PamLimitsLimitTypeHard PamLimitsLimitType = "hard"
	PamLimitsLimitTypeSoft PamLimitsLimitType = "soft"
	PamLimitsLimitTypeBoth PamLimitsLimitType = "-"
)

// The limit to be set.
type PamLimitsLimitItem string

const (
	PamLimitsLimitItemCore         PamLimitsLimitItem = "core"
	PamLimitsLimitItemData         PamLimitsLimitItem = "data"
	PamLimitsLimitItemFsize        PamLimitsLimitItem = "fsize"
	PamLimitsLimitItemMemlock      PamLimitsLimitItem = "memlock"
	PamLimitsLimitItemNofile       PamLimitsLimitItem = "nofile"
	PamLimitsLimitItemRss          PamLimitsLimitItem = "rss"
	PamLimitsLimitItemStack        PamLimitsLimitItem = "stack"
	PamLimitsLimitItemCpu          PamLimitsLimitItem = "cpu"
	PamLimitsLimitItemNproc        PamLimitsLimitItem = "nproc"
	PamLimitsLimitItemAs           PamLimitsLimitItem = "as"
	PamLimitsLimitItemMaxlogins    PamLimitsLimitItem = "maxlogins"
	PamLimitsLimitItemMaxsyslogins PamLimitsLimitItem = "maxsyslogins"
	PamLimitsLimitItemPriority     PamLimitsLimitItem = "priority"
	PamLimitsLimitItemLocks        PamLimitsLimitItem = "locks"
	PamLimitsLimitItemSigpending   PamLimitsLimitItem = "sigpending"
	PamLimitsLimitItemMsgqueue     PamLimitsLimitItem = "msgqueue"
	PamLimitsLimitItemNice         PamLimitsLimitItem = "nice"
	PamLimitsLimitItemRtprio       PamLimitsLimitItem = "rtprio"
	PamLimitsLimitItemChroot       PamLimitsLimitItem = "chroot"
)

// Parameters for the `pam_limits` Ansible module.
type PamLimitsParameters struct {
	// A username, @groupname, wildcard, UID/GID range.
	Domain string `json:"domain"`

	// Limit type, see `man 5 limits.conf` for an explanation.
	LimitType PamLimitsLimitType `json:"limit_type"`

	// The limit to be set.
	LimitItem PamLimitsLimitItem `json:"limit_item"`

	// The value of the limit.
	// Value must either be `unlimited`, `infinity` or `-1`, all of which indicate
	// no limit, or a limit of 0 or larger.
	// Value must be a number in the range -20 to 19 inclusive, if `limit_item` is
	// set to `nice` or `priority`.
	// Refer to the `man 5 limits.conf` manual pages for more details.
	Value string `json:"value"`

	// Create a backup file including the timestamp information so you can get the
	// original file back if you somehow clobbered it incorrectly.
	// default: false
	Backup *bool `json:"backup,omitempty"`

	// If set to `true`, the minimal value will be used or conserved.
	// If the specified value is inferior to the value in the file, file content is
	// replaced with the new value, else content is not modified.
	// default: false
	UseMin *bool `json:"use_min,omitempty"`

	// If set to `true`, the maximal value will be used or conserved.
	// If the specified value is superior to the value in the file, file content is
	// replaced with the new value, else content is not modified.
	// default: false
	UseMax *bool `json:"use_max,omitempty"`

	// Modify the limits.conf path.
	// default: "/etc/security/limits.conf"
	Dest *string `json:"dest,omitempty"`

	// Comment associated with the limit.
	// default: ""
	Comment *string `json:"comment,omitempty"`
}

// Wrap the `PamLimitsParameters into an `rpc.RPCCall`.
func (p PamLimitsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PamLimitsName,
			Args: args,
		},
	}, nil
}

// Return values for the `pam_limits` Ansible module.
type PamLimitsReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `PamLimitsReturn`
func PamLimitsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PamLimitsReturn, error) {
	return cast.AnyToJSONT[PamLimitsReturn](r.Result.Result)
}
