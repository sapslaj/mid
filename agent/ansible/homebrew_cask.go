// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages Homebrew casks.
const HomebrewCaskName = "homebrew_cask"

// State of the cask.
type HomebrewCaskState string

const (
	HomebrewCaskStateAbsent      HomebrewCaskState = "absent"
	HomebrewCaskStateInstalled   HomebrewCaskState = "installed"
	HomebrewCaskStateLatest      HomebrewCaskState = "latest"
	HomebrewCaskStatePresent     HomebrewCaskState = "present"
	HomebrewCaskStateRemoved     HomebrewCaskState = "removed"
	HomebrewCaskStateUninstalled HomebrewCaskState = "uninstalled"
	HomebrewCaskStateUpgraded    HomebrewCaskState = "upgraded"
)

func OptionalHomebrewCaskState[T interface {
	*HomebrewCaskState | HomebrewCaskState | *string | string
}](s T) *HomebrewCaskState {
	switch v := any(s).(type) {
	case *HomebrewCaskState:
		return v
	case HomebrewCaskState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := HomebrewCaskState(*v)
		return &val
	case string:
		val := HomebrewCaskState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `homebrew_cask` Ansible module.
type HomebrewCaskParameters struct {
	// Name of cask to install or remove.
	Name *[]string `json:"name,omitempty"`

	// ':' separated list of paths to search for 'brew' executable.
	// default: "/usr/local/bin:/opt/homebrew/bin"
	Path *string `json:"path,omitempty"`

	// State of the cask.
	// default: HomebrewCaskStatePresent
	State *HomebrewCaskState `json:"state,omitempty"`

	// The sudo password to be passed to `SUDO_ASKPASS`.
	SudoPassword *string `json:"sudo_password,omitempty"`

	// Update homebrew itself first.
	// Note that `brew cask update` is a synonym for `brew update`.
	// default: false
	UpdateHomebrew *bool `json:"update_homebrew,omitempty"`

	// Options flags to install a package.
	InstallOptions *[]string `json:"install_options,omitempty"`

	// Allow external apps.
	// default: false
	AcceptExternalApps *bool `json:"accept_external_apps,omitempty"`

	// Upgrade all casks.
	// Mutually exclusive with `upgraded` state.
	// default: false
	UpgradeAll *bool `json:"upgrade_all,omitempty"`

	// Upgrade casks that auto update.
	// Passes `--greedy` to `brew outdated --cask` when checking if an installed
	// cask has a newer version available, or to `brew upgrade --cask` when
	// upgrading all casks.
	// default: false
	Greedy *bool `json:"greedy,omitempty"`
}

// Wrap the `HomebrewCaskParameters into an `rpc.RPCCall`.
func (p *HomebrewCaskParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: HomebrewCaskName,
			Args: args,
		},
	}, nil
}

// Return values for the `homebrew_cask` Ansible module.
type HomebrewCaskReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `HomebrewCaskReturn`
func HomebrewCaskReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (HomebrewCaskReturn, error) {
	return rpc.AnyToJSONT[HomebrewCaskReturn](r.Result.Result)
}
