# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import types as _types

__all__ = ['FileArgs', 'File']

@pulumi.input_type
class FileArgs:
    def __init__(__self__, *,
                 access_time: Optional[pulumi.Input[str]] = None,
                 access_time_format: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 backup: Optional[pulumi.Input[bool]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 directory_mode: Optional[pulumi.Input[str]] = None,
                 ensure: Optional[pulumi.Input[str]] = None,
                 follow: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 local_follow: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modification_time: Optional[pulumi.Input[str]] = None,
                 modification_time_format: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse: Optional[pulumi.Input[bool]] = None,
                 remote_source: Optional[pulumi.Input[str]] = None,
                 selevel: Optional[pulumi.Input[str]] = None,
                 serole: Optional[pulumi.Input[str]] = None,
                 setype: Optional[pulumi.Input[str]] = None,
                 seuser: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]] = None,
                 triggers: Optional[pulumi.Input['_types.TriggersInputArgs']] = None,
                 unsafe_writes: Optional[pulumi.Input[bool]] = None,
                 validate: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a File resource.
        """
        if access_time is not None:
            pulumi.set(__self__, "access_time", access_time)
        if access_time_format is not None:
            pulumi.set(__self__, "access_time_format", access_time_format)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if directory_mode is not None:
            pulumi.set(__self__, "directory_mode", directory_mode)
        if ensure is not None:
            pulumi.set(__self__, "ensure", ensure)
        if follow is not None:
            pulumi.set(__self__, "follow", follow)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if local_follow is not None:
            pulumi.set(__self__, "local_follow", local_follow)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if modification_time is not None:
            pulumi.set(__self__, "modification_time", modification_time)
        if modification_time_format is not None:
            pulumi.set(__self__, "modification_time_format", modification_time_format)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)
        if remote_source is not None:
            pulumi.set(__self__, "remote_source", remote_source)
        if selevel is not None:
            pulumi.set(__self__, "selevel", selevel)
        if serole is not None:
            pulumi.set(__self__, "serole", serole)
        if setype is not None:
            pulumi.set(__self__, "setype", setype)
        if seuser is not None:
            pulumi.set(__self__, "seuser", seuser)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if unsafe_writes is not None:
            pulumi.set(__self__, "unsafe_writes", unsafe_writes)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @property
    @pulumi.getter(name="accessTime")
    def access_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_time")

    @access_time.setter
    def access_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_time", value)

    @property
    @pulumi.getter(name="accessTimeFormat")
    def access_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_time_format")

    @access_time_format.setter
    def access_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_time_format", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="directoryMode")
    def directory_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory_mode")

    @directory_mode.setter
    def directory_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_mode", value)

    @property
    @pulumi.getter
    def ensure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ensure")

    @ensure.setter
    def ensure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ensure", value)

    @property
    @pulumi.getter
    def follow(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow")

    @follow.setter
    def follow(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="localFollow")
    def local_follow(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "local_follow")

    @local_follow.setter
    def local_follow(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_follow", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modificationTime")
    def modification_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modification_time")

    @modification_time.setter
    def modification_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modification_time", value)

    @property
    @pulumi.getter(name="modificationTimeFormat")
    def modification_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modification_time_format")

    @modification_time_format.setter
    def modification_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modification_time_format", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)

    @property
    @pulumi.getter(name="remoteSource")
    def remote_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_source")

    @remote_source.setter
    def remote_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_source", value)

    @property
    @pulumi.getter
    def selevel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selevel")

    @selevel.setter
    def selevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selevel", value)

    @property
    @pulumi.getter
    def serole(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serole")

    @serole.setter
    def serole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serole", value)

    @property
    @pulumi.getter
    def setype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setype")

    @setype.setter
    def setype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setype", value)

    @property
    @pulumi.getter
    def seuser(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "seuser")

    @seuser.setter
    def seuser(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seuser", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input['_types.TriggersInputArgs']]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input['_types.TriggersInputArgs']]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter(name="unsafeWrites")
    def unsafe_writes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unsafe_writes")

    @unsafe_writes.setter
    def unsafe_writes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unsafe_writes", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validate", value)


class File(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_time: Optional[pulumi.Input[str]] = None,
                 access_time_format: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 backup: Optional[pulumi.Input[bool]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 directory_mode: Optional[pulumi.Input[str]] = None,
                 ensure: Optional[pulumi.Input[str]] = None,
                 follow: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 local_follow: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modification_time: Optional[pulumi.Input[str]] = None,
                 modification_time_format: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse: Optional[pulumi.Input[bool]] = None,
                 remote_source: Optional[pulumi.Input[str]] = None,
                 selevel: Optional[pulumi.Input[str]] = None,
                 serole: Optional[pulumi.Input[str]] = None,
                 setype: Optional[pulumi.Input[str]] = None,
                 seuser: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]] = None,
                 triggers: Optional[pulumi.Input[pulumi.InputType['_types.TriggersInputArgs']]] = None,
                 unsafe_writes: Optional[pulumi.Input[bool]] = None,
                 validate: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a File resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a File resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_time: Optional[pulumi.Input[str]] = None,
                 access_time_format: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 backup: Optional[pulumi.Input[bool]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 directory_mode: Optional[pulumi.Input[str]] = None,
                 ensure: Optional[pulumi.Input[str]] = None,
                 follow: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 local_follow: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 modification_time: Optional[pulumi.Input[str]] = None,
                 modification_time_format: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse: Optional[pulumi.Input[bool]] = None,
                 remote_source: Optional[pulumi.Input[str]] = None,
                 selevel: Optional[pulumi.Input[str]] = None,
                 serole: Optional[pulumi.Input[str]] = None,
                 setype: Optional[pulumi.Input[str]] = None,
                 seuser: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]] = None,
                 triggers: Optional[pulumi.Input[pulumi.InputType['_types.TriggersInputArgs']]] = None,
                 unsafe_writes: Optional[pulumi.Input[bool]] = None,
                 validate: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FileArgs.__new__(FileArgs)

            __props__.__dict__["access_time"] = access_time
            __props__.__dict__["access_time_format"] = access_time_format
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["backup"] = backup
            __props__.__dict__["checksum"] = checksum
            __props__.__dict__["content"] = content
            __props__.__dict__["directory_mode"] = directory_mode
            __props__.__dict__["ensure"] = ensure
            __props__.__dict__["follow"] = follow
            __props__.__dict__["force"] = force
            __props__.__dict__["group"] = group
            __props__.__dict__["local_follow"] = local_follow
            __props__.__dict__["mode"] = mode
            __props__.__dict__["modification_time"] = modification_time
            __props__.__dict__["modification_time_format"] = modification_time_format
            __props__.__dict__["owner"] = owner
            __props__.__dict__["path"] = path
            __props__.__dict__["recurse"] = recurse
            __props__.__dict__["remote_source"] = remote_source
            __props__.__dict__["selevel"] = selevel
            __props__.__dict__["serole"] = serole
            __props__.__dict__["setype"] = setype
            __props__.__dict__["seuser"] = seuser
            __props__.__dict__["source"] = source
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["unsafe_writes"] = unsafe_writes
            __props__.__dict__["validate"] = validate
            __props__.__dict__["backup_file"] = None
            __props__.__dict__["stat"] = None
        super(File, __self__).__init__(
            'mid:resource:File',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'File':
        """
        Get an existing File resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FileArgs.__new__(FileArgs)

        __props__.__dict__["access_time"] = None
        __props__.__dict__["access_time_format"] = None
        __props__.__dict__["attributes"] = None
        __props__.__dict__["backup"] = None
        __props__.__dict__["backup_file"] = None
        __props__.__dict__["checksum"] = None
        __props__.__dict__["content"] = None
        __props__.__dict__["directory_mode"] = None
        __props__.__dict__["ensure"] = None
        __props__.__dict__["follow"] = None
        __props__.__dict__["force"] = None
        __props__.__dict__["group"] = None
        __props__.__dict__["local_follow"] = None
        __props__.__dict__["mode"] = None
        __props__.__dict__["modification_time"] = None
        __props__.__dict__["modification_time_format"] = None
        __props__.__dict__["owner"] = None
        __props__.__dict__["path"] = None
        __props__.__dict__["recurse"] = None
        __props__.__dict__["remote_source"] = None
        __props__.__dict__["selevel"] = None
        __props__.__dict__["serole"] = None
        __props__.__dict__["setype"] = None
        __props__.__dict__["seuser"] = None
        __props__.__dict__["source"] = None
        __props__.__dict__["stat"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["unsafe_writes"] = None
        __props__.__dict__["validate"] = None
        return File(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessTime")
    def access_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_time")

    @property
    @pulumi.getter(name="accessTimeFormat")
    def access_time_format(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_time_format")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def backup(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="backupFile")
    def backup_file(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "backup_file")

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="directoryMode")
    def directory_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "directory_mode")

    @property
    @pulumi.getter
    def ensure(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ensure")

    @property
    @pulumi.getter
    def follow(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "follow")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="localFollow")
    def local_follow(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "local_follow")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="modificationTime")
    def modification_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "modification_time")

    @property
    @pulumi.getter(name="modificationTimeFormat")
    def modification_time_format(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "modification_time_format")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def recurse(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "recurse")

    @property
    @pulumi.getter(name="remoteSource")
    def remote_source(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "remote_source")

    @property
    @pulumi.getter
    def selevel(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "selevel")

    @property
    @pulumi.getter
    def serole(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "serole")

    @property
    @pulumi.getter
    def setype(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "setype")

    @property
    @pulumi.getter
    def seuser(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "seuser")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[Optional[Union[pulumi.Asset, pulumi.Archive]]]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Output['outputs.FileStateStat']:
        return pulumi.get(self, "stat")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output['_types.outputs.TriggersOutput']:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="unsafeWrites")
    def unsafe_writes(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "unsafe_writes")

    @property
    @pulumi.getter
    def validate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "validate")

