// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module installs, updates and removes packages from the OpenCSW project
// for Solaris.
// Unlike the `community.general.svr4pkg` module, it will resolve and download
// dependencies.
// See `https://www.opencsw.org/` for more information about the project.
const PkgutilName = "pkgutil"

// Whether to install (`present`/`installed`), or remove (`absent`/`removed`)
// packages.
// The upgrade (`latest`) operation will update/install the packages to the
// latest version available.
type PkgutilState string

const (
	PkgutilStateAbsent    PkgutilState = "absent"
	PkgutilStateInstalled PkgutilState = "installed"
	PkgutilStateLatest    PkgutilState = "latest"
	PkgutilStatePresent   PkgutilState = "present"
	PkgutilStateRemoved   PkgutilState = "removed"
)

// Parameters for the `pkgutil` Ansible module.
type PkgutilParameters struct {
	// The name of the package.
	// When using `state=latest`, this can be `'*'`, which updates all installed
	// packages managed by pkgutil.
	Name []string `json:"name"`

	// The repository path to install the package from.
	// Its global definition is in `/etc/opt/csw/pkgutil.conf`.
	Site *string `json:"site,omitempty"`

	// Whether to install (`present`/`installed`), or remove (`absent`/`removed`)
	// packages.
	// The upgrade (`latest`) operation will update/install the packages to the
	// latest version available.
	State PkgutilState `json:"state"`

	// If you always want to refresh your catalog from the mirror, even when it is
	// not stale, set this to `true`.
	// default: false
	UpdateCatalog *bool `json:"update_catalog,omitempty"`

	// To allow the update process to downgrade packages to match what is present
	// in the repository, set this to `true`.
	// This is useful for rolling back to stable from testing, or similar
	// operations.
	// default: false
	Force *bool `json:"force,omitempty"`
}

// Wrap the `PkgutilParameters into an `rpc.RPCCall`.
func (p PkgutilParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PkgutilName,
			Args: args,
		},
	}, nil
}

// Return values for the `pkgutil` Ansible module.
type PkgutilReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `PkgutilReturn`
func PkgutilReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PkgutilReturn, error) {
	return cast.AnyToJSONT[PkgutilReturn](r.Result.Result)
}
