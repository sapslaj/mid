// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module configures the timezone setting, both of the system clock and of
// the hardware clock. If you want to set up the NTP, use
// `ansible.builtin.service` module.
// It is recommended to restart `crond` after changing the timezone, otherwise
// the jobs may run at the wrong time.
// Several different tools are used depending on the OS/Distribution involved.
// For Linux it can use `timedatectl` or edit `/etc/sysconfig/clock` or
// `/etc/timezone` and `hwclock`. On SmartOS, `sm-set-timezone`, for macOS,
// `systemsetup`, for BSD, `/etc/localtime` is modified. On AIX, `chtz` is used.
// Make sure that the zoneinfo files are installed with the appropriate OS
// package, like `tzdata` (usually always installed, when not using a minimal
// installation like Alpine Linux).
// Windows and HPUX are not supported, please let us know if you find any other
// OS/distro in which this fails.
const TimezoneName = "timezone"

// Whether the hardware clock is in UTC or in local timezone.
// Default is to keep current setting.
// Note that this option is recommended not to change and may fail to configure,
// especially on virtual environments such as AWS.
// `At least one` of `name` and `hwclock` are required.
// `Only used on Linux`.
type TimezoneHwclock string

const (
	TimezoneHwclockLocal TimezoneHwclock = "local"
	TimezoneHwclockUtc   TimezoneHwclock = "UTC"
)

// Convert a supported type to an optional (pointer) TimezoneHwclock
func OptionalTimezoneHwclock[T interface {
	*TimezoneHwclock | TimezoneHwclock | *string | string
}](s T) *TimezoneHwclock {
	switch v := any(s).(type) {
	case *TimezoneHwclock:
		return v
	case TimezoneHwclock:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := TimezoneHwclock(*v)
		return &val
	case string:
		val := TimezoneHwclock(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `timezone` Ansible module.
type TimezoneParameters struct {
	// Name of the timezone for the system clock.
	// Default is to keep current setting.
	// `At least one` of `name` and `hwclock` are required.
	Name *string `json:"name,omitempty"`

	// Whether the hardware clock is in UTC or in local timezone.
	// Default is to keep current setting.
	// Note that this option is recommended not to change and may fail to
	// configure, especially on virtual environments such as AWS.
	// `At least one` of `name` and `hwclock` are required.
	// `Only used on Linux`.
	Hwclock *TimezoneHwclock `json:"hwclock,omitempty"`
}

// Wrap the `TimezoneParameters into an `rpc.RPCCall`.
func (p TimezoneParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: TimezoneName,
			Args: args,
		},
	}, nil
}

// Return values for the `timezone` Ansible module.
type TimezoneReturn struct {
	AnsibleCommonReturns

	// The differences about the given arguments.
	Diff *any `json:"diff,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `TimezoneReturn`
func TimezoneReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (TimezoneReturn, error) {
	return rpc.AnyToJSONT[TimezoneReturn](r.Result.Result)
}
