// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const SysvinitName = "sysvinit"

type SysvinitParameters struct {
	Name      string    `json:"name"`
	State     *string   `json:"state,omitempty"`
	Enabled   *bool     `json:"enabled,omitempty"`
	Sleep     *int      `json:"sleep,omitempty"`
	Pattern   *string   `json:"pattern,omitempty"`
	Runlevels *[]string `json:"runlevels,omitempty"`
	Arguments *string   `json:"arguments,omitempty"`
	Daemonize *bool     `json:"daemonize,omitempty"`
}

func (p *SysvinitParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SysvinitName,
			Args: args,
		},
	}, nil
}

type SysvinitReturn struct {
	AnsibleCommonReturns
	Results *any `json:"results,omitempty"`
}

func SysvinitReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SysvinitReturn, error) {
	return rpc.AnyToJSONT[SysvinitReturn](r.Result.Result)
}
