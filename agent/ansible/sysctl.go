// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module manipulates sysctl entries and optionally performs a
// `/sbin/sysctl -p` after changing them.
const SysctlName = "sysctl"

// Whether the entry should be present or absent in the sysctl file.
type SysctlState string

const (
	SysctlStatePresent SysctlState = "present"
	SysctlStateAbsent  SysctlState = "absent"
)

// Convert a supported type to an optional (pointer) SysctlState
func OptionalSysctlState[T interface {
	*SysctlState | SysctlState | *string | string
}](s T) *SysctlState {
	switch v := any(s).(type) {
	case *SysctlState:
		return v
	case SysctlState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SysctlState(*v)
		return &val
	case string:
		val := SysctlState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `sysctl` Ansible module.
type SysctlParameters struct {
	// The dot-separated path (also known as `key`) specifying the sysctl variable.
	Name string `json:"name"`

	// Desired value of the sysctl key.
	Value *string `json:"value,omitempty"`

	// Whether the entry should be present or absent in the sysctl file.
	// default: SysctlStatePresent
	State *SysctlState `json:"state,omitempty"`

	// Use this option to ignore errors about unknown keys.
	// default: false
	Ignoreerrors *bool `json:"ignoreerrors,omitempty"`

	// If `true`, performs a `/sbin/sysctl -p` if the `sysctl_file` is updated. If
	// `false`, does not reload `sysctl` even if the `sysctl_file` is updated.
	// default: true
	Reload *bool `json:"reload,omitempty"`

	// Specifies the absolute path to `sysctl.conf`, if not `/etc/sysctl.conf`.
	// default: "/etc/sysctl.conf"
	SysctlFile *string `json:"sysctl_file,omitempty"`

	// Verify token value with the sysctl command and set with `-w` if necessary.
	// default: false
	SysctlSet *bool `json:"sysctl_set,omitempty"`
}

// Wrap the `SysctlParameters into an `rpc.RPCCall`.
func (p SysctlParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SysctlName,
			Args: args,
		},
	}, nil
}

// Return values for the `sysctl` Ansible module.
type SysctlReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SysctlReturn`
func SysctlReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SysctlReturn, error) {
	return cast.AnyToJSONT[SysctlReturn](r.Result.Result)
}
