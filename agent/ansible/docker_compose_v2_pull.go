// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Uses Docker Compose to pull images for a project.
const DockerComposeV2PullName = "docker_compose_v2_pull"

// Whether to pull images before running. This is used when `docker compose up`
// is ran.
// `always` ensures that the images are always pulled, even when already present
// on the Docker daemon.
// `missing` only pulls them when they are not present on the Docker daemon.
// This is only supported since Docker Compose 2.22.0.
type DockerComposeV2PullPolicy string

const (
	DockerComposeV2PullPolicyAlways  DockerComposeV2PullPolicy = "always"
	DockerComposeV2PullPolicyMissing DockerComposeV2PullPolicy = "missing"
)

// Convert a supported type to an optional (pointer) DockerComposeV2PullPolicy
func OptionalDockerComposeV2PullPolicy[T interface {
	*DockerComposeV2PullPolicy | DockerComposeV2PullPolicy | *string | string
}](s T) *DockerComposeV2PullPolicy {
	switch v := any(s).(type) {
	case *DockerComposeV2PullPolicy:
		return v
	case DockerComposeV2PullPolicy:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerComposeV2PullPolicy(*v)
		return &val
	case string:
		val := DockerComposeV2PullPolicy(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_compose_v2_pull` Ansible module.
type DockerComposeV2PullParameters struct {
	// Whether to pull images before running. This is used when `docker compose up`
	// is ran.
	// `always` ensures that the images are always pulled, even when already
	// present on the Docker daemon.
	// `missing` only pulls them when they are not present on the Docker daemon.
	// This is only supported since Docker Compose 2.22.0.
	// default: DockerComposeV2PullPolicyAlways
	Policy *DockerComposeV2PullPolicy `json:"policy,omitempty"`

	// If set to `true`, will not pull images that can be built.
	// default: false
	IgnoreBuildable *bool `json:"ignore_buildable,omitempty"`

	// If set to `true`, also pull services that are declared as dependencies.
	// This only makes sense if `services` is used.
	// default: false
	IncludeDeps *bool `json:"include_deps,omitempty"`

	// Specifies a subset of services to be targeted.
	Services *[]string `json:"services,omitempty"`

	// Path to a directory containing a Compose file (`compose.yml`,
	// `compose.yaml`, `docker-compose.yml`, or `docker-compose.yaml`).
	// If `files` is provided, will look for these files in this directory instead.
	// Mutually exclusive with `definition`. One of `project_src` and `definition`
	// must be provided.
	ProjectSrc *string `json:"project_src,omitempty"`

	// Provide a project name. If not provided, the project name is taken from the
	// basename of `project_src`.
	// Required when `definition` is provided.
	ProjectName *string `json:"project_name,omitempty"`

	// List of Compose file names relative to `project_src` to be used instead of
	// the main Compose file (`compose.yml`, `compose.yaml`, `docker-compose.yml`,
	// or `docker-compose.yaml`).
	// Files are loaded and merged in the order given.
	// Mutually exclusive with `definition`.
	Files *[]string `json:"files,omitempty"`

	// Compose file describing one or more services, networks and volumes.
	// Mutually exclusive with `project_src` and `files`. One of `project_src` and
	// `definition` must be provided.
	// If provided, PyYAML must be available to this module, and `project_name`
	// must be specified.
	// Note that a temporary directory will be created and deleted afterwards when
	// using this option.
	Definition *map[string]any `json:"definition,omitempty"`

	// By default environment files are loaded from a `.env` file located directly
	// under the `project_src` directory.
	// `env_files` can be used to specify the path of one or multiple custom
	// environment files instead.
	// The path is relative to the `project_src` directory.
	EnvFiles *[]string `json:"env_files,omitempty"`

	// List of profiles to enable when starting services.
	// Equivalent to `docker compose --profile`.
	Profiles *[]string `json:"profiles,omitempty"`

	// If set to `false`, the module will not check whether one of the files
	// `compose.yaml`, `compose.yml`, `docker-compose.yaml`, or `docker-
	// compose.yml` exists in `project_src` if `files` is not provided.
	// This can be useful if environment files with `COMPOSE_FILE` are used to
	// configure a different filename. The module currently does not check for
	// `COMPOSE_FILE` in environment files or the current environment.
	// default: true
	CheckFilesExisting *bool `json:"check_files_existing,omitempty"`

	// Path to the Docker CLI. If not provided, will search for Docker CLI on the
	// `PATH`.
	DockerCli *string `json:"docker_cli,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// Mutually exclusive with `cli_context`. If neither `docker_host` nor
	// `cli_context` are provided, the value `unix:///var/run/docker.sock` is used.
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// The Docker CLI context to use.
	// Mutually exclusive with `docker_host`.
	CliContext *string `json:"cli_context,omitempty"`
}

// Wrap the `DockerComposeV2PullParameters into an `rpc.RPCCall`.
func (p DockerComposeV2PullParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerComposeV2PullName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_compose_v2_pull` Ansible module.
type DockerComposeV2PullReturn struct {
	AnsibleCommonReturns

	// A list of actions that have been applied.
	Actions *map[string]any `json:"actions,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerComposeV2PullReturn`
func DockerComposeV2PullReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerComposeV2PullReturn, error) {
	return cast.AnyToJSONT[DockerComposeV2PullReturn](r.Result.Result)
}
