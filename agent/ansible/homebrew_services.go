// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages daemons and services using Homebrew.
const HomebrewServicesName = "homebrew_services"

// State of the package's service.
type HomebrewServicesState string

const (
	HomebrewServicesStatePresent   HomebrewServicesState = "present"
	HomebrewServicesStateAbsent    HomebrewServicesState = "absent"
	HomebrewServicesStateRestarted HomebrewServicesState = "restarted"
)

// Convert a supported type to an optional (pointer) HomebrewServicesState
func OptionalHomebrewServicesState[T interface {
	*HomebrewServicesState | HomebrewServicesState | *string | string
}](s T) *HomebrewServicesState {
	switch v := any(s).(type) {
	case *HomebrewServicesState:
		return v
	case HomebrewServicesState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := HomebrewServicesState(*v)
		return &val
	case string:
		val := HomebrewServicesState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `homebrew_services` Ansible module.
type HomebrewServicesParameters struct {
	// An installed homebrew package whose service is to be updated.
	Name string `json:"name"`

	// A `:` separated list of paths to search for `brew` executable. Since a
	// package (`formula` in homebrew parlance) location is prefixed relative to
	// the actual path of `brew` command, providing an alternative `brew` path
	// enables managing different set of packages in an alternative location in the
	// system.
	// default: "/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin"
	Path *string `json:"path,omitempty"`

	// State of the package's service.
	// default: HomebrewServicesStatePresent
	State *HomebrewServicesState `json:"state,omitempty"`
}

// Wrap the `HomebrewServicesParameters into an `rpc.RPCCall`.
func (p HomebrewServicesParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: HomebrewServicesName,
			Args: args,
		},
	}, nil
}

// Return values for the `homebrew_services` Ansible module.
type HomebrewServicesReturn struct {
	AnsibleCommonReturns

	// If the service is now running, this is the PID of the service, otherwise -1.
	Pid *int `json:"pid,omitempty"`

	// Whether the service is running after running this command.
	Running *bool `json:"running,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `HomebrewServicesReturn`
func HomebrewServicesReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (HomebrewServicesReturn, error) {
	return cast.AnyToJSONT[HomebrewServicesReturn](r.Result.Result)
}
