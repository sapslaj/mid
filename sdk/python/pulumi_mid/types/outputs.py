# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TriggersOutput',
]

@pulumi.output_type
class TriggersOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastChanged":
            suggest = "last_changed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggersOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggersOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggersOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_changed: str,
                 refresh: Optional[Sequence[Any]] = None,
                 replace: Optional[Sequence[Any]] = None):
        pulumi.set(__self__, "last_changed", last_changed)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="lastChanged")
    def last_changed(self) -> str:
        return pulumi.get(self, "last_changed")

    @property
    @pulumi.getter
    def refresh(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter
    def replace(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "replace")


