// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module allows to install, delete, enable and disable Docker plugins.
// Performs largely the same function as the `docker plugin` CLI subcommand.
const DockerPluginName = "docker_plugin"

// `absent` remove the plugin.
// `present` install the plugin, if it does not already exist.
// `enable` enable the plugin.
// `disable` disable the plugin.
type DockerPluginState string

const (
	DockerPluginStateAbsent  DockerPluginState = "absent"
	DockerPluginStatePresent DockerPluginState = "present"
	DockerPluginStateEnable  DockerPluginState = "enable"
	DockerPluginStateDisable DockerPluginState = "disable"
)

// Convert a supported type to an optional (pointer) DockerPluginState
func OptionalDockerPluginState[T interface {
	*DockerPluginState | DockerPluginState | *string | string
}](s T) *DockerPluginState {
	switch v := any(s).(type) {
	case *DockerPluginState:
		return v
	case DockerPluginState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerPluginState(*v)
		return &val
	case string:
		val := DockerPluginState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_plugin` Ansible module.
type DockerPluginParameters struct {
	// Name of the plugin to operate on.
	PluginName string `json:"plugin_name"`

	// `absent` remove the plugin.
	// `present` install the plugin, if it does not already exist.
	// `enable` enable the plugin.
	// `disable` disable the plugin.
	// default: DockerPluginStatePresent
	State *DockerPluginState `json:"state,omitempty"`

	// Local name for plugin.
	Alias *string `json:"alias,omitempty"`

	// Dictionary of plugin settings.
	// default: {}
	PluginOptions *map[string]any `json:"plugin_options,omitempty"`

	// Remove even if the plugin is enabled.
	// default: false
	ForceRemove *bool `json:"force_remove,omitempty"`

	// Timeout in seconds.
	// default: 0
	EnableTimeout *int `json:"enable_timeout,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerPluginParameters into an `rpc.RPCCall`.
func (p DockerPluginParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerPluginName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_plugin` Ansible module.
type DockerPluginReturn struct {
	AnsibleCommonReturns

	// Plugin inspection results for the affected plugin.
	Plugin *map[string]any `json:"plugin,omitempty"`

	// List of actions performed during task execution.
	Actions *[]any `json:"actions,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerPluginReturn`
func DockerPluginReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerPluginReturn, error) {
	return cast.AnyToJSONT[DockerPluginReturn](r.Result.Result)
}
