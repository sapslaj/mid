// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Return information on Docker contexts.
// This includes some generic information, as well as a R`contexts[].config`
// dictionary that can be used for module defaults for all community.docker
// modules that use the `community.docker.docker` module defaults group.
const DockerContextInfoName = "docker_context_info"

// Parameters for the `docker_context_info` Ansible module.
type DockerContextInfoParameters struct {
	// If set to `true`, R`contexts` will just contain the current context and none
	// else.
	// If set to `false` (default), R`contexts` will list all contexts, unless
	// `name` is specified.
	// Mutually exclusive to `name`.
	// default: false
	OnlyCurrent *bool `json:"only_current,omitempty"`

	// A specific Docker CLI context to query.
	// The module will fail if this context does not exist. If you simply want to
	// query whether a context exists, do not specify this parameter and use Jinja2
	// to search the resulting list for a context of the given name instead.
	// Mutually exclusive with `only_current`.
	Name *string `json:"name,omitempty"`

	// Override for the default context's name.
	// This is preferably used for context selection when `only_current=true`, and
	// it is used to compute the return values R`contexts[].current` and
	// R`current_context_name`.
	CliContext *string `json:"cli_context,omitempty"`
}

// Wrap the `DockerContextInfoParameters into an `rpc.RPCCall`.
func (p DockerContextInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerContextInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_context_info` Ansible module.
type DockerContextInfoReturn struct {
	AnsibleCommonReturns

	// A list of all contexts (`only_current=false`, `name` not specified), only
	// the current context (`only_current=true`), or the requested context (`name`
	// specified).
	Contexts *map[string]any `json:"contexts,omitempty"`

	// The name of the current Docker context.
	CurrentContextName *string `json:"current_context_name,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerContextInfoReturn`
func DockerContextInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerContextInfoReturn, error) {
	return cast.AnyToJSONT[DockerContextInfoReturn](r.Result.Result)
}
