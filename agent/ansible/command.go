// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const CommandName = "command"

type CommandParameters struct {
	ExpandArgumentVars *bool     `json:"expand_argument_vars,omitempty"`
	FreeForm           *string   `json:"free_form,omitempty"`
	Cmd                *string   `json:"cmd,omitempty"`
	Argv               *[]string `json:"argv,omitempty"`
	Creates            *string   `json:"creates,omitempty"`
	Removes            *string   `json:"removes,omitempty"`
	Chdir              *string   `json:"chdir,omitempty"`
	Stdin              *string   `json:"stdin,omitempty"`
	StdinAddNewline    *bool     `json:"stdin_add_newline,omitempty"`
	StripEmptyEnds     *bool     `json:"strip_empty_ends,omitempty"`
}

func (p *CommandParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: CommandName,
			Args: args,
		},
	}, nil
}

type CommandReturn struct {
	AnsibleCommonReturns
	Msg         *string `json:"msg,omitempty"`
	Start       *string `json:"start,omitempty"`
	End         *string `json:"end,omitempty"`
	Delta       *string `json:"delta,omitempty"`
	Stdout      *string `json:"stdout,omitempty"`
	Stderr      *string `json:"stderr,omitempty"`
	Cmd         *[]any  `json:"cmd,omitempty"`
	Rc          *int    `json:"rc,omitempty"`
	StdoutLines *[]any  `json:"stdout_lines,omitempty"`
	StderrLines *[]any  `json:"stderr_lines,omitempty"`
}

func CommandReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (CommandReturn, error) {
	return rpc.AnyToJSONT[CommandReturn](r.Result.Result)
}
