// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module decrypts input using `systemd`'s `systemd-creds decrypt`.
const SystemdCredsDecryptName = "systemd_creds_decrypt"

// Whether to transcode the output before returning it.
type SystemdCredsDecryptTranscode string

const (
	SystemdCredsDecryptTranscodeBase64   SystemdCredsDecryptTranscode = "base64"
	SystemdCredsDecryptTranscodeUnbase64 SystemdCredsDecryptTranscode = "unbase64"
	SystemdCredsDecryptTranscodeHex      SystemdCredsDecryptTranscode = "hex"
	SystemdCredsDecryptTranscodeUnhex    SystemdCredsDecryptTranscode = "unhex"
)

// Convert a supported type to an optional (pointer) SystemdCredsDecryptTranscode
func OptionalSystemdCredsDecryptTranscode[T interface {
	*SystemdCredsDecryptTranscode | SystemdCredsDecryptTranscode | *string | string
}](s T) *SystemdCredsDecryptTranscode {
	switch v := any(s).(type) {
	case *SystemdCredsDecryptTranscode:
		return v
	case SystemdCredsDecryptTranscode:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SystemdCredsDecryptTranscode(*v)
		return &val
	case string:
		val := SystemdCredsDecryptTranscode(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `systemd_creds_decrypt` Ansible module.
type SystemdCredsDecryptParameters struct {
	// The credential name to validate the embedded credential name.
	Name *string `json:"name,omitempty"`

	// Whether to add a trailing newline character to the end of the output, if not
	// present.
	// default: false
	Newline *bool `json:"newline,omitempty"`

	// The secret to decrypt.
	Secret string `json:"secret"`

	// The timestamp to use to validate the `not-after` timestamp that was used
	// during encryption.
	// Takes a timestamp specification in the format described in
	// `systemd.time(7\`).
	Timestamp *string `json:"timestamp,omitempty"`

	// Whether to transcode the output before returning it.
	Transcode *SystemdCredsDecryptTranscode `json:"transcode,omitempty"`

	// A user name or numeric UID when decrypting from a specific user context.
	// If set to the special string `self` it sets the user to the user of the
	// calling process.
	// Requires `systemd` 256 or later.
	User *string `json:"user,omitempty"`
}

// Wrap the `SystemdCredsDecryptParameters into an `rpc.RPCCall`.
func (p SystemdCredsDecryptParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SystemdCredsDecryptName,
			Args: args,
		},
	}, nil
}

// Return values for the `systemd_creds_decrypt` Ansible module.
type SystemdCredsDecryptReturn struct {
	AnsibleCommonReturns

	// The decrypted secret.
	// Note that Ansible only supports returning UTF-8 encoded strings. If the
	// decrypted secret is binary data, or a string encoded in another way, use
	// `transcode=base64` or `transcode=hex` to circument this restriction. You
	// then need to decode the data when using it, for example using the
	// `ansible.builtin.b64decode#filter` filter.
	Value *string `json:"value,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `SystemdCredsDecryptReturn`
func SystemdCredsDecryptReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SystemdCredsDecryptReturn, error) {
	return rpc.AnyToJSONT[SystemdCredsDecryptReturn](r.Result.Result)
}
