// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// This module is used to generate ISO file with specified path of files.
const IsoCreateName = "iso_create"

// The ISO9660 interchange level to use, it dictates the rules on the names of
// files.
// Levels and valid values `1`, `2`, `3`, `4` are supported.
// The default value is level `1`, which is the most conservative, level `3` is
// recommended.
// ISO9660 file names at interchange level `1` cannot have more than 8
// characters or 3 characters in the extension.
type IsoCreateInterchangeLevel int

const (
	IsoCreateInterchangeLevel1 IsoCreateInterchangeLevel = 1
	IsoCreateInterchangeLevel2 IsoCreateInterchangeLevel = 2
	IsoCreateInterchangeLevel3 IsoCreateInterchangeLevel = 3
	IsoCreateInterchangeLevel4 IsoCreateInterchangeLevel = 4
)

// Convert a supported type to an optional (pointer) IsoCreateInterchangeLevel
func OptionalIsoCreateInterchangeLevel[T interface {
	*IsoCreateInterchangeLevel | IsoCreateInterchangeLevel | *int | int
}](s T) *IsoCreateInterchangeLevel {
	switch v := any(s).(type) {
	case *IsoCreateInterchangeLevel:
		return v
	case IsoCreateInterchangeLevel:
		return &v
	case *int:
		if v == nil {
			return nil
		}
		val := IsoCreateInterchangeLevel(*v)
		return &val
	case int:
		val := IsoCreateInterchangeLevel(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Whether to make this ISO have the Rock Ridge extensions or not.
// Valid values are `1.09`, `1.10` or `1.12`, means adding the specified Rock
// Ridge version to the ISO.
// If unsure, set `1.09` to ensure maximum compatibility.
// If not specified, then not add Rock Ridge extension to the ISO.
type IsoCreateRockRidge string

const (
	IsoCreateRockRidge109 IsoCreateRockRidge = "1.09"
	IsoCreateRockRidge110 IsoCreateRockRidge = "1.10"
	IsoCreateRockRidge112 IsoCreateRockRidge = "1.12"
)

// Convert a supported type to an optional (pointer) IsoCreateRockRidge
func OptionalIsoCreateRockRidge[T interface {
	*IsoCreateRockRidge | IsoCreateRockRidge | *string | string
}](s T) *IsoCreateRockRidge {
	switch v := any(s).(type) {
	case *IsoCreateRockRidge:
		return v
	case IsoCreateRockRidge:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := IsoCreateRockRidge(*v)
		return &val
	case string:
		val := IsoCreateRockRidge(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Support levels and valid values are `1`, `2`, or `3`.
// Level `3` is by far the most common.
// If not specified, then no Joliet support is added.
type IsoCreateJoliet int

const (
	IsoCreateJoliet1 IsoCreateJoliet = 1
	IsoCreateJoliet2 IsoCreateJoliet = 2
	IsoCreateJoliet3 IsoCreateJoliet = 3
)

// Convert a supported type to an optional (pointer) IsoCreateJoliet
func OptionalIsoCreateJoliet[T interface {
	*IsoCreateJoliet | IsoCreateJoliet | *int | int
}](s T) *IsoCreateJoliet {
	switch v := any(s).(type) {
	case *IsoCreateJoliet:
		return v
	case IsoCreateJoliet:
		return &v
	case *int:
		if v == nil {
			return nil
		}
		val := IsoCreateJoliet(*v)
		return &val
	case int:
		val := IsoCreateJoliet(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `iso_create` Ansible module.
type IsoCreateParameters struct {
	// This is a list of absolute paths of source files or folders which will be
	// contained in the new generated ISO file.
	// Will fail if specified file or folder in `src_files` does not exist on local
	// machine.
	// Note: With all ISO9660 levels from 1 to 3, all file names are restricted to
	// uppercase letters, numbers and underscores (_). File names are limited to 31
	// characters, directory nesting is limited to 8 levels, and path names are
	// limited to 255 characters.
	SrcFiles []string `json:"src_files"`

	// The absolute path with file name of the new generated ISO file on local
	// machine.
	// Will create intermediate folders when they does not exist.
	DestIso string `json:"dest_iso"`

	// The ISO9660 interchange level to use, it dictates the rules on the names of
	// files.
	// Levels and valid values `1`, `2`, `3`, `4` are supported.
	// The default value is level `1`, which is the most conservative, level `3` is
	// recommended.
	// ISO9660 file names at interchange level `1` cannot have more than 8
	// characters or 3 characters in the extension.
	// default: IsoCreateInterchangeLevel1
	InterchangeLevel *IsoCreateInterchangeLevel `json:"interchange_level,omitempty"`

	// The volume identification string to use on the new generated ISO image.
	VolIdent *string `json:"vol_ident,omitempty"`

	// Whether to make this ISO have the Rock Ridge extensions or not.
	// Valid values are `1.09`, `1.10` or `1.12`, means adding the specified Rock
	// Ridge version to the ISO.
	// If unsure, set `1.09` to ensure maximum compatibility.
	// If not specified, then not add Rock Ridge extension to the ISO.
	RockRidge *IsoCreateRockRidge `json:"rock_ridge,omitempty"`

	// Support levels and valid values are `1`, `2`, or `3`.
	// Level `3` is by far the most common.
	// If not specified, then no Joliet support is added.
	Joliet *IsoCreateJoliet `json:"joliet,omitempty"`

	// Whether to add UDF support to this ISO.
	// If set to `true`, then version 2.60 of the UDF spec is used.
	// If not specified or set to `false`, then no UDF support is added.
	// default: false
	Udf *bool `json:"udf,omitempty"`
}

// Wrap the `IsoCreateParameters into an `rpc.RPCCall`.
func (p IsoCreateParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: IsoCreateName,
			Args: args,
		},
	}, nil
}

// Return values for the `iso_create` Ansible module.
type IsoCreateReturn struct {
	AnsibleCommonReturns

	// Configured source files or directories list.
	SourceFile *[]string `json:"source_file,omitempty"`

	// Created iso file path.
	CreatedIso *string `json:"created_iso,omitempty"`

	// Configured interchange level.
	InterchangeLevel *int `json:"interchange_level,omitempty"`

	// Configured volume identification string.
	VolIdent *string `json:"vol_ident,omitempty"`

	// Configured Joliet support level.
	Joliet *int `json:"joliet,omitempty"`

	// Configured Rock Ridge version.
	RockRidge *string `json:"rock_ridge,omitempty"`

	// Configured UDF support.
	Udf *bool `json:"udf,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `IsoCreateReturn`
func IsoCreateReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (IsoCreateReturn, error) {
	return rpc.AnyToJSONT[IsoCreateReturn](r.Result.Result)
}
