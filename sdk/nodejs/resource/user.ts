// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class User extends pulumi.CustomResource {
  /**
   * Get an existing User resource's state with the given name, ID, and optional extra
   * properties used to qualify the lookup.
   *
   * @param name The _unique_ name of the resulting resource.
   * @param id The _unique_ provider ID of the resource to lookup.
   * @param opts Optional settings to control the behavior of the CustomResource.
   */
  public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): User {
    return new User(name, undefined as any, { ...opts, id: id });
  }

  /** @internal */
  public static readonly __pulumiType = "mid:resource:User";

  /**
   * Returns true if the given object is an instance of User.  This is designed to work even
   * when multiple copies of the Pulumi SDK have been loaded into the same process.
   */
  public static isInstance(obj: any): obj is User {
    if (obj === undefined || obj === null) {
      return false;
    }
    return obj["__pulumiType"] === User.__pulumiType;
  }

  declare public readonly comment: pulumi.Output<string | undefined>;
  declare public readonly config: pulumi.Output<outputs.ResourceConfig | undefined>;
  declare public readonly connection: pulumi.Output<outputs.Connection | undefined>;
  declare public readonly ensure: pulumi.Output<string | undefined>;
  declare public readonly force: pulumi.Output<boolean | undefined>;
  declare public readonly group: pulumi.Output<string | undefined>;
  declare public readonly groups: pulumi.Output<string[] | undefined>;
  declare public readonly groupsExclusive: pulumi.Output<boolean | undefined>;
  declare public readonly home: pulumi.Output<string | undefined>;
  declare public readonly local: pulumi.Output<boolean | undefined>;
  declare public readonly manageHome: pulumi.Output<boolean | undefined>;
  declare public readonly name: pulumi.Output<string>;
  declare public readonly nonUnique: pulumi.Output<boolean | undefined>;
  declare public readonly password: pulumi.Output<string | undefined>;
  declare public readonly shell: pulumi.Output<string | undefined>;
  declare public readonly skeleton: pulumi.Output<string | undefined>;
  declare public readonly system: pulumi.Output<boolean | undefined>;
  declare public readonly triggers: pulumi.Output<outputs.TriggersOutput>;
  declare public readonly uid: pulumi.Output<number | undefined>;
  declare public readonly uidMax: pulumi.Output<number | undefined>;
  declare public readonly uidMin: pulumi.Output<number | undefined>;
  declare public readonly umask: pulumi.Output<string | undefined>;
  declare public readonly updatePassword: pulumi.Output<string | undefined>;

  /**
   * Create a User resource with the given unique name, arguments, and options.
   *
   * @param name The _unique_ name of the resource.
   * @param args The arguments to use to populate this resource's properties.
   * @param opts A bag of options that control this resource's behavior.
   */
  constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions) {
    let resourceInputs: pulumi.Inputs = {};
    opts = opts || {};
    if (!opts.id) {
      if (args?.name === undefined && !opts.urn) {
        throw new Error("Missing required property 'name'");
      }
      resourceInputs["comment"] = args?.comment;
      resourceInputs["config"] = args?.config;
      resourceInputs["connection"] = args
        ? (args.connection ? pulumi.output(args.connection).apply(inputs.connectionArgsProvideDefaults) : undefined)
        : undefined;
      resourceInputs["ensure"] = args?.ensure;
      resourceInputs["force"] = args?.force;
      resourceInputs["group"] = args?.group;
      resourceInputs["groups"] = args?.groups;
      resourceInputs["groupsExclusive"] = args?.groupsExclusive;
      resourceInputs["home"] = args?.home;
      resourceInputs["local"] = args?.local;
      resourceInputs["manageHome"] = args?.manageHome;
      resourceInputs["name"] = args?.name;
      resourceInputs["nonUnique"] = args?.nonUnique;
      resourceInputs["password"] = args?.password;
      resourceInputs["shell"] = args?.shell;
      resourceInputs["skeleton"] = args?.skeleton;
      resourceInputs["system"] = args?.system;
      resourceInputs["triggers"] = args?.triggers;
      resourceInputs["uid"] = args?.uid;
      resourceInputs["uidMax"] = args?.uidMax;
      resourceInputs["uidMin"] = args?.uidMin;
      resourceInputs["umask"] = args?.umask;
      resourceInputs["updatePassword"] = args?.updatePassword;
    } else {
      resourceInputs["comment"] = undefined /*out*/;
      resourceInputs["config"] = undefined /*out*/;
      resourceInputs["connection"] = undefined /*out*/;
      resourceInputs["ensure"] = undefined /*out*/;
      resourceInputs["force"] = undefined /*out*/;
      resourceInputs["group"] = undefined /*out*/;
      resourceInputs["groups"] = undefined /*out*/;
      resourceInputs["groupsExclusive"] = undefined /*out*/;
      resourceInputs["home"] = undefined /*out*/;
      resourceInputs["local"] = undefined /*out*/;
      resourceInputs["manageHome"] = undefined /*out*/;
      resourceInputs["name"] = undefined /*out*/;
      resourceInputs["nonUnique"] = undefined /*out*/;
      resourceInputs["password"] = undefined /*out*/;
      resourceInputs["shell"] = undefined /*out*/;
      resourceInputs["skeleton"] = undefined /*out*/;
      resourceInputs["system"] = undefined /*out*/;
      resourceInputs["triggers"] = undefined /*out*/;
      resourceInputs["uid"] = undefined /*out*/;
      resourceInputs["uidMax"] = undefined /*out*/;
      resourceInputs["uidMin"] = undefined /*out*/;
      resourceInputs["umask"] = undefined /*out*/;
      resourceInputs["updatePassword"] = undefined /*out*/;
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    super(User.__pulumiType, name, resourceInputs, opts);
  }
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
  comment?: pulumi.Input<string>;
  config?: pulumi.Input<inputs.ResourceConfigArgs>;
  connection?: pulumi.Input<inputs.ConnectionArgs>;
  ensure?: pulumi.Input<string>;
  force?: pulumi.Input<boolean>;
  group?: pulumi.Input<string>;
  groups?: pulumi.Input<pulumi.Input<string>[]>;
  groupsExclusive?: pulumi.Input<boolean>;
  home?: pulumi.Input<string>;
  local?: pulumi.Input<boolean>;
  manageHome?: pulumi.Input<boolean>;
  name: pulumi.Input<string>;
  nonUnique?: pulumi.Input<boolean>;
  password?: pulumi.Input<string>;
  shell?: pulumi.Input<string>;
  skeleton?: pulumi.Input<string>;
  system?: pulumi.Input<boolean>;
  triggers?: pulumi.Input<inputs.TriggersInputArgs>;
  uid?: pulumi.Input<number>;
  uidMax?: pulumi.Input<number>;
  uidMin?: pulumi.Input<number>;
  umask?: pulumi.Input<string>;
  updatePassword?: pulumi.Input<string>;
}
