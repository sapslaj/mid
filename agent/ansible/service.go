// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const ServiceName = "service"

type ServiceParameters struct {
	Name      string  `json:"name"`
	State     *string `json:"state,omitempty"`
	Sleep     *int    `json:"sleep,omitempty"`
	Pattern   *string `json:"pattern,omitempty"`
	Enabled   *bool   `json:"enabled,omitempty"`
	Runlevel  *string `json:"runlevel,omitempty"`
	Arguments *string `json:"arguments,omitempty"`
	Use       *string `json:"use,omitempty"`
}

func (p *ServiceParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: ServiceName,
			Args: args,
		},
	}, nil
}

type ServiceReturn struct {
	AnsibleCommonReturns
}

func ServiceReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (ServiceReturn, error) {
	return rpc.AnyToJSONT[ServiceReturn](r.Result.Result)
}
