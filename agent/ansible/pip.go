// Code generated by `python3 -m ansible.generate` DO NOT EDIT
package ansible

import (
	_ "embed"

	"github.com/sapslaj/mid/agent/rpc"
)

const PipName = "pip"

//go:embed pip.zip
var PipZipfile []byte

type PipParameters struct {
	Name                   *[]string `json:"name,omitempty"`
	Version                *string   `json:"version,omitempty"`
	Requirements           *string   `json:"requirements,omitempty"`
	Virtualenv             *string   `json:"virtualenv,omitempty"`
	VirtualenvSitePackages *bool     `json:"virtualenv_site_packages,omitempty"`
	VirtualenvCommand      *string   `json:"virtualenv_command,omitempty"`
	VirtualenvPython       *string   `json:"virtualenv_python,omitempty"`
	State                  *string   `json:"state,omitempty"`
	ExtraArgs              *string   `json:"extra_args,omitempty"`
	Editable               *bool     `json:"editable,omitempty"`
	Chdir                  *string   `json:"chdir,omitempty"`
	Executable             *string   `json:"executable,omitempty"`
	Umask                  *string   `json:"umask,omitempty"`
	BreakSystemPackages    *bool     `json:"break_system_packages,omitempty"`
}

func (p *PipParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsiballZExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsiballZExecuteArgs]{
		RPCFunction: rpc.RPCAnsiballZExecute,
		Args: rpc.AnsiballZExecuteArgs{
			Zip:  PipZipfile,
			Name: PipName,
			Args: args,
		},
	}, nil
}

type PipReturn struct {
	AnsibleCommonReturns
	Cmd          *string `json:"cmd,omitempty"`
	Name         *[]any  `json:"name,omitempty"`
	Requirements *string `json:"requirements,omitempty"`
	Version      *string `json:"version,omitempty"`
	Virtualenv   *string `json:"virtualenv,omitempty"`
}

func PipReturnFromRPCResult(r rpc.RPCResult[rpc.AnsiballZExecuteResult]) (PipReturn, error) {
	return rpc.AnyToJSONT[PipReturn](r.Result.Result)
}
