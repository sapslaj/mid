# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ["ProviderArgs", "Provider"]


@pulumi.input_type
class ProviderArgs:
    def __init__(
        __self__,
        *,
        check: Optional[pulumi.Input[_builtins.bool]] = None,
        connection: Optional[pulumi.Input["ConnectionArgs"]] = None,
        delete_unreachable: Optional[pulumi.Input[_builtins.bool]] = None,
        parallel: Optional[pulumi.Input[_builtins.int]] = None,
    ):
        """
        The set of arguments for constructing a Provider resource.
        """
        if check is not None:
            pulumi.set(__self__, "check", check)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if delete_unreachable is not None:
            pulumi.set(__self__, "delete_unreachable", delete_unreachable)
        if parallel is not None:
            pulumi.set(__self__, "parallel", parallel)

    @_builtins.property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "check", value)

    @_builtins.property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input["ConnectionArgs"]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input["ConnectionArgs"]]):
        pulumi.set(self, "connection", value)

    @_builtins.property
    @pulumi.getter(name="deleteUnreachable")
    def delete_unreachable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_unreachable")

    @delete_unreachable.setter
    def delete_unreachable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_unreachable", value)

    @_builtins.property
    @pulumi.getter
    def parallel(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "parallel")

    @parallel.setter
    def parallel(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "parallel", value)


@pulumi.type_token("pulumi:providers:mid")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        check: Optional[pulumi.Input[_builtins.bool]] = None,
        connection: Optional[
            pulumi.Input[Union["ConnectionArgs", "ConnectionArgsDict"]]
        ] = None,
        delete_unreachable: Optional[pulumi.Input[_builtins.bool]] = None,
        parallel: Optional[pulumi.Input[_builtins.int]] = None,
        __props__=None,
    ):
        """
        Create a Mid resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: Optional[ProviderArgs] = None,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a Mid resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            ProviderArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        check: Optional[pulumi.Input[_builtins.bool]] = None,
        connection: Optional[
            pulumi.Input[Union["ConnectionArgs", "ConnectionArgsDict"]]
        ] = None,
        delete_unreachable: Optional[pulumi.Input[_builtins.bool]] = None,
        parallel: Optional[pulumi.Input[_builtins.int]] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["check"] = (
                pulumi.Output.from_input(check).apply(pulumi.runtime.to_json)
                if check is not None
                else None
            )
            __props__.__dict__["connection"] = (
                pulumi.Output.secret(connection).apply(pulumi.runtime.to_json)
                if connection is not None
                else None
            )
            __props__.__dict__["delete_unreachable"] = (
                pulumi.Output.from_input(delete_unreachable).apply(
                    pulumi.runtime.to_json
                )
                if delete_unreachable is not None
                else None
            )
            __props__.__dict__["parallel"] = (
                pulumi.Output.from_input(parallel).apply(pulumi.runtime.to_json)
                if parallel is not None
                else None
            )
        super(Provider, __self__).__init__("mid", resource_name, __props__, opts)
