// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages packages with `urpmi` (such as for Mageia or Mandriva).
const UrpmiName = "urpmi"

// Indicates the desired package state.
type UrpmiState string

const (
	UrpmiStateAbsent    UrpmiState = "absent"
	UrpmiStatePresent   UrpmiState = "present"
	UrpmiStateInstalled UrpmiState = "installed"
	UrpmiStateRemoved   UrpmiState = "removed"
)

// Convert a supported type to an optional (pointer) UrpmiState
func OptionalUrpmiState[T interface {
	*UrpmiState | UrpmiState | *string | string
}](s T) *UrpmiState {
	switch v := any(s).(type) {
	case *UrpmiState:
		return v
	case UrpmiState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := UrpmiState(*v)
		return &val
	case string:
		val := UrpmiState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `urpmi` Ansible module.
type UrpmiParameters struct {
	// A list of package names to install, upgrade or remove.
	Name []string `json:"name"`

	// Indicates the desired package state.
	// default: UrpmiStatePresent
	State *UrpmiState `json:"state,omitempty"`

	// Update the package database first `urpmi.update -a`.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`

	// Corresponds to the `--no-recommends` option for `urpmi`.
	// default: true
	NoRecommends *bool `json:"no_recommends,omitempty"`

	// Assume "yes" is the answer to any question urpmi has to ask. Corresponds to
	// the `--force` option for `urpmi`.
	// default: true
	Force *bool `json:"force,omitempty"`

	// Specifies an alternative install root, relative to which all packages are
	// installed. Corresponds to the `--root` option for `urpmi`.
	Root *string `json:"root,omitempty"`
}

// Wrap the `UrpmiParameters into an `rpc.RPCCall`.
func (p UrpmiParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: UrpmiName,
			Args: args,
		},
	}, nil
}

// Return values for the `urpmi` Ansible module.
type UrpmiReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `UrpmiReturn`
func UrpmiReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (UrpmiReturn, error) {
	return rpc.AnyToJSONT[UrpmiReturn](r.Result.Result)
}
