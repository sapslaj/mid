// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resource

import (
	"context"
	"reflect"

	"example.com/pulumi-mid/sdk/go/mid/internal"
	"example.com/pulumi-mid/sdk/go/mid/types"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Package struct {
	pulumi.CustomResourceState

	Name     pulumi.StringPtrOutput     `pulumi:"name"`
	Names    pulumi.StringArrayOutput   `pulumi:"names"`
	State    pulumi.StringOutput        `pulumi:"state"`
	Triggers types.TriggersOutputOutput `pulumi:"triggers"`
}

// NewPackage registers a new resource with the given unique name, arguments, and options.
func NewPackage(ctx *pulumi.Context,
	name string, args *PackageArgs, opts ...pulumi.ResourceOption) (*Package, error) {
	if args == nil {
		args = &PackageArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Package
	err := ctx.RegisterResource("mid:resource:Package", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPackage gets an existing Package resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PackageState, opts ...pulumi.ResourceOption) (*Package, error) {
	var resource Package
	err := ctx.ReadResource("mid:resource:Package", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Package resources.
type packageState struct {
}

type PackageState struct {
}

func (PackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*packageState)(nil)).Elem()
}

type packageArgs struct {
	Name     *string              `pulumi:"name"`
	Names    []string             `pulumi:"names"`
	State    *string              `pulumi:"state"`
	Triggers *types.TriggersInput `pulumi:"triggers"`
}

// The set of arguments for constructing a Package resource.
type PackageArgs struct {
	Name     pulumi.StringPtrInput
	Names    pulumi.StringArrayInput
	State    pulumi.StringPtrInput
	Triggers types.TriggersInputPtrInput
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packageArgs)(nil)).Elem()
}

type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(ctx context.Context) PackageOutput
}

func (*Package) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *Package) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i *Package) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

func (o PackageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PackageOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Package) pulumi.StringArrayOutput { return v.Names }).(pulumi.StringArrayOutput)
}

func (o PackageOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o PackageOutput) Triggers() types.TriggersOutputOutput {
	return o.ApplyT(func(v *Package) types.TriggersOutputOutput { return v.Triggers }).(types.TriggersOutputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInput)(nil)).Elem(), &Package{})
	pulumi.RegisterOutputType(PackageOutput{})
}
