// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// `ansible.posix.synchronize` is a wrapper around `rsync` to make common tasks
// in your playbooks quick and easy.
// It is run and originates on the local host where Ansible is being run.
// Of course, you could just use the `ansible.builtin.command` action to call
// `rsync` yourself, but you also have to add a fair number of boilerplate
// options and host facts.
// This module is not intended to provide access to the full power of `rsync`,
// but does make the most common invocations easier to implement. You `still`
// may need to call `rsync` directly via `ansible.builtin.command` or
// `ansible.builtin.shell` depending on your use case.
const SynchronizeName = "synchronize"

// Specify the direction of the synchronization.
// In `push` mode the localhost or delegate is the source.
// In `pull` mode the remote host in context is the source.
type SynchronizeMode string

const (
	SynchronizeModePull SynchronizeMode = "pull"
	SynchronizeModePush SynchronizeMode = "push"
)

// Convert a supported type to an optional (pointer) SynchronizeMode
func OptionalSynchronizeMode[T interface {
	*SynchronizeMode | SynchronizeMode | *string | string
}](s T) *SynchronizeMode {
	switch v := any(s).(type) {
	case *SynchronizeMode:
		return v
	case SynchronizeMode:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SynchronizeMode(*v)
		return &val
	case string:
		val := SynchronizeMode(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `synchronize` Ansible module.
type SynchronizeParameters struct {
	// Path on the source host that will be synchronized to the destination.
	// The path can be absolute or relative.
	Src string `json:"src"`

	// Path on the destination host that will be synchronized from the source.
	// The path can be absolute or relative.
	Dest string `json:"dest"`

	// Port number for ssh on the destination host.
	// Prior to Ansible 2.0, the `ansible_ssh_port` inventory var took precedence
	// over this value.
	// This parameter defaults to the value of `ansible_port`, the `remote_port`
	// config setting or the value from ssh client configuration if none of the
	// former have been set.
	DestPort *int `json:"dest_port,omitempty"`

	// Specify the direction of the synchronization.
	// In `push` mode the localhost or delegate is the source.
	// In `pull` mode the remote host in context is the source.
	// default: SynchronizeModePush
	Mode *SynchronizeMode `json:"mode,omitempty"`

	// Mirrors the rsync archive flag, enables recursive, links, perms, times,
	// owner, group flags, and `-D`.
	// default: true
	Archive *bool `json:"archive,omitempty"`

	// Skip based on checksum, rather than mod-time & size; Note that that
	// `archive` option is still enabled by default - the `checksum` option will
	// not disable it.
	// default: false
	Checksum *bool `json:"checksum,omitempty"`

	// Compress file data during the transfer.
	// In most cases, leave this enabled unless it causes problems.
	// default: true
	Compress *bool `json:"compress,omitempty"`

	// Skip creating new files on receiver.
	// default: false
	ExistingOnly *bool `json:"existing_only,omitempty"`

	// Delete files in `dest` that do not exist (after transfer, not before) in the
	// `src` path.
	// This option requires `recursive=true`.
	// This option ignores excluded files and behaves like the rsync opt `--delete-
	// after`.
	// default: false
	Delete *bool `json:"delete,omitempty"`

	// Transfer directories without recursing.
	// default: false
	Dirs *bool `json:"dirs,omitempty"`

	// Recurse into directories.
	// This parameter defaults to the value of the archive option.
	Recursive *bool `json:"recursive,omitempty"`

	// Copy symlinks as symlinks.
	// This parameter defaults to the value of the archive option.
	Links *bool `json:"links,omitempty"`

	// Copy symlinks as the item that they point to (the referent) is copied,
	// rather than the symlink.
	// default: false
	CopyLinks *bool `json:"copy_links,omitempty"`

	// Preserve permissions.
	// This parameter defaults to the value of the archive option.
	Perms *bool `json:"perms,omitempty"`

	// Preserve modification times.
	// This parameter defaults to the value of the archive option.
	Times *bool `json:"times,omitempty"`

	// Preserve owner (super user only).
	// This parameter defaults to the value of the archive option.
	Owner *bool `json:"owner,omitempty"`

	// Preserve group.
	// This parameter defaults to the value of the archive option.
	Group *bool `json:"group,omitempty"`

	// Specify the rsync command to run on the remote host. See `--rsync-path` on
	// the rsync man page.
	// To specify the rsync command to run on the local host, you need to set this
	// your task var `ansible_rsync_path`.
	RsyncPath *string `json:"rsync_path,omitempty"`

	// Specify a `--timeout` for the rsync command in seconds.
	// default: 0
	RsyncTimeout *int `json:"rsync_timeout,omitempty"`

	// Put `user@` for the remote paths.
	// If you have a custom ssh config to define the remote user for a host that
	// does not match the inventory user, you should set this parameter to `false`.
	// default: true
	SetRemoteUser *bool `json:"set_remote_user,omitempty"`

	// SSH connection multiplexing for rsync is disabled by default to prevent
	// misconfigured ControlSockets from resulting in failed SSH connections. This
	// is accomplished by setting the SSH `ControlSocket` to `none`.
	// Set this option to `true` to allow multiplexing and reduce SSH connection
	// overhead.
	// Note that simply setting this option to `true` is not enough; You must also
	// configure SSH connection multiplexing in your SSH client config by setting
	// values for `ControlMaster`, `ControlPersist` and `ControlPath`.
	// default: false
	SshConnectionMultiplexing *bool `json:"ssh_connection_multiplexing,omitempty"`

	// Specify additional rsync options by passing in an array.
	// Note that an empty string in `rsync_opts` will end up transfer the current
	// working directory.
	// default: []
	RsyncOpts *[]string `json:"rsync_opts,omitempty"`

	// Tells rsync to keep the partial file which should make a subsequent transfer
	// of the rest of the file much faster.
	// default: false
	Partial *bool `json:"partial,omitempty"`

	// Verify destination host key.
	// default: false
	VerifyHost *bool `json:"verify_host,omitempty"`

	// Specify the private key to use for SSH-based rsync connections (e.g.
	// `~/.ssh/id_rsa`).
	PrivateKey *string `json:"private_key,omitempty"`

	// Add a destination to hard link against during the rsync.
	// default: nil
	LinkDest *[]string `json:"link_dest,omitempty"`

	// This option puts the temporary file from each updated file into a holding
	// directory until the end of the transfer, at which time all the files are
	// renamed into place in rapid succession.
	// default: true
	DelayUpdates *bool `json:"delay_updates,omitempty"`

	// In Ansible 2.10 and lower, it uses the ssh_args specified in `ansible.cfg`.
	// In Ansible 2.11 and onwards, when set to `true`, it uses all SSH connection
	// configurations like `ansible_ssh_args`, `ansible_ssh_common_args`, and
	// `ansible_ssh_extra_args`.
	// default: false
	UseSshArgs *bool `json:"use_ssh_args,omitempty"`

	// Internal use only.
	// default: "rsync"
	LocalRsyncPath *string `json:"_local_rsync_path,omitempty"`

	// Internal use only, never logged.
	LocalRsyncPassword *string `json:"_local_rsync_password,omitempty"`

	// Internal use only.
	// default: false
	SubstituteController *bool `json:"_substitute_controller,omitempty"`

	// Internal use only. See `use_ssh_args` for ssh arg settings.
	SshArgs *string `json:"_ssh_args,omitempty"`
}

// Wrap the `SynchronizeParameters into an `rpc.RPCCall`.
func (p SynchronizeParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SynchronizeName,
			Args: args,
		},
	}, nil
}

// Return values for the `synchronize` Ansible module.
type SynchronizeReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SynchronizeReturn`
func SynchronizeReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SynchronizeReturn, error) {
	return cast.AnyToJSONT[SynchronizeReturn](r.Result.Result)
}
