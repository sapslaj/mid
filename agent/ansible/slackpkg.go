// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manage binary packages for Slackware using `slackpkg` which is available in
// versions after 12.2.
const SlackpkgName = "slackpkg"

// State of the package, you can use `installed` as an alias for `present` and
// `removed` as one for `absent`.
type SlackpkgState string

const (
	SlackpkgStatePresent   SlackpkgState = "present"
	SlackpkgStateAbsent    SlackpkgState = "absent"
	SlackpkgStateLatest    SlackpkgState = "latest"
	SlackpkgStateInstalled SlackpkgState = "installed"
	SlackpkgStateRemoved   SlackpkgState = "removed"
)

// Convert a supported type to an optional (pointer) SlackpkgState
func OptionalSlackpkgState[T interface {
	*SlackpkgState | SlackpkgState | *string | string
}](s T) *SlackpkgState {
	switch v := any(s).(type) {
	case *SlackpkgState:
		return v
	case SlackpkgState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := SlackpkgState(*v)
		return &val
	case string:
		val := SlackpkgState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `slackpkg` Ansible module.
type SlackpkgParameters struct {
	// Name of package to install/remove.
	Name []string `json:"name"`

	// State of the package, you can use `installed` as an alias for `present` and
	// `removed` as one for `absent`.
	// default: SlackpkgStatePresent
	State *SlackpkgState `json:"state,omitempty"`

	// Update the package database first.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`
}

// Wrap the `SlackpkgParameters into an `rpc.RPCCall`.
func (p SlackpkgParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: SlackpkgName,
			Args: args,
		},
	}, nil
}

// Return values for the `slackpkg` Ansible module.
type SlackpkgReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `SlackpkgReturn`
func SlackpkgReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (SlackpkgReturn, error) {
	return rpc.AnyToJSONT[SlackpkgReturn](r.Result.Result)
}
