// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Compatibility layer for using the "package" module for RHEL for Edge systems
// utilizing the RHEL System Roles.
const RhelRpmOstreeName = "rhel_rpm_ostree"

// Whether to install (`present` or `installed`, `latest`), or remove (`absent`
// or `removed`) a package.
// `present` and `installed` will simply ensure that a desired package is
// installed.
// `latest` will update the specified package if it's not of the latest
// available version.
// `absent` and `removed` will remove the specified package.
// Default is `null`, however in effect the default action is `present` unless
// the `autoremove` option is enabled for this module, then `absent` is
// inferred.
type RhelRpmOstreeState string

const (
	RhelRpmOstreeStateAbsent    RhelRpmOstreeState = "absent"
	RhelRpmOstreeStateInstalled RhelRpmOstreeState = "installed"
	RhelRpmOstreeStateLatest    RhelRpmOstreeState = "latest"
	RhelRpmOstreeStatePresent   RhelRpmOstreeState = "present"
	RhelRpmOstreeStateRemoved   RhelRpmOstreeState = "removed"
)

// Convert a supported type to an optional (pointer) RhelRpmOstreeState
func OptionalRhelRpmOstreeState[T interface {
	*RhelRpmOstreeState | RhelRpmOstreeState | *string | string
}](s T) *RhelRpmOstreeState {
	switch v := any(s).(type) {
	case *RhelRpmOstreeState:
		return v
	case RhelRpmOstreeState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := RhelRpmOstreeState(*v)
		return &val
	case string:
		val := RhelRpmOstreeState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `rhel_rpm_ostree` Ansible module.
type RhelRpmOstreeParameters struct {
	// A package name or package specifier with version, like `name-1.0`.
	// Comparison operators for package version are valid here `>`, `<`, `>=`,
	// `<=`. Example - `name>=1.0`.
	// If a previous version is specified, the task also needs to turn
	// `allow_downgrade` on. See the `allow_downgrade` documentation for caveats
	// with downgrading packages.
	// When using `state=latest`, this can be `'*'` which means run `yum -y
	// update`.
	// You can also pass a url or a local path to a rpm file (using
	// `state=present`). To operate on several packages this can accept a comma
	// separated string of packages or (as of 2.0) a list of packages.
	// default: []
	Name *[]string `json:"name,omitempty"`

	// Whether to install (`present` or `installed`, `latest`), or remove (`absent`
	// or `removed`) a package.
	// `present` and `installed` will simply ensure that a desired package is
	// installed.
	// `latest` will update the specified package if it's not of the latest
	// available version.
	// `absent` and `removed` will remove the specified package.
	// Default is `null`, however in effect the default action is `present` unless
	// the `autoremove` option is enabled for this module, then `absent` is
	// inferred.
	State *RhelRpmOstreeState `json:"state,omitempty"`
}

// Wrap the `RhelRpmOstreeParameters into an `rpc.RPCCall`.
func (p RhelRpmOstreeParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: RhelRpmOstreeName,
			Args: args,
		},
	}, nil
}

// Return values for the `rhel_rpm_ostree` Ansible module.
type RhelRpmOstreeReturn struct {
	AnsibleCommonReturns

	// status of rpm transaction
	Msg *string `json:"msg,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `RhelRpmOstreeReturn`
func RhelRpmOstreeReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (RhelRpmOstreeReturn, error) {
	return rpc.AnyToJSONT[RhelRpmOstreeReturn](r.Result.Result)
}
