// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// This module can be used to manage Kibana plugins.
const KibanaPluginName = "kibana_plugin"

// Desired state of a plugin.
type KibanaPluginState string

const (
	KibanaPluginStatePresent KibanaPluginState = "present"
	KibanaPluginStateAbsent  KibanaPluginState = "absent"
)

// Convert a supported type to an optional (pointer) KibanaPluginState
func OptionalKibanaPluginState[T interface {
	*KibanaPluginState | KibanaPluginState | *string | string
}](s T) *KibanaPluginState {
	switch v := any(s).(type) {
	case *KibanaPluginState:
		return v
	case KibanaPluginState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := KibanaPluginState(*v)
		return &val
	case string:
		val := KibanaPluginState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `kibana_plugin` Ansible module.
type KibanaPluginParameters struct {
	// Name of the plugin to install.
	Name string `json:"name"`

	// Desired state of a plugin.
	// default: KibanaPluginStatePresent
	State *KibanaPluginState `json:"state,omitempty"`

	// Set exact URL to download the plugin from.
	// For local file, prefix its absolute path with `file://`.
	Url *string `json:"url,omitempty"`

	// Timeout setting: `30s`, `1m`, `1h` and so on.
	// default: "1m"
	Timeout *string `json:"timeout,omitempty"`

	// Location of the Kibana binary.
	// default: "/opt/kibana/bin/kibana"
	PluginBin *string `json:"plugin_bin,omitempty"`

	// Your configured plugin directory specified in Kibana.
	// default: "/opt/kibana/installedPlugins/"
	PluginDir *string `json:"plugin_dir,omitempty"`

	// Version of the plugin to be installed.
	// If plugin exists with previous version, plugin will `not` be updated unless
	// `force` is set to `true`.
	Version *string `json:"version,omitempty"`

	// Delete and re-install the plugin. Can be useful for plugins update.
	// default: false
	Force *bool `json:"force,omitempty"`

	// Whether to allow `kibana` and `kibana-plugin` to be run as root. Passes the
	// `--allow-root` flag to these commands.
	// default: false
	AllowRoot *bool `json:"allow_root,omitempty"`
}

// Wrap the `KibanaPluginParameters into an `rpc.RPCCall`.
func (p KibanaPluginParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: KibanaPluginName,
			Args: args,
		},
	}, nil
}

// Return values for the `kibana_plugin` Ansible module.
type KibanaPluginReturn struct {
	AnsibleCommonReturns

	// The launched command during plugin management (install / remove).
	Cmd *string `json:"cmd,omitempty"`

	// The plugin name to install or remove.
	Name *string `json:"name,omitempty"`

	// The URL from where the plugin is installed from.
	Url *string `json:"url,omitempty"`

	// The timeout for plugin download.
	Timeout *string `json:"timeout,omitempty"`

	// The command stdout.
	Stdout *string `json:"stdout,omitempty"`

	// The command stderr.
	Stderr *string `json:"stderr,omitempty"`

	// The state for the managed plugin.
	State *string `json:"state,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `KibanaPluginReturn`
func KibanaPluginReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (KibanaPluginReturn, error) {
	return cast.AnyToJSONT[KibanaPluginReturn](r.Result.Result)
}
