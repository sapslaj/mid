// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Manages MacPorts packages (ports).
const MacportsName = "macports"

// Indicates the desired state of the port.
type MacportsState string

const (
	MacportsStatePresent   MacportsState = "present"
	MacportsStateAbsent    MacportsState = "absent"
	MacportsStateActive    MacportsState = "active"
	MacportsStateInactive  MacportsState = "inactive"
	MacportsStateInstalled MacportsState = "installed"
	MacportsStateRemoved   MacportsState = "removed"
)

// Convert a supported type to an optional (pointer) MacportsState
func OptionalMacportsState[T interface {
	*MacportsState | MacportsState | *string | string
}](s T) *MacportsState {
	switch v := any(s).(type) {
	case *MacportsState:
		return v
	case MacportsState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := MacportsState(*v)
		return &val
	case string:
		val := MacportsState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `macports` Ansible module.
type MacportsParameters struct {
	// A list of port names.
	Name *[]string `json:"name,omitempty"`

	// Update Macports and the ports tree, either prior to installing ports or as a
	// separate step.
	// Equivalent to running `port selfupdate`.
	// default: false
	Selfupdate *bool `json:"selfupdate,omitempty"`

	// Indicates the desired state of the port.
	// default: MacportsStatePresent
	State *MacportsState `json:"state,omitempty"`

	// Upgrade all outdated ports, either prior to installing ports or as a
	// separate step.
	// Equivalent to running `port upgrade outdated`.
	// default: false
	Upgrade *bool `json:"upgrade,omitempty"`

	// A port variant specification.
	// `variant` is only supported with `state=installed` and `state=present`.
	Variant *string `json:"variant,omitempty"`
}

// Wrap the `MacportsParameters into an `rpc.RPCCall`.
func (p MacportsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: MacportsName,
			Args: args,
		},
	}, nil
}

// Return values for the `macports` Ansible module.
type MacportsReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `MacportsReturn`
func MacportsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (MacportsReturn, error) {
	return cast.AnyToJSONT[MacportsReturn](r.Result.Result)
}
