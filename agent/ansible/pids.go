// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Retrieves a list of PIDs of given process name in Ansible
// controller/controlled machines. Returns an empty list if no process in that
// name exists.
const PidsName = "pids"

// Parameters for the `pids` Ansible module.
type PidsParameters struct {
	// The name of the process(es) you want to get PI`s` for.
	Name *string `json:"name,omitempty"`

	// The pattern (regular expression) to match the process(es) you want to get
	// PI`s` for.
	Pattern *string `json:"pattern,omitempty"`

	// Ignore case in pattern if using the `pattern` option.
	// default: false
	IgnoreCase *bool `json:"ignore_case,omitempty"`
}

// Wrap the `PidsParameters into an `rpc.RPCCall`.
func (p *PidsParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: PidsName,
			Args: args,
		},
	}, nil
}

// Return values for the `pids` Ansible module.
type PidsReturn struct {
	AnsibleCommonReturns

	// Process IDs of the given process.
	Pids *[]any `json:"pids,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `PidsReturn`
func PidsReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (PidsReturn, error) {
	return rpc.AnyToJSONT[PidsReturn](r.Result.Result)
}
