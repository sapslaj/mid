// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sapslaj/mid/sdk/go/mid/internal"
)

var _ = internal.GetEnvOrDefault

// Instructions for how to connect to a remote endpoint.
type Connection struct {
	// The address of the resource to connect to.
	Host    *string `pulumi:"host"`
	HostKey *string `pulumi:"hostKey"`
	// The password we should use for the connection.
	Password       *string `pulumi:"password"`
	PerDialTimeout *int    `pulumi:"perDialTimeout"`
	// The port to connect to. Defaults to 22.
	Port *float64 `pulumi:"port"`
	// The contents of an SSH key to use for the
	// connection. This takes preference over the password if provided.
	PrivateKey         *string `pulumi:"privateKey"`
	PrivateKeyPassword *string `pulumi:"privateKeyPassword"`
	SshAgent           *bool   `pulumi:"sshAgent"`
	SshAgentSocketPath *string `pulumi:"sshAgentSocketPath"`
	// The user that we should use for the connection.
	User *string `pulumi:"user"`
}

// Defaults sets the appropriate defaults for Connection
func (val *Connection) Defaults() *Connection {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Port == nil {
		port_ := 22.0
		tmp.Port = &port_
	}
	if tmp.User == nil {
		user_ := "root"
		tmp.User = &user_
	}
	return &tmp
}

// ConnectionInput is an input type that accepts ConnectionArgs and ConnectionOutput values.
// You can construct a concrete instance of `ConnectionInput` via:
//
//	ConnectionArgs{...}
type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(context.Context) ConnectionOutput
}

// Instructions for how to connect to a remote endpoint.
type ConnectionArgs struct {
	// The address of the resource to connect to.
	Host    pulumi.StringPtrInput `pulumi:"host"`
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// The password we should use for the connection.
	Password       pulumi.StringPtrInput `pulumi:"password"`
	PerDialTimeout pulumi.IntPtrInput    `pulumi:"perDialTimeout"`
	// The port to connect to. Defaults to 22.
	Port pulumi.Float64PtrInput `pulumi:"port"`
	// The contents of an SSH key to use for the
	// connection. This takes preference over the password if provided.
	PrivateKey         pulumi.StringPtrInput `pulumi:"privateKey"`
	PrivateKeyPassword pulumi.StringPtrInput `pulumi:"privateKeyPassword"`
	SshAgent           pulumi.BoolPtrInput   `pulumi:"sshAgent"`
	SshAgentSocketPath pulumi.StringPtrInput `pulumi:"sshAgentSocketPath"`
	// The user that we should use for the connection.
	User pulumi.StringPtrInput `pulumi:"user"`
}

// Defaults sets the appropriate defaults for ConnectionArgs
func (val *ConnectionArgs) Defaults() *ConnectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Port == nil {
		tmp.Port = pulumi.Float64Ptr(22.0)
	}
	if tmp.User == nil {
		tmp.User = pulumi.StringPtr("root")
	}
	return &tmp
}
func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (i ConnectionArgs) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i ConnectionArgs) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

func (i ConnectionArgs) ToConnectionPtrOutput() ConnectionPtrOutput {
	return i.ToConnectionPtrOutputWithContext(context.Background())
}

func (i ConnectionArgs) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput).ToConnectionPtrOutputWithContext(ctx)
}

// ConnectionPtrInput is an input type that accepts ConnectionArgs, ConnectionPtr and ConnectionPtrOutput values.
// You can construct a concrete instance of `ConnectionPtrInput` via:
//
//	        ConnectionArgs{...}
//
//	or:
//
//	        nil
type ConnectionPtrInput interface {
	pulumi.Input

	ToConnectionPtrOutput() ConnectionPtrOutput
	ToConnectionPtrOutputWithContext(context.Context) ConnectionPtrOutput
}

type connectionPtrType ConnectionArgs

func ConnectionPtr(v *ConnectionArgs) ConnectionPtrInput {
	return (*connectionPtrType)(v)
}

func (*connectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *connectionPtrType) ToConnectionPtrOutput() ConnectionPtrOutput {
	return i.ToConnectionPtrOutputWithContext(context.Background())
}

func (i *connectionPtrType) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPtrOutput)
}

// Instructions for how to connect to a remote endpoint.
type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionPtrOutput() ConnectionPtrOutput {
	return o.ToConnectionPtrOutputWithContext(context.Background())
}

func (o ConnectionOutput) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Connection) *Connection {
		return &v
	}).(ConnectionPtrOutput)
}

// The address of the resource to connect to.
func (o ConnectionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o ConnectionOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// The password we should use for the connection.
func (o ConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ConnectionOutput) PerDialTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Connection) *int { return v.PerDialTimeout }).(pulumi.IntPtrOutput)
}

// The port to connect to. Defaults to 22.
func (o ConnectionOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Connection) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

// The contents of an SSH key to use for the
// connection. This takes preference over the password if provided.
func (o ConnectionOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o ConnectionOutput) PrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.PrivateKeyPassword }).(pulumi.StringPtrOutput)
}

func (o ConnectionOutput) SshAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Connection) *bool { return v.SshAgent }).(pulumi.BoolPtrOutput)
}

func (o ConnectionOutput) SshAgentSocketPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.SshAgentSocketPath }).(pulumi.StringPtrOutput)
}

// The user that we should use for the connection.
func (o ConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Connection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ConnectionPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionPtrOutput) ToConnectionPtrOutput() ConnectionPtrOutput {
	return o
}

func (o ConnectionPtrOutput) ToConnectionPtrOutputWithContext(ctx context.Context) ConnectionPtrOutput {
	return o
}

func (o ConnectionPtrOutput) Elem() ConnectionOutput {
	return o.ApplyT(func(v *Connection) Connection {
		if v != nil {
			return *v
		}
		var ret Connection
		return ret
	}).(ConnectionOutput)
}

// The address of the resource to connect to.
func (o ConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

// The password we should use for the connection.
func (o ConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionPtrOutput) PerDialTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) *int {
		if v == nil {
			return nil
		}
		return v.PerDialTimeout
	}).(pulumi.IntPtrOutput)
}

// The port to connect to. Defaults to 22.
func (o ConnectionPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Connection) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

// The contents of an SSH key to use for the
// connection. This takes preference over the password if provided.
func (o ConnectionPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionPtrOutput) PrivateKeyPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyPassword
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionPtrOutput) SshAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) *bool {
		if v == nil {
			return nil
		}
		return v.SshAgent
	}).(pulumi.BoolPtrOutput)
}

func (o ConnectionPtrOutput) SshAgentSocketPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.SshAgentSocketPath
	}).(pulumi.StringPtrOutput)
}

// The user that we should use for the connection.
func (o ConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

type ExecCommand struct {
	// List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
	Command []string `pulumi:"command"`
	// Directory path to chdir to before executing the command. Defaults to the
	// default working directory for the SSH user and session, usually the user's
	// home.
	Dir *string `pulumi:"dir"`
	// Key-value pairs of environment variables to pass to the process. These are
	// merged with any system-wide environment variables.
	Environment map[string]string `pulumi:"environment"`
	// Pass a string to the command's process as standard in.
	Stdin *string `pulumi:"stdin"`
}

// ExecCommandInput is an input type that accepts ExecCommandArgs and ExecCommandOutput values.
// You can construct a concrete instance of `ExecCommandInput` via:
//
//	ExecCommandArgs{...}
type ExecCommandInput interface {
	pulumi.Input

	ToExecCommandOutput() ExecCommandOutput
	ToExecCommandOutputWithContext(context.Context) ExecCommandOutput
}

type ExecCommandArgs struct {
	// List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Directory path to chdir to before executing the command. Defaults to the
	// default working directory for the SSH user and session, usually the user's
	// home.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Key-value pairs of environment variables to pass to the process. These are
	// merged with any system-wide environment variables.
	Environment pulumi.StringMapInput `pulumi:"environment"`
	// Pass a string to the command's process as standard in.
	Stdin pulumi.StringPtrInput `pulumi:"stdin"`
}

func (ExecCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecCommand)(nil)).Elem()
}

func (i ExecCommandArgs) ToExecCommandOutput() ExecCommandOutput {
	return i.ToExecCommandOutputWithContext(context.Background())
}

func (i ExecCommandArgs) ToExecCommandOutputWithContext(ctx context.Context) ExecCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecCommandOutput)
}

func (i ExecCommandArgs) ToExecCommandPtrOutput() ExecCommandPtrOutput {
	return i.ToExecCommandPtrOutputWithContext(context.Background())
}

func (i ExecCommandArgs) ToExecCommandPtrOutputWithContext(ctx context.Context) ExecCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecCommandOutput).ToExecCommandPtrOutputWithContext(ctx)
}

// ExecCommandPtrInput is an input type that accepts ExecCommandArgs, ExecCommandPtr and ExecCommandPtrOutput values.
// You can construct a concrete instance of `ExecCommandPtrInput` via:
//
//	        ExecCommandArgs{...}
//
//	or:
//
//	        nil
type ExecCommandPtrInput interface {
	pulumi.Input

	ToExecCommandPtrOutput() ExecCommandPtrOutput
	ToExecCommandPtrOutputWithContext(context.Context) ExecCommandPtrOutput
}

type execCommandPtrType ExecCommandArgs

func ExecCommandPtr(v *ExecCommandArgs) ExecCommandPtrInput {
	return (*execCommandPtrType)(v)
}

func (*execCommandPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecCommand)(nil)).Elem()
}

func (i *execCommandPtrType) ToExecCommandPtrOutput() ExecCommandPtrOutput {
	return i.ToExecCommandPtrOutputWithContext(context.Background())
}

func (i *execCommandPtrType) ToExecCommandPtrOutputWithContext(ctx context.Context) ExecCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecCommandPtrOutput)
}

type ExecCommandOutput struct{ *pulumi.OutputState }

func (ExecCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecCommand)(nil)).Elem()
}

func (o ExecCommandOutput) ToExecCommandOutput() ExecCommandOutput {
	return o
}

func (o ExecCommandOutput) ToExecCommandOutputWithContext(ctx context.Context) ExecCommandOutput {
	return o
}

func (o ExecCommandOutput) ToExecCommandPtrOutput() ExecCommandPtrOutput {
	return o.ToExecCommandPtrOutputWithContext(context.Background())
}

func (o ExecCommandOutput) ToExecCommandPtrOutputWithContext(ctx context.Context) ExecCommandPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecCommand) *ExecCommand {
		return &v
	}).(ExecCommandPtrOutput)
}

// List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
func (o ExecCommandOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecCommand) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Directory path to chdir to before executing the command. Defaults to the
// default working directory for the SSH user and session, usually the user's
// home.
func (o ExecCommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecCommand) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Key-value pairs of environment variables to pass to the process. These are
// merged with any system-wide environment variables.
func (o ExecCommandOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExecCommand) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

// Pass a string to the command's process as standard in.
func (o ExecCommandOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecCommand) *string { return v.Stdin }).(pulumi.StringPtrOutput)
}

type ExecCommandPtrOutput struct{ *pulumi.OutputState }

func (ExecCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecCommand)(nil)).Elem()
}

func (o ExecCommandPtrOutput) ToExecCommandPtrOutput() ExecCommandPtrOutput {
	return o
}

func (o ExecCommandPtrOutput) ToExecCommandPtrOutputWithContext(ctx context.Context) ExecCommandPtrOutput {
	return o
}

func (o ExecCommandPtrOutput) Elem() ExecCommandOutput {
	return o.ApplyT(func(v *ExecCommand) ExecCommand {
		if v != nil {
			return *v
		}
		var ret ExecCommand
		return ret
	}).(ExecCommandOutput)
}

// List of arguments to execute. Under the hood, these are passed to `execve`, bypassing any shell
func (o ExecCommandPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExecCommand) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Directory path to chdir to before executing the command. Defaults to the
// default working directory for the SSH user and session, usually the user's
// home.
func (o ExecCommandPtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecCommand) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// Key-value pairs of environment variables to pass to the process. These are
// merged with any system-wide environment variables.
func (o ExecCommandPtrOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExecCommand) map[string]string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringMapOutput)
}

// Pass a string to the command's process as standard in.
func (o ExecCommandPtrOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecCommand) *string {
		if v == nil {
			return nil
		}
		return v.Stdin
	}).(pulumi.StringPtrOutput)
}

type FileStatFileMode struct {
	Int       int    `pulumi:"int"`
	IsDir     bool   `pulumi:"isDir"`
	IsRegular bool   `pulumi:"isRegular"`
	Octal     string `pulumi:"octal"`
	String    string `pulumi:"string"`
}

type FileStatFileModeOutput struct{ *pulumi.OutputState }

func (FileStatFileModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileStatFileMode)(nil)).Elem()
}

func (o FileStatFileModeOutput) ToFileStatFileModeOutput() FileStatFileModeOutput {
	return o
}

func (o FileStatFileModeOutput) ToFileStatFileModeOutputWithContext(ctx context.Context) FileStatFileModeOutput {
	return o
}

func (o FileStatFileModeOutput) Int() pulumi.IntOutput {
	return o.ApplyT(func(v FileStatFileMode) int { return v.Int }).(pulumi.IntOutput)
}

func (o FileStatFileModeOutput) IsDir() pulumi.BoolOutput {
	return o.ApplyT(func(v FileStatFileMode) bool { return v.IsDir }).(pulumi.BoolOutput)
}

func (o FileStatFileModeOutput) IsRegular() pulumi.BoolOutput {
	return o.ApplyT(func(v FileStatFileMode) bool { return v.IsRegular }).(pulumi.BoolOutput)
}

func (o FileStatFileModeOutput) Octal() pulumi.StringOutput {
	return o.ApplyT(func(v FileStatFileMode) string { return v.Octal }).(pulumi.StringOutput)
}

func (o FileStatFileModeOutput) String() pulumi.StringOutput {
	return o.ApplyT(func(v FileStatFileMode) string { return v.String }).(pulumi.StringOutput)
}

type FileStatFileModePtrOutput struct{ *pulumi.OutputState }

func (FileStatFileModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileStatFileMode)(nil)).Elem()
}

func (o FileStatFileModePtrOutput) ToFileStatFileModePtrOutput() FileStatFileModePtrOutput {
	return o
}

func (o FileStatFileModePtrOutput) ToFileStatFileModePtrOutputWithContext(ctx context.Context) FileStatFileModePtrOutput {
	return o
}

func (o FileStatFileModePtrOutput) Elem() FileStatFileModeOutput {
	return o.ApplyT(func(v *FileStatFileMode) FileStatFileMode {
		if v != nil {
			return *v
		}
		var ret FileStatFileMode
		return ret
	}).(FileStatFileModeOutput)
}

func (o FileStatFileModePtrOutput) Int() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileStatFileMode) *int {
		if v == nil {
			return nil
		}
		return &v.Int
	}).(pulumi.IntPtrOutput)
}

func (o FileStatFileModePtrOutput) IsDir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileStatFileMode) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDir
	}).(pulumi.BoolPtrOutput)
}

func (o FileStatFileModePtrOutput) IsRegular() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileStatFileMode) *bool {
		if v == nil {
			return nil
		}
		return &v.IsRegular
	}).(pulumi.BoolPtrOutput)
}

func (o FileStatFileModePtrOutput) Octal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileStatFileMode) *string {
		if v == nil {
			return nil
		}
		return &v.Octal
	}).(pulumi.StringPtrOutput)
}

func (o FileStatFileModePtrOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileStatFileMode) *string {
		if v == nil {
			return nil
		}
		return &v.String
	}).(pulumi.StringPtrOutput)
}

type FileStatState struct {
	AccessTime     *string           `pulumi:"accessTime"`
	BaseName       *string           `pulumi:"baseName"`
	CreateTime     *string           `pulumi:"createTime"`
	Dev            *int              `pulumi:"dev"`
	Exists         bool              `pulumi:"exists"`
	FileMode       *FileStatFileMode `pulumi:"fileMode"`
	Gid            *int              `pulumi:"gid"`
	GroupName      *string           `pulumi:"groupName"`
	Inode          *int              `pulumi:"inode"`
	ModifiedTime   *string           `pulumi:"modifiedTime"`
	Nlink          *int              `pulumi:"nlink"`
	Sha256Checksum *string           `pulumi:"sha256Checksum"`
	Size           *int              `pulumi:"size"`
	Uid            *int              `pulumi:"uid"`
	UserName       *string           `pulumi:"userName"`
}

type FileStatStateOutput struct{ *pulumi.OutputState }

func (FileStatStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileStatState)(nil)).Elem()
}

func (o FileStatStateOutput) ToFileStatStateOutput() FileStatStateOutput {
	return o
}

func (o FileStatStateOutput) ToFileStatStateOutputWithContext(ctx context.Context) FileStatStateOutput {
	return o
}

func (o FileStatStateOutput) AccessTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.AccessTime }).(pulumi.StringPtrOutput)
}

func (o FileStatStateOutput) BaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.BaseName }).(pulumi.StringPtrOutput)
}

func (o FileStatStateOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

func (o FileStatStateOutput) Dev() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileStatState) *int { return v.Dev }).(pulumi.IntPtrOutput)
}

func (o FileStatStateOutput) Exists() pulumi.BoolOutput {
	return o.ApplyT(func(v FileStatState) bool { return v.Exists }).(pulumi.BoolOutput)
}

func (o FileStatStateOutput) FileMode() FileStatFileModePtrOutput {
	return o.ApplyT(func(v FileStatState) *FileStatFileMode { return v.FileMode }).(FileStatFileModePtrOutput)
}

func (o FileStatStateOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileStatState) *int { return v.Gid }).(pulumi.IntPtrOutput)
}

func (o FileStatStateOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o FileStatStateOutput) Inode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileStatState) *int { return v.Inode }).(pulumi.IntPtrOutput)
}

func (o FileStatStateOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.ModifiedTime }).(pulumi.StringPtrOutput)
}

func (o FileStatStateOutput) Nlink() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileStatState) *int { return v.Nlink }).(pulumi.IntPtrOutput)
}

func (o FileStatStateOutput) Sha256Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.Sha256Checksum }).(pulumi.StringPtrOutput)
}

func (o FileStatStateOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileStatState) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o FileStatStateOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileStatState) *int { return v.Uid }).(pulumi.IntPtrOutput)
}

func (o FileStatStateOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileStatState) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ResourceConfig struct {
	Check             *bool `pulumi:"check"`
	DeleteUnreachable *bool `pulumi:"deleteUnreachable"`
	Parallel          *int  `pulumi:"parallel"`
}

// ResourceConfigInput is an input type that accepts ResourceConfigArgs and ResourceConfigOutput values.
// You can construct a concrete instance of `ResourceConfigInput` via:
//
//	ResourceConfigArgs{...}
type ResourceConfigInput interface {
	pulumi.Input

	ToResourceConfigOutput() ResourceConfigOutput
	ToResourceConfigOutputWithContext(context.Context) ResourceConfigOutput
}

type ResourceConfigArgs struct {
	Check             pulumi.BoolPtrInput `pulumi:"check"`
	DeleteUnreachable pulumi.BoolPtrInput `pulumi:"deleteUnreachable"`
	Parallel          pulumi.IntPtrInput  `pulumi:"parallel"`
}

func (ResourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfig)(nil)).Elem()
}

func (i ResourceConfigArgs) ToResourceConfigOutput() ResourceConfigOutput {
	return i.ToResourceConfigOutputWithContext(context.Background())
}

func (i ResourceConfigArgs) ToResourceConfigOutputWithContext(ctx context.Context) ResourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigOutput)
}

func (i ResourceConfigArgs) ToResourceConfigPtrOutput() ResourceConfigPtrOutput {
	return i.ToResourceConfigPtrOutputWithContext(context.Background())
}

func (i ResourceConfigArgs) ToResourceConfigPtrOutputWithContext(ctx context.Context) ResourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigOutput).ToResourceConfigPtrOutputWithContext(ctx)
}

// ResourceConfigPtrInput is an input type that accepts ResourceConfigArgs, ResourceConfigPtr and ResourceConfigPtrOutput values.
// You can construct a concrete instance of `ResourceConfigPtrInput` via:
//
//	        ResourceConfigArgs{...}
//
//	or:
//
//	        nil
type ResourceConfigPtrInput interface {
	pulumi.Input

	ToResourceConfigPtrOutput() ResourceConfigPtrOutput
	ToResourceConfigPtrOutputWithContext(context.Context) ResourceConfigPtrOutput
}

type resourceConfigPtrType ResourceConfigArgs

func ResourceConfigPtr(v *ResourceConfigArgs) ResourceConfigPtrInput {
	return (*resourceConfigPtrType)(v)
}

func (*resourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfig)(nil)).Elem()
}

func (i *resourceConfigPtrType) ToResourceConfigPtrOutput() ResourceConfigPtrOutput {
	return i.ToResourceConfigPtrOutputWithContext(context.Background())
}

func (i *resourceConfigPtrType) ToResourceConfigPtrOutputWithContext(ctx context.Context) ResourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigPtrOutput)
}

type ResourceConfigOutput struct{ *pulumi.OutputState }

func (ResourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfig)(nil)).Elem()
}

func (o ResourceConfigOutput) ToResourceConfigOutput() ResourceConfigOutput {
	return o
}

func (o ResourceConfigOutput) ToResourceConfigOutputWithContext(ctx context.Context) ResourceConfigOutput {
	return o
}

func (o ResourceConfigOutput) ToResourceConfigPtrOutput() ResourceConfigPtrOutput {
	return o.ToResourceConfigPtrOutputWithContext(context.Background())
}

func (o ResourceConfigOutput) ToResourceConfigPtrOutputWithContext(ctx context.Context) ResourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceConfig) *ResourceConfig {
		return &v
	}).(ResourceConfigPtrOutput)
}

func (o ResourceConfigOutput) Check() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceConfig) *bool { return v.Check }).(pulumi.BoolPtrOutput)
}

func (o ResourceConfigOutput) DeleteUnreachable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceConfig) *bool { return v.DeleteUnreachable }).(pulumi.BoolPtrOutput)
}

func (o ResourceConfigOutput) Parallel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceConfig) *int { return v.Parallel }).(pulumi.IntPtrOutput)
}

type ResourceConfigPtrOutput struct{ *pulumi.OutputState }

func (ResourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfig)(nil)).Elem()
}

func (o ResourceConfigPtrOutput) ToResourceConfigPtrOutput() ResourceConfigPtrOutput {
	return o
}

func (o ResourceConfigPtrOutput) ToResourceConfigPtrOutputWithContext(ctx context.Context) ResourceConfigPtrOutput {
	return o
}

func (o ResourceConfigPtrOutput) Elem() ResourceConfigOutput {
	return o.ApplyT(func(v *ResourceConfig) ResourceConfig {
		if v != nil {
			return *v
		}
		var ret ResourceConfig
		return ret
	}).(ResourceConfigOutput)
}

func (o ResourceConfigPtrOutput) Check() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Check
	}).(pulumi.BoolPtrOutput)
}

func (o ResourceConfigPtrOutput) DeleteUnreachable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteUnreachable
	}).(pulumi.BoolPtrOutput)
}

func (o ResourceConfigPtrOutput) Parallel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallel
	}).(pulumi.IntPtrOutput)
}

type TriggersInput struct {
	// Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
	// any value in this list changes.
	Refresh []interface{} `pulumi:"refresh"`
	// Completely delete and replace the resource if any value in this list
	// changes.
	Replace []interface{} `pulumi:"replace"`
}

// TriggersInputInput is an input type that accepts TriggersInputArgs and TriggersInputOutput values.
// You can construct a concrete instance of `TriggersInputInput` via:
//
//	TriggersInputArgs{...}
type TriggersInputInput interface {
	pulumi.Input

	ToTriggersInputOutput() TriggersInputOutput
	ToTriggersInputOutputWithContext(context.Context) TriggersInputOutput
}

type TriggersInputArgs struct {
	// Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
	// any value in this list changes.
	Refresh pulumi.ArrayInput `pulumi:"refresh"`
	// Completely delete and replace the resource if any value in this list
	// changes.
	Replace pulumi.ArrayInput `pulumi:"replace"`
}

func (TriggersInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggersInput)(nil)).Elem()
}

func (i TriggersInputArgs) ToTriggersInputOutput() TriggersInputOutput {
	return i.ToTriggersInputOutputWithContext(context.Background())
}

func (i TriggersInputArgs) ToTriggersInputOutputWithContext(ctx context.Context) TriggersInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggersInputOutput)
}

func (i TriggersInputArgs) ToTriggersInputPtrOutput() TriggersInputPtrOutput {
	return i.ToTriggersInputPtrOutputWithContext(context.Background())
}

func (i TriggersInputArgs) ToTriggersInputPtrOutputWithContext(ctx context.Context) TriggersInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggersInputOutput).ToTriggersInputPtrOutputWithContext(ctx)
}

// TriggersInputPtrInput is an input type that accepts TriggersInputArgs, TriggersInputPtr and TriggersInputPtrOutput values.
// You can construct a concrete instance of `TriggersInputPtrInput` via:
//
//	        TriggersInputArgs{...}
//
//	or:
//
//	        nil
type TriggersInputPtrInput interface {
	pulumi.Input

	ToTriggersInputPtrOutput() TriggersInputPtrOutput
	ToTriggersInputPtrOutputWithContext(context.Context) TriggersInputPtrOutput
}

type triggersInputPtrType TriggersInputArgs

func TriggersInputPtr(v *TriggersInputArgs) TriggersInputPtrInput {
	return (*triggersInputPtrType)(v)
}

func (*triggersInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggersInput)(nil)).Elem()
}

func (i *triggersInputPtrType) ToTriggersInputPtrOutput() TriggersInputPtrOutput {
	return i.ToTriggersInputPtrOutputWithContext(context.Background())
}

func (i *triggersInputPtrType) ToTriggersInputPtrOutputWithContext(ctx context.Context) TriggersInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggersInputPtrOutput)
}

type TriggersInputOutput struct{ *pulumi.OutputState }

func (TriggersInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggersInput)(nil)).Elem()
}

func (o TriggersInputOutput) ToTriggersInputOutput() TriggersInputOutput {
	return o
}

func (o TriggersInputOutput) ToTriggersInputOutputWithContext(ctx context.Context) TriggersInputOutput {
	return o
}

func (o TriggersInputOutput) ToTriggersInputPtrOutput() TriggersInputPtrOutput {
	return o.ToTriggersInputPtrOutputWithContext(context.Background())
}

func (o TriggersInputOutput) ToTriggersInputPtrOutputWithContext(ctx context.Context) TriggersInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggersInput) *TriggersInput {
		return &v
	}).(TriggersInputPtrOutput)
}

// Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
// any value in this list changes.
func (o TriggersInputOutput) Refresh() pulumi.ArrayOutput {
	return o.ApplyT(func(v TriggersInput) []interface{} { return v.Refresh }).(pulumi.ArrayOutput)
}

// Completely delete and replace the resource if any value in this list
// changes.
func (o TriggersInputOutput) Replace() pulumi.ArrayOutput {
	return o.ApplyT(func(v TriggersInput) []interface{} { return v.Replace }).(pulumi.ArrayOutput)
}

type TriggersInputPtrOutput struct{ *pulumi.OutputState }

func (TriggersInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggersInput)(nil)).Elem()
}

func (o TriggersInputPtrOutput) ToTriggersInputPtrOutput() TriggersInputPtrOutput {
	return o
}

func (o TriggersInputPtrOutput) ToTriggersInputPtrOutputWithContext(ctx context.Context) TriggersInputPtrOutput {
	return o
}

func (o TriggersInputPtrOutput) Elem() TriggersInputOutput {
	return o.ApplyT(func(v *TriggersInput) TriggersInput {
		if v != nil {
			return *v
		}
		var ret TriggersInput
		return ret
	}).(TriggersInputOutput)
}

// Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
// any value in this list changes.
func (o TriggersInputPtrOutput) Refresh() pulumi.ArrayOutput {
	return o.ApplyT(func(v *TriggersInput) []interface{} {
		if v == nil {
			return nil
		}
		return v.Refresh
	}).(pulumi.ArrayOutput)
}

// Completely delete and replace the resource if any value in this list
// changes.
func (o TriggersInputPtrOutput) Replace() pulumi.ArrayOutput {
	return o.ApplyT(func(v *TriggersInput) []interface{} {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.ArrayOutput)
}

type TriggersOutput struct {
	// RFC 3339 timestamp of when this resource last changed. Use this property
	// to chain into other resources' `refresh` and `replace` triggers.
	LastChanged string `pulumi:"lastChanged"`
	// Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
	// any value in this list changes.
	Refresh []interface{} `pulumi:"refresh"`
	// Completely delete and replace the resource if any value in this list
	// changes.
	Replace []interface{} `pulumi:"replace"`
}

type TriggersOutputOutput struct{ *pulumi.OutputState }

func (TriggersOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggersOutput)(nil)).Elem()
}

func (o TriggersOutputOutput) ToTriggersOutputOutput() TriggersOutputOutput {
	return o
}

func (o TriggersOutputOutput) ToTriggersOutputOutputWithContext(ctx context.Context) TriggersOutputOutput {
	return o
}

// RFC 3339 timestamp of when this resource last changed. Use this property
// to chain into other resources' `refresh` and `replace` triggers.
func (o TriggersOutputOutput) LastChanged() pulumi.StringOutput {
	return o.ApplyT(func(v TriggersOutput) string { return v.LastChanged }).(pulumi.StringOutput)
}

// Run any "refresh" operations (e.g. service restarts, change diffs, etc) if
// any value in this list changes.
func (o TriggersOutputOutput) Refresh() pulumi.ArrayOutput {
	return o.ApplyT(func(v TriggersOutput) []interface{} { return v.Refresh }).(pulumi.ArrayOutput)
}

// Completely delete and replace the resource if any value in this list
// changes.
func (o TriggersOutputOutput) Replace() pulumi.ArrayOutput {
	return o.ApplyT(func(v TriggersOutput) []interface{} { return v.Replace }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), ConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPtrInput)(nil)).Elem(), ConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecCommandInput)(nil)).Elem(), ExecCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecCommandPtrInput)(nil)).Elem(), ExecCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigInput)(nil)).Elem(), ResourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigPtrInput)(nil)).Elem(), ResourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggersInputInput)(nil)).Elem(), TriggersInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggersInputPtrInput)(nil)).Elem(), TriggersInputArgs{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionPtrOutput{})
	pulumi.RegisterOutputType(ExecCommandOutput{})
	pulumi.RegisterOutputType(ExecCommandPtrOutput{})
	pulumi.RegisterOutputType(FileStatFileModeOutput{})
	pulumi.RegisterOutputType(FileStatFileModePtrOutput{})
	pulumi.RegisterOutputType(FileStatStateOutput{})
	pulumi.RegisterOutputType(ResourceConfigOutput{})
	pulumi.RegisterOutputType(ResourceConfigPtrOutput{})
	pulumi.RegisterOutputType(TriggersInputOutput{})
	pulumi.RegisterOutputType(TriggersInputPtrOutput{})
	pulumi.RegisterOutputType(TriggersOutputOutput{})
}
