# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ["AnsibleTaskListArgs", "AnsibleTaskList"]


@pulumi.input_type
class AnsibleTaskListArgs:
    def __init__(
        __self__,
        *,
        tasks: pulumi.Input["AnsibleTaskListArgsTasksArgs"],
        config: Optional[pulumi.Input["_root_inputs.ResourceConfigArgs"]] = None,
        connection: Optional[pulumi.Input["_root_inputs.ConnectionArgs"]] = None,
        triggers: Optional[pulumi.Input["_root_inputs.TriggersInputArgs"]] = None,
    ):
        """
        The set of arguments for constructing a AnsibleTaskList resource.
        """
        pulumi.set(__self__, "tasks", tasks)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> pulumi.Input["AnsibleTaskListArgsTasksArgs"]:
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: pulumi.Input["AnsibleTaskListArgsTasksArgs"]):
        pulumi.set(self, "tasks", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input["_root_inputs.ResourceConfigArgs"]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input["_root_inputs.ResourceConfigArgs"]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input["_root_inputs.ConnectionArgs"]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input["_root_inputs.ConnectionArgs"]]):
        pulumi.set(self, "connection", value)

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input["_root_inputs.TriggersInputArgs"]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input["_root_inputs.TriggersInputArgs"]]):
        pulumi.set(self, "triggers", value)


@pulumi.type_token("mid:resource:AnsibleTaskList")
class AnsibleTaskList(pulumi.CustomResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        config: Optional[
            pulumi.Input[
                Union[
                    "_root_inputs.ResourceConfigArgs",
                    "_root_inputs.ResourceConfigArgsDict",
                ]
            ]
        ] = None,
        connection: Optional[
            pulumi.Input[
                Union["_root_inputs.ConnectionArgs", "_root_inputs.ConnectionArgsDict"]
            ]
        ] = None,
        tasks: Optional[
            pulumi.Input[
                Union[
                    "AnsibleTaskListArgsTasksArgs", "AnsibleTaskListArgsTasksArgsDict"
                ]
            ]
        ] = None,
        triggers: Optional[
            pulumi.Input[
                Union[
                    "_root_inputs.TriggersInputArgs",
                    "_root_inputs.TriggersInputArgsDict",
                ]
            ]
        ] = None,
        __props__=None,
    ):
        """
        Create a AnsibleTaskList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: AnsibleTaskListArgs,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a AnsibleTaskList resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AnsibleTaskListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            AnsibleTaskListArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        config: Optional[
            pulumi.Input[
                Union[
                    "_root_inputs.ResourceConfigArgs",
                    "_root_inputs.ResourceConfigArgsDict",
                ]
            ]
        ] = None,
        connection: Optional[
            pulumi.Input[
                Union["_root_inputs.ConnectionArgs", "_root_inputs.ConnectionArgsDict"]
            ]
        ] = None,
        tasks: Optional[
            pulumi.Input[
                Union[
                    "AnsibleTaskListArgsTasksArgs", "AnsibleTaskListArgsTasksArgsDict"
                ]
            ]
        ] = None,
        triggers: Optional[
            pulumi.Input[
                Union[
                    "_root_inputs.TriggersInputArgs",
                    "_root_inputs.TriggersInputArgsDict",
                ]
            ]
        ] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = AnsibleTaskListArgs.__new__(AnsibleTaskListArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["connection"] = connection
            if tasks is None and not opts.urn:
                raise TypeError("Missing required property 'tasks'")
            __props__.__dict__["tasks"] = tasks
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["results"] = None
        super(AnsibleTaskList, __self__).__init__(
            "mid:resource:AnsibleTaskList", resource_name, __props__, opts
        )

    @staticmethod
    def get(
        resource_name: str,
        id: pulumi.Input[str],
        opts: Optional[pulumi.ResourceOptions] = None,
    ) -> "AnsibleTaskList":
        """
        Get an existing AnsibleTaskList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AnsibleTaskListArgs.__new__(AnsibleTaskListArgs)

        __props__.__dict__["config"] = None
        __props__.__dict__["connection"] = None
        __props__.__dict__["results"] = None
        __props__.__dict__["tasks"] = None
        __props__.__dict__["triggers"] = None
        return AnsibleTaskList(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional["_root_outputs.ResourceConfig"]]:
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def connection(self) -> pulumi.Output[Optional["_root_outputs.Connection"]]:
        return pulumi.get(self, "connection")

    @_builtins.property
    @pulumi.getter
    def results(self) -> pulumi.Output["outputs.AnsibleTaskListStateResults"]:
        return pulumi.get(self, "results")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> pulumi.Output["outputs.AnsibleTaskListArgsTasks"]:
        return pulumi.get(self, "tasks")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> pulumi.Output["_root_outputs.TriggersOutput"]:
        return pulumi.get(self, "triggers")
