// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const FindName = "find"

type FindParameters struct {
	Age           *string   `json:"age,omitempty"`
	Patterns      *[]string `json:"patterns,omitempty"`
	Excludes      *[]string `json:"excludes,omitempty"`
	Contains      *string   `json:"contains,omitempty"`
	ReadWholeFile *bool     `json:"read_whole_file,omitempty"`
	Paths         []string  `json:"paths"`
	FileType      *string   `json:"file_type,omitempty"`
	Recurse       *bool     `json:"recurse,omitempty"`
	Size          *string   `json:"size,omitempty"`
	AgeStamp      *string   `json:"age_stamp,omitempty"`
	Hidden        *bool     `json:"hidden,omitempty"`
	Mode          *any      `json:"mode,omitempty"`
	ExactMode     *bool     `json:"exact_mode,omitempty"`
	Follow        *bool     `json:"follow,omitempty"`
	GetChecksum   *bool     `json:"get_checksum,omitempty"`
	UseRegex      *bool     `json:"use_regex,omitempty"`
	Depth         *int      `json:"depth,omitempty"`
	Encoding      *string   `json:"encoding,omitempty"`
	Limit         *int      `json:"limit,omitempty"`
}

func (p *FindParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: FindName,
			Args: args,
		},
	}, nil
}

type FindReturn struct {
	AnsibleCommonReturns
	Files        *[]any          `json:"files,omitempty"`
	Matched      *int            `json:"matched,omitempty"`
	Examined     *int            `json:"examined,omitempty"`
	SkippedPaths *map[string]any `json:"skipped_paths,omitempty"`
}

func FindReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (FindReturn, error) {
	return rpc.AnyToJSONT[FindReturn](r.Result.Result)
}
