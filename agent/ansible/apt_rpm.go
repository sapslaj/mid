// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

// Manages packages with `apt-rpm`. Both low-level (`rpm`) and high-level (`apt-
// get`) package manager binaries required.
const AptRpmName = "apt_rpm"

// Indicates the desired package state.
// The states `latest` and `present_not_latest` have been added in
// community.general 8.6.0.
// Please note before community.general 11.0.0, `present` and `installed` were
// equivalent to `latest`. This changed in community.general 11.0.0. Now they
// are equivalent to `present_not_latest`.
type AptRpmState string

const (
	AptRpmStateAbsent           AptRpmState = "absent"
	AptRpmStatePresent          AptRpmState = "present"
	AptRpmStatePresentNotLatest AptRpmState = "present_not_latest"
	AptRpmStateInstalled        AptRpmState = "installed"
	AptRpmStateRemoved          AptRpmState = "removed"
	AptRpmStateLatest           AptRpmState = "latest"
)

// Convert a supported type to an optional (pointer) AptRpmState
func OptionalAptRpmState[T interface {
	*AptRpmState | AptRpmState | *string | string
}](s T) *AptRpmState {
	switch v := any(s).(type) {
	case *AptRpmState:
		return v
	case AptRpmState:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := AptRpmState(*v)
		return &val
	case string:
		val := AptRpmState(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `apt_rpm` Ansible module.
type AptRpmParameters struct {
	// List of packages to install, upgrade, or remove.
	// Since community.general 8.0.0, may include paths to local `.rpm` files if
	// `state=installed` or `state=present`, requires `rpm` Python module.
	Package *[]string `json:"package,omitempty"`

	// Indicates the desired package state.
	// The states `latest` and `present_not_latest` have been added in
	// community.general 8.6.0.
	// Please note before community.general 11.0.0, `present` and `installed` were
	// equivalent to `latest`. This changed in community.general 11.0.0. Now they
	// are equivalent to `present_not_latest`.
	// default: AptRpmStatePresent
	State *AptRpmState `json:"state,omitempty"`

	// Run the equivalent of `apt-get update` before the operation. Can be run as
	// part of the package installation or as a separate step.
	// Default is not to update the cache.
	// default: false
	UpdateCache *bool `json:"update_cache,omitempty"`

	// Run the equivalent of `apt-get clean` to clear out the local repository of
	// retrieved package files. It removes everything but the lock file from
	// `/var/cache/apt/archives/` and `/var/cache/apt/archives/partial/`.
	// Can be run as part of the package installation (clean runs before install)
	// or as a separate step.
	// default: false
	Clean *bool `json:"clean,omitempty"`

	// If true performs an `apt-get dist-upgrade` to upgrade system.
	// default: false
	DistUpgrade *bool `json:"dist_upgrade,omitempty"`

	// If true performs an `update-kernel` to upgrade kernel packages.
	// default: false
	UpdateKernel *bool `json:"update_kernel,omitempty"`
}

// Wrap the `AptRpmParameters into an `rpc.RPCCall`.
func (p AptRpmParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: AptRpmName,
			Args: args,
		},
	}, nil
}

// Return values for the `apt_rpm` Ansible module.
type AptRpmReturn struct {
	AnsibleCommonReturns
}

// Unwrap the `rpc.RPCResult` into an `AptRpmReturn`
func AptRpmReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (AptRpmReturn, error) {
	return rpc.AnyToJSONT[AptRpmReturn](r.Result.Result)
}
