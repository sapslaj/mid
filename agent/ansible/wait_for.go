// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const WaitForName = "wait_for"

type WaitForParameters struct {
	Host                   *string   `json:"host,omitempty"`
	Timeout                *int      `json:"timeout,omitempty"`
	ConnectTimeout         *int      `json:"connect_timeout,omitempty"`
	Delay                  *int      `json:"delay,omitempty"`
	Port                   *int      `json:"port,omitempty"`
	ActiveConnectionStates *[]string `json:"active_connection_states,omitempty"`
	State                  *string   `json:"state,omitempty"`
	Path                   *string   `json:"path,omitempty"`
	SearchRegex            *string   `json:"search_regex,omitempty"`
	ExcludeHosts           *[]string `json:"exclude_hosts,omitempty"`
	Sleep                  *int      `json:"sleep,omitempty"`
	Msg                    *string   `json:"msg,omitempty"`
}

func (p *WaitForParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: WaitForName,
			Args: args,
		},
	}, nil
}

type WaitForReturn struct {
	AnsibleCommonReturns
	Elapsed        *int            `json:"elapsed,omitempty"`
	MatchGroups    *[]any          `json:"match_groups,omitempty"`
	MatchGroupdict *map[string]any `json:"match_groupdict,omitempty"`
}

func WaitForReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (WaitForReturn, error) {
	return rpc.AnyToJSONT[WaitForReturn](r.Result.Result)
}
