// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Uses Docker Compose to start or shutdown services.
const DockerComposeV2Name = "docker_compose_v2"

// Desired state of the project.
// `present` is equivalent to running `docker compose up`.
// `stopped` is equivalent to running `docker compose stop`.
// `absent` is equivalent to running `docker compose down`.
// `restarted` is equivalent to running `docker compose restart`.
type DockerComposeV2State string

const (
	DockerComposeV2StateAbsent    DockerComposeV2State = "absent"
	DockerComposeV2StateStopped   DockerComposeV2State = "stopped"
	DockerComposeV2StateRestarted DockerComposeV2State = "restarted"
	DockerComposeV2StatePresent   DockerComposeV2State = "present"
)

// Convert a supported type to an optional (pointer) DockerComposeV2State
func OptionalDockerComposeV2State[T interface {
	*DockerComposeV2State | DockerComposeV2State | *string | string
}](s T) *DockerComposeV2State {
	switch v := any(s).(type) {
	case *DockerComposeV2State:
		return v
	case DockerComposeV2State:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerComposeV2State(*v)
		return &val
	case string:
		val := DockerComposeV2State(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Whether to pull images before running. This is used when `docker compose up`
// is run.
// `always` ensures that the images are always pulled, even when already present
// on the Docker daemon.
// `missing` only pulls them when they are not present on the Docker daemon.
// `never` never pulls images. If they are not present, the module will fail
// when trying to create the containers that need them.
// `policy` use the Compose file's `pull_policy` defined for the service to
// figure out what to do.
type DockerComposeV2Pull string

const (
	DockerComposeV2PullAlways     DockerComposeV2Pull = "always"
	DockerComposeV2PullMissing    DockerComposeV2Pull = "missing"
	DockerComposeV2PullNever      DockerComposeV2Pull = "never"
	DockerComposeV2PullPullPolicy DockerComposeV2Pull = "policy"
)

// Convert a supported type to an optional (pointer) DockerComposeV2Pull
func OptionalDockerComposeV2Pull[T interface {
	*DockerComposeV2Pull | DockerComposeV2Pull | *string | string
}](s T) *DockerComposeV2Pull {
	switch v := any(s).(type) {
	case *DockerComposeV2Pull:
		return v
	case DockerComposeV2Pull:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerComposeV2Pull(*v)
		return &val
	case string:
		val := DockerComposeV2Pull(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Whether to build images before starting containers. This is used when `docker
// compose up` is run.
// `always` always builds before starting containers. This is equivalent to the
// `--build` option of `docker compose up`.
// `never` never builds before starting containers. This is equivalent to the
// `--no-build` option of `docker compose up`.
// `policy` uses the policy as defined in the Compose file.
type DockerComposeV2Build string

const (
	DockerComposeV2BuildAlways DockerComposeV2Build = "always"
	DockerComposeV2BuildNever  DockerComposeV2Build = "never"
	DockerComposeV2BuildPolicy DockerComposeV2Build = "policy"
)

// Convert a supported type to an optional (pointer) DockerComposeV2Build
func OptionalDockerComposeV2Build[T interface {
	*DockerComposeV2Build | DockerComposeV2Build | *string | string
}](s T) *DockerComposeV2Build {
	switch v := any(s).(type) {
	case *DockerComposeV2Build:
		return v
	case DockerComposeV2Build:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerComposeV2Build(*v)
		return &val
	case string:
		val := DockerComposeV2Build(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// By default containers will be recreated when their configuration differs from
// the service definition.
// Setting to `never` ignores configuration differences and leaves existing
// containers unchanged.
// Setting to `always` forces recreation of all existing containers.
type DockerComposeV2Recreate string

const (
	DockerComposeV2RecreateAlways DockerComposeV2Recreate = "always"
	DockerComposeV2RecreateNever  DockerComposeV2Recreate = "never"
	DockerComposeV2RecreateAuto   DockerComposeV2Recreate = "auto"
)

// Convert a supported type to an optional (pointer) DockerComposeV2Recreate
func OptionalDockerComposeV2Recreate[T interface {
	*DockerComposeV2Recreate | DockerComposeV2Recreate | *string | string
}](s T) *DockerComposeV2Recreate {
	switch v := any(s).(type) {
	case *DockerComposeV2Recreate:
		return v
	case DockerComposeV2Recreate:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerComposeV2Recreate(*v)
		return &val
	case string:
		val := DockerComposeV2Recreate(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Use with `state=absent` to remove all images or only local images.
type DockerComposeV2RemoveImages string

const (
	DockerComposeV2RemoveImagesAll   DockerComposeV2RemoveImages = "all"
	DockerComposeV2RemoveImagesLocal DockerComposeV2RemoveImages = "local"
)

// Convert a supported type to an optional (pointer) DockerComposeV2RemoveImages
func OptionalDockerComposeV2RemoveImages[T interface {
	*DockerComposeV2RemoveImages | DockerComposeV2RemoveImages | *string | string
}](s T) *DockerComposeV2RemoveImages {
	switch v := any(s).(type) {
	case *DockerComposeV2RemoveImages:
		return v
	case DockerComposeV2RemoveImages:
		return &v
	case *string:
		if v == nil {
			return nil
		}
		val := DockerComposeV2RemoveImages(*v)
		return &val
	case string:
		val := DockerComposeV2RemoveImages(v)
		return &val
	default:
		panic("unsupported type")
	}
}

// Parameters for the `docker_compose_v2` Ansible module.
type DockerComposeV2Parameters struct {
	// Desired state of the project.
	// `present` is equivalent to running `docker compose up`.
	// `stopped` is equivalent to running `docker compose stop`.
	// `absent` is equivalent to running `docker compose down`.
	// `restarted` is equivalent to running `docker compose restart`.
	// default: DockerComposeV2StatePresent
	State *DockerComposeV2State `json:"state,omitempty"`

	// Whether to pull images before running. This is used when `docker compose up`
	// is run.
	// `always` ensures that the images are always pulled, even when already
	// present on the Docker daemon.
	// `missing` only pulls them when they are not present on the Docker daemon.
	// `never` never pulls images. If they are not present, the module will fail
	// when trying to create the containers that need them.
	// `policy` use the Compose file's `pull_policy` defined for the service to
	// figure out what to do.
	// default: DockerComposeV2PullPolicy
	Pull *DockerComposeV2Pull `json:"pull,omitempty"`

	// Whether to build images before starting containers. This is used when
	// `docker compose up` is run.
	// `always` always builds before starting containers. This is equivalent to the
	// `--build` option of `docker compose up`.
	// `never` never builds before starting containers. This is equivalent to the
	// `--no-build` option of `docker compose up`.
	// `policy` uses the policy as defined in the Compose file.
	// default: DockerComposeV2BuildPolicy
	Build *DockerComposeV2Build `json:"build,omitempty"`

	// When `state` is `present` or `restarted`, specify whether or not to include
	// linked services.
	// default: true
	Dependencies *bool `json:"dependencies,omitempty"`

	// Ignores image building events for change detection.
	// If `state=present` and `ignore_build_events=true` and `build=always`, a
	// rebuild that does not trigger a container restart no longer results in
	// R`ignore:changed=true`.
	// Note that Docker Compose 2.31.0 is the first Compose 2.x version to emit
	// build events. For older versions, the behavior is always as if
	// `ignore_build_events=true`.
	// default: true
	IgnoreBuildEvents *bool `json:"ignore_build_events,omitempty"`

	// By default containers will be recreated when their configuration differs
	// from the service definition.
	// Setting to `never` ignores configuration differences and leaves existing
	// containers unchanged.
	// Setting to `always` forces recreation of all existing containers.
	// default: DockerComposeV2RecreateAuto
	Recreate *DockerComposeV2Recreate `json:"recreate,omitempty"`

	// Whether to recreate instead of reuse anonymous volumes from previous
	// containers.
	// `true` is equivalent to the `--renew-anon-volumes` option of `docker compose
	// up`.
	// default: false
	RenewAnonVolumes *bool `json:"renew_anon_volumes,omitempty"`

	// Use with `state=absent` to remove all images or only local images.
	RemoveImages *DockerComposeV2RemoveImages `json:"remove_images,omitempty"`

	// Use with `state=absent` to remove data volumes.
	// default: false
	RemoveVolumes *bool `json:"remove_volumes,omitempty"`

	// Remove containers for services not defined in the Compose file.
	// default: false
	RemoveOrphans *bool `json:"remove_orphans,omitempty"`

	// Timeout in seconds for container shutdown when attached or when containers
	// are already running.
	Timeout *int `json:"timeout,omitempty"`

	// Specifies a subset of services to be targeted.
	Services *[]string `json:"services,omitempty"`

	// Define how to scale services when running `docker compose up`.
	// Provide a dictionary of key/value pairs where the key is the name of the
	// service and the value is an integer count for the number of containers.
	Scale *map[string]any `json:"scale,omitempty"`

	// When running `docker compose up`, pass `--wait` to wait for services to be
	// running/healthy.
	// A timeout can be set with the `wait_timeout` option.
	// default: false
	Wait *bool `json:"wait,omitempty"`

	// When `wait=true`, wait at most this amount of seconds.
	WaitTimeout *int `json:"wait_timeout,omitempty"`

	// When `assume_yes=true`, pass `-y`/`--yes` to assume "yes" as answer to all
	// prompts and run non-interactively.
	// Right now a prompt is asked whenever a non-matching volume should be re-
	// created. `assume_yes=false` results in the question being answered by "no",
	// which will simply re-use the existing volume.
	// This option is only available on Docker Compose 2.32.0 or newer.
	// default: false
	AssumeYes *bool `json:"assume_yes,omitempty"`

	// Path to a directory containing a Compose file (`compose.yml`,
	// `compose.yaml`, `docker-compose.yml`, or `docker-compose.yaml`).
	// If `files` is provided, will look for these files in this directory instead.
	// Mutually exclusive with `definition`. One of `project_src` and `definition`
	// must be provided.
	ProjectSrc *string `json:"project_src,omitempty"`

	// Provide a project name. If not provided, the project name is taken from the
	// basename of `project_src`.
	// Required when `definition` is provided.
	ProjectName *string `json:"project_name,omitempty"`

	// List of Compose file names relative to `project_src` to be used instead of
	// the main Compose file (`compose.yml`, `compose.yaml`, `docker-compose.yml`,
	// or `docker-compose.yaml`).
	// Files are loaded and merged in the order given.
	// Mutually exclusive with `definition`.
	Files *[]string `json:"files,omitempty"`

	// Compose file describing one or more services, networks and volumes.
	// Mutually exclusive with `project_src` and `files`. One of `project_src` and
	// `definition` must be provided.
	// If provided, PyYAML must be available to this module, and `project_name`
	// must be specified.
	// Note that a temporary directory will be created and deleted afterwards when
	// using this option.
	Definition *map[string]any `json:"definition,omitempty"`

	// By default environment files are loaded from a `.env` file located directly
	// under the `project_src` directory.
	// `env_files` can be used to specify the path of one or multiple custom
	// environment files instead.
	// The path is relative to the `project_src` directory.
	EnvFiles *[]string `json:"env_files,omitempty"`

	// List of profiles to enable when starting services.
	// Equivalent to `docker compose --profile`.
	Profiles *[]string `json:"profiles,omitempty"`

	// If set to `false`, the module will not check whether one of the files
	// `compose.yaml`, `compose.yml`, `docker-compose.yaml`, or `docker-
	// compose.yml` exists in `project_src` if `files` is not provided.
	// This can be useful if environment files with `COMPOSE_FILE` are used to
	// configure a different filename. The module currently does not check for
	// `COMPOSE_FILE` in environment files or the current environment.
	// default: true
	CheckFilesExisting *bool `json:"check_files_existing,omitempty"`

	// Path to the Docker CLI. If not provided, will search for Docker CLI on the
	// `PATH`.
	DockerCli *string `json:"docker_cli,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// Mutually exclusive with `cli_context`. If neither `docker_host` nor
	// `cli_context` are provided, the value `unix:///var/run/docker.sock` is used.
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by this collection and
	// the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// The Docker CLI context to use.
	// Mutually exclusive with `docker_host`.
	CliContext *string `json:"cli_context,omitempty"`
}

// Wrap the `DockerComposeV2Parameters into an `rpc.RPCCall`.
func (p DockerComposeV2Parameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerComposeV2Name,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_compose_v2` Ansible module.
type DockerComposeV2Return struct {
	AnsibleCommonReturns

	// A list of containers associated to the service.
	Containers *map[string]any `json:"containers,omitempty"`

	// A list of images associated to the service.
	Images *map[string]any `json:"images,omitempty"`

	// A list of actions that have been applied.
	Actions *map[string]any `json:"actions,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerComposeV2Return`
func DockerComposeV2ReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerComposeV2Return, error) {
	return cast.AnyToJSONT[DockerComposeV2Return](r.Result.Result)
}
