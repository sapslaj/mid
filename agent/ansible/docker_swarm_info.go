// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
	"github.com/sapslaj/mid/pkg/cast"
)

// Retrieves facts about a Docker Swarm.
// Returns lists of swarm objects names for the services - nodes, services,
// tasks.
// The output differs depending on API version available on docker host.
// Must be run on Swarm Manager node; otherwise module fails with error message.
// It does return boolean flags in on both error and success which indicate
// whether the docker daemon can be communicated with, whether it is in Swarm
// mode, and whether it is a Swarm Manager node.
const DockerSwarmInfoName = "docker_swarm_info"

// Parameters for the `docker_swarm_info` Ansible module.
type DockerSwarmInfoParameters struct {
	// Whether to list swarm nodes.
	// default: false
	Nodes *bool `json:"nodes,omitempty"`

	// A dictionary of filter values used for selecting nodes to list.
	// For example, `name: mynode`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/node_ls/#filtering` for more information on possible filters.
	NodesFilters *map[string]any `json:"nodes_filters,omitempty"`

	// Whether to list swarm services.
	// default: false
	Services *bool `json:"services,omitempty"`

	// A dictionary of filter values used for selecting services to list.
	// For example, `name: myservice`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/service_ls/#filtering` for more information on possible filters.
	ServicesFilters *map[string]any `json:"services_filters,omitempty"`

	// Whether to list containers.
	// default: false
	Tasks *bool `json:"tasks,omitempty"`

	// A dictionary of filter values used for selecting tasks to list.
	// For example, `node: mynode-1`.
	// See `the docker documentation,https://docs.docker.com/engine/reference/comma
	// ndline/service_ps/#filtering` for more information on possible filters.
	TasksFilters *map[string]any `json:"tasks_filters,omitempty"`

	// Whether to retrieve the swarm unlock key.
	// default: false
	UnlockKey *bool `json:"unlock_key,omitempty"`

	// When set to `true` and `nodes`, `services`, or `tasks` is set to `true`,
	// then the module output will contain verbose information about objects
	// matching the full output of API method.
	// For details see the documentation of your version of Docker API at
	// `https://docs.docker.com/engine/api/`.
	// The verbose output in this module contains only subset of information
	// returned by this info module for each type of the objects.
	// default: false
	VerboseOutput *bool `json:"verbose_output,omitempty"`

	// The URL or Unix socket path used to connect to the Docker API. To connect to
	// a remote host, provide the TCP connection string. For example,
	// `tcp://192.0.2.23:2376`. If TLS is used to encrypt the connection, the
	// module will automatically replace `tcp` in the connection URL with `https`.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_HOST` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: "unix:///var/run/docker.sock"
	DockerHost *string `json:"docker_host,omitempty"`

	// When verifying the authenticity of the Docker Host server, provide the
	// expected name of the server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_HOSTNAME` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// Note that this option had a default value `localhost` in older versions. It
	// was removed in community.docker 3.0.0.
	// `Note:` this option is no longer supported for Docker SDK for Python 7.0.0+.
	// Specifying it with Docker SDK for Python 7.0.0 or newer will lead to an
	// error.
	TlsHostname *string `json:"tls_hostname,omitempty"`

	// The version of the Docker API running on the Docker Host.
	// Defaults to the latest version of the API supported by Docker SDK for Python
	// and the docker daemon.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_API_VERSION` will be used instead. If the environment variable is
	// not set, the default value will be used.
	// default: "auto"
	ApiVersion *string `json:"api_version,omitempty"`

	// The maximum amount of time in seconds to wait on a response from the API.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TIMEOUT` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: 60
	Timeout *int `json:"timeout,omitempty"`

	// Use a CA certificate when performing server verification by providing the
	// path to a CA certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `ca.pem` from the directory specified in
	// the environment variable `DOCKER_CERT_PATH` will be used.
	// This option was called `ca_cert` and got renamed to `ca_path` in
	// community.docker 3.6.0. The old name has been added as an alias and can
	// still be used.
	CaPath *string `json:"ca_path,omitempty"`

	// Path to the client's TLS certificate file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `cert.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientCert *string `json:"client_cert,omitempty"`

	// Path to the client's TLS key file.
	// If the value is not specified in the task and the environment variable
	// `DOCKER_CERT_PATH` is set, the file `key.pem` from the directory specified
	// in the environment variable `DOCKER_CERT_PATH` will be used.
	ClientKey *string `json:"client_key,omitempty"`

	// Secure the connection to the API by using TLS without verifying the
	// authenticity of the Docker host server. Note that if `validate_certs` is set
	// to `true` as well, it will take precedence.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS` will be used instead. If the environment variable is not set,
	// the default value will be used.
	// default: false
	Tls *bool `json:"tls,omitempty"`

	// For SSH transports, use the `ssh` CLI tool instead of paramiko.
	// Requires Docker SDK for Python 4.4.0 or newer.
	// default: false
	UseSshClient *bool `json:"use_ssh_client,omitempty"`

	// Secure the connection to the API by using TLS and verifying the authenticity
	// of the Docker host server.
	// If the value is not specified in the task, the value of environment variable
	// `DOCKER_TLS_VERIFY` will be used instead. If the environment variable is not
	// set, the default value will be used.
	// default: false
	ValidateCerts *bool `json:"validate_certs,omitempty"`

	// Debug mode.
	// default: false
	Debug *bool `json:"debug,omitempty"`
}

// Wrap the `DockerSwarmInfoParameters into an `rpc.RPCCall`.
func (p DockerSwarmInfoParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := cast.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: DockerSwarmInfoName,
			Args: args,
		},
	}, nil
}

// Return values for the `docker_swarm_info` Ansible module.
type DockerSwarmInfoReturn struct {
	AnsibleCommonReturns

	// Will be `true` if the module can talk to the docker daemon.
	CanTalkToDocker *bool `json:"can_talk_to_docker,omitempty"`

	// Will be `true` if the module can talk to the docker daemon, and the docker
	// daemon is in Swarm mode.
	DockerSwarmActive *bool `json:"docker_swarm_active,omitempty"`

	// Will be `true` if the module can talk to the docker daemon, the docker
	// daemon is in Swarm mode, and the current node is a manager node.
	// Only if this one is `true`, the module will not fail.
	DockerSwarmManager *bool `json:"docker_swarm_manager,omitempty"`

	// Facts representing the basic state of the docker Swarm cluster.
	// Contains tokens to connect to the Swarm.
	SwarmFacts *map[string]any `json:"swarm_facts,omitempty"`

	// Contains the key needed to unlock the swarm.
	SwarmUnlockKey *string `json:"swarm_unlock_key,omitempty"`

	// List of dict objects containing the basic information about each volume.
	// Keys matches the `docker node ls` output unless `verbose_output=true`. See
	// description for `verbose_output`.
	Nodes *map[string]any `json:"nodes,omitempty"`

	// List of dict objects containing the basic information about each volume.
	// Keys matches the `docker service ls` output unless `verbose_output=true`.
	// See description for `verbose_output`.
	Services *map[string]any `json:"services,omitempty"`

	// List of dict objects containing the basic information about each volume.
	// Keys matches the `docker service ps` output unless `verbose_output=true`.
	// See description for `verbose_output`.
	Tasks *map[string]any `json:"tasks,omitempty"`
}

// Unwrap the `rpc.RPCResult` into an `DockerSwarmInfoReturn`
func DockerSwarmInfoReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (DockerSwarmInfoReturn, error) {
	return cast.AnyToJSONT[DockerSwarmInfoReturn](r.Result.Result)
}
