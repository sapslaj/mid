# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import types as _types

__all__ = ["ExecArgs", "Exec"]


@pulumi.input_type
class ExecArgs:
    def __init__(
        __self__,
        *,
        create: pulumi.Input["_types.ExecCommandArgs"],
        delete: Optional[pulumi.Input["_types.ExecCommandArgs"]] = None,
        delete_before_replace: Optional[pulumi.Input[builtins.bool]] = None,
        dir: Optional[pulumi.Input[builtins.str]] = None,
        environment: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        ] = None,
        expand_argument_vars: Optional[pulumi.Input[builtins.bool]] = None,
        logging: Optional[pulumi.Input[builtins.str]] = None,
        triggers: Optional[pulumi.Input["_types.TriggersInputArgs"]] = None,
        update: Optional[pulumi.Input["_types.ExecCommandArgs"]] = None,
    ):
        """
        The set of arguments for constructing a Exec resource.
        """
        pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if delete_before_replace is not None:
            pulumi.set(__self__, "delete_before_replace", delete_before_replace)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if expand_argument_vars is not None:
            pulumi.set(__self__, "expand_argument_vars", expand_argument_vars)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Input["_types.ExecCommandArgs"]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: pulumi.Input["_types.ExecCommandArgs"]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input["_types.ExecCommandArgs"]]:
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input["_types.ExecCommandArgs"]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter(name="deleteBeforeReplace")
    def delete_before_replace(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "delete_before_replace")

    @delete_before_replace.setter
    def delete_before_replace(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "delete_before_replace", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def environment(
        self,
    ) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(
        self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]
    ):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="expandArgumentVars")
    def expand_argument_vars(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "expand_argument_vars")

    @expand_argument_vars.setter
    def expand_argument_vars(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "expand_argument_vars", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input["_types.TriggersInputArgs"]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input["_types.TriggersInputArgs"]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input["_types.ExecCommandArgs"]]:
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input["_types.ExecCommandArgs"]]):
        pulumi.set(self, "update", value)


@pulumi.type_token("mid:resource:Exec")
class Exec(pulumi.CustomResource):
    @overload
    def __init__(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        create: Optional[
            pulumi.Input[Union["_types.ExecCommandArgs", "_types.ExecCommandArgsDict"]]
        ] = None,
        delete: Optional[
            pulumi.Input[Union["_types.ExecCommandArgs", "_types.ExecCommandArgsDict"]]
        ] = None,
        delete_before_replace: Optional[pulumi.Input[builtins.bool]] = None,
        dir: Optional[pulumi.Input[builtins.str]] = None,
        environment: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        ] = None,
        expand_argument_vars: Optional[pulumi.Input[builtins.bool]] = None,
        logging: Optional[pulumi.Input[builtins.str]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        update: Optional[
            pulumi.Input[Union["_types.ExecCommandArgs", "_types.ExecCommandArgsDict"]]
        ] = None,
        __props__=None,
    ):
        """
        Create a Exec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    @overload
    def __init__(
        __self__,
        resource_name: str,
        args: ExecArgs,
        opts: Optional[pulumi.ResourceOptions] = None,
    ):
        """
        Create a Exec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExecArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...

    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(
            ExecArgs, pulumi.ResourceOptions, *args, **kwargs
        )
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(
        __self__,
        resource_name: str,
        opts: Optional[pulumi.ResourceOptions] = None,
        create: Optional[
            pulumi.Input[Union["_types.ExecCommandArgs", "_types.ExecCommandArgsDict"]]
        ] = None,
        delete: Optional[
            pulumi.Input[Union["_types.ExecCommandArgs", "_types.ExecCommandArgsDict"]]
        ] = None,
        delete_before_replace: Optional[pulumi.Input[builtins.bool]] = None,
        dir: Optional[pulumi.Input[builtins.str]] = None,
        environment: Optional[
            pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]
        ] = None,
        expand_argument_vars: Optional[pulumi.Input[builtins.bool]] = None,
        logging: Optional[pulumi.Input[builtins.str]] = None,
        triggers: Optional[
            pulumi.Input[
                Union["_types.TriggersInputArgs", "_types.TriggersInputArgsDict"]
            ]
        ] = None,
        update: Optional[
            pulumi.Input[Union["_types.ExecCommandArgs", "_types.ExecCommandArgsDict"]]
        ] = None,
        __props__=None,
    ):
        opts = pulumi.ResourceOptions.merge(
            _utilities.get_resource_opts_defaults(), opts
        )
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError(
                "Expected resource options to be a ResourceOptions instance"
            )
        if opts.id is None:
            if __props__ is not None:
                raise TypeError(
                    "__props__ is only valid when passed in combination with a valid opts.id to get an existing resource"
                )
            __props__ = ExecArgs.__new__(ExecArgs)

            if create is None and not opts.urn:
                raise TypeError("Missing required property 'create'")
            __props__.__dict__["create"] = create
            __props__.__dict__["delete"] = delete
            __props__.__dict__["delete_before_replace"] = delete_before_replace
            __props__.__dict__["dir"] = dir
            __props__.__dict__["environment"] = environment
            __props__.__dict__["expand_argument_vars"] = expand_argument_vars
            __props__.__dict__["logging"] = logging
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["update"] = update
            __props__.__dict__["stderr"] = None
            __props__.__dict__["stdout"] = None
        super(Exec, __self__).__init__(
            "mid:resource:Exec", resource_name, __props__, opts
        )

    @staticmethod
    def get(
        resource_name: str,
        id: pulumi.Input[str],
        opts: Optional[pulumi.ResourceOptions] = None,
    ) -> "Exec":
        """
        Get an existing Exec resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ExecArgs.__new__(ExecArgs)

        __props__.__dict__["create"] = None
        __props__.__dict__["delete"] = None
        __props__.__dict__["delete_before_replace"] = None
        __props__.__dict__["dir"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["expand_argument_vars"] = None
        __props__.__dict__["logging"] = None
        __props__.__dict__["stderr"] = None
        __props__.__dict__["stdout"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["update"] = None
        return Exec(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Output["_types.outputs.ExecCommand"]:
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> pulumi.Output[Optional["_types.outputs.ExecCommand"]]:
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter(name="deleteBeforeReplace")
    def delete_before_replace(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "delete_before_replace")

    @property
    @pulumi.getter
    def dir(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="expandArgumentVars")
    def expand_argument_vars(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "expand_argument_vars")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def stderr(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "stderr")

    @property
    @pulumi.getter
    def stdout(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "stdout")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output["_types.outputs.TriggersOutput"]:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def update(self) -> pulumi.Output[Optional["_types.outputs.ExecCommand"]]:
        return pulumi.get(self, "update")
