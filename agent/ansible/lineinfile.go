// Code generated by ./hack/generate-ansible-types.py DO NOT EDIT
package ansible

import (
	"github.com/sapslaj/mid/agent/rpc"
)

const LineinfileName = "lineinfile"

type LineinfileParameters struct {
	Path         string  `json:"path"`
	Regexp       *string `json:"regexp,omitempty"`
	SearchString *string `json:"search_string,omitempty"`
	State        *string `json:"state,omitempty"`
	Line         *string `json:"line,omitempty"`
	Backrefs     *bool   `json:"backrefs,omitempty"`
	Insertafter  *string `json:"insertafter,omitempty"`
	Insertbefore *string `json:"insertbefore,omitempty"`
	Create       *bool   `json:"create,omitempty"`
	Backup       *bool   `json:"backup,omitempty"`
	Firstmatch   *bool   `json:"firstmatch,omitempty"`
	Mode         *any    `json:"mode,omitempty"`
	Owner        *string `json:"owner,omitempty"`
	Group        *string `json:"group,omitempty"`
	Seuser       *string `json:"seuser,omitempty"`
	Serole       *string `json:"serole,omitempty"`
	Setype       *string `json:"setype,omitempty"`
	Selevel      *string `json:"selevel,omitempty"`
	UnsafeWrites *bool   `json:"unsafe_writes,omitempty"`
	Attributes   *string `json:"attributes,omitempty"`
	Validate     *string `json:"validate,omitempty"`
}

func (p *LineinfileParameters) ToRPCCall() (rpc.RPCCall[rpc.AnsibleExecuteArgs], error) {
	args, err := rpc.AnyToJSONT[map[string]any](p)
	if err != nil {
		return rpc.RPCCall[rpc.AnsibleExecuteArgs]{}, err
	}
	return rpc.RPCCall[rpc.AnsibleExecuteArgs]{
		RPCFunction: rpc.RPCAnsibleExecute,
		Args: rpc.AnsibleExecuteArgs{
			Name: LineinfileName,
			Args: args,
		},
	}, nil
}

type LineinfileReturn struct {
	AnsibleCommonReturns
}

func LineinfileReturnFromRPCResult(r rpc.RPCResult[rpc.AnsibleExecuteResult]) (LineinfileReturn, error) {
	return rpc.AnyToJSONT[LineinfileReturn](r.Result.Result)
}
